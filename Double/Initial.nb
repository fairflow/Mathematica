(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 10.0' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[    565371,      12281]
NotebookOptionsPosition[    554787,      11927]
NotebookOutlinePosition[    555850,      11968]
CellTagsIndexPosition[    555724,      11961]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell["Double-entry accounting", "Title"],

Cell[CellGroupData[{

Cell["Project lead: Matthew Fairtlough, Fairflow Systems Design", "Chapter"],

Cell[CellGroupData[{

Cell["To do", "Section",
 CellTags->"todo"],

Cell[CellGroupData[{

Cell[TextData[{
 StyleBox["remove ",
  FontSize->14],
 StyleBox["CellChangeTimes", "Input",
  FontSize->14],
 StyleBox[" They weren\[CloseCurlyQuote]t supposed to be in the original \
file. But they are not being updated which is good.", "Text",
  FontSize->14]
}], "ItemNumbered"],

Cell[TextData[{
 StyleBox["start recording time spent;  [",
  FontSize->14],
 StyleBox["started",
  FontSize->14,
  FontWeight->"Bold"],
 StyleBox["]",
  FontSize->14]
}], "ItemNumbered"],

Cell[TextData[{
 StyleBox["decide on git methodology w.r.t. notebooks or .m files (note that \
git now has git-lfs: a game-changer?);  [",
  FontSize->14],
 StyleBox["todo",
  FontSize->14,
  FontWeight->"Bold"],
 StyleBox["]",
  FontSize->14]
}], "ItemNumbered"],

Cell[TextData[{
 StyleBox["plan of development;  [",
  FontSize->14],
 StyleBox["todo",
  FontSize->14,
  FontWeight->"Bold"],
 StyleBox["]",
  FontSize->14]
}], "ItemNumbered"],

Cell[TextData[{
 "find all tags or notes to change stuff",
 StyleBox[";  [",
  FontSize->14],
 StyleBox["started",
  FontSize->14,
  FontWeight->"Bold"],
 StyleBox["]",
  FontSize->14]
}], "ItemNumbered"],

Cell[TextData[{
 StyleBox["collate list of initial features; [",
  FontSize->14],
 StyleBox["started",
  FontSize->14,
  FontWeight->"Bold"],
 StyleBox["]",
  FontSize->14]
}], "ItemNumbered"],

Cell[TextData[{
 StyleBox["sketch out interface and data design more fully;  [",
  FontSize->14],
 StyleBox["todo",
  FontSize->14,
  FontWeight->"Bold"],
 StyleBox["]",
  FontSize->14]
}], "ItemNumbered"],

Cell[TextData[{
 StyleBox["add code for export to ",
  FontSize->14],
 StyleBox[".qif", "Input",
  FontSize->14],
 StyleBox[";", "Text",
  FontSize->14],
 StyleBox["  [",
  FontSize->14],
 StyleBox["started",
  FontSize->14,
  FontWeight->"Bold"],
 StyleBox["]",
  FontSize->14]
}], "ItemNumbered"],

Cell[TextData[{
 StyleBox["add code for import from ", "Text",
  FontSize->14],
 StyleBox[".html", "Input",
  FontSize->14],
 StyleBox[";", "Text",
  FontSize->14],
 StyleBox["  [",
  FontSize->14],
 StyleBox["todo",
  FontSize->14,
  FontWeight->"Bold"],
 StyleBox["]",
  FontSize->14]
}], "ItemNumbered"],

Cell[TextData[{
 StyleBox["fix the colouring in the monads palette; [",
  FontSize->14],
 StyleBox["how?",
  FontSize->14,
  FontWeight->"Bold"],
 StyleBox["]",
  FontSize->14]
}], "ItemNumbered"],

Cell[TextData[{
 StyleBox["publish the work;  [",
  FontSize->14],
 StyleBox["todo",
  FontSize->14,
  FontWeight->"Bold"],
 StyleBox["]",
  FontSize->14]
}], "ItemNumbered"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Initialisation", "Section",
 CellChangeTimes->{{3.4752354906932907`*^9, 3.475235491603743*^9}, {
  3.521183469305766*^9, 3.521183473776937*^9}}],

Cell[CellGroupData[{

Cell["Generally useful packages", "Subsection"],

Cell[BoxData[
 RowBox[{"Needs", "[", "\"\<Units`\>\"", "]"}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.521181446019352*^9, 3.521181446929017*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell["Utility functions", "Subsection"],

Cell[BoxData[
 RowBox[{
  RowBox[{"makeConst", "[", "fn_", "]"}], ":=", 
  RowBox[{"(", 
   RowBox[{
    RowBox[{
     RowBox[{"fn", "[", "]"}], ":=", "fn"}], ";", 
    RowBox[{"SetAttributes", "[", 
     RowBox[{"fn", ",", "HoldAll"}], "]"}]}], ")"}]}]], "Input",
 InitializationCell->True]
}, Closed]],

Cell[CellGroupData[{

Cell["Monad comprehensions", "Subsection",
 CellChangeTimes->{{3.546002584365099*^9, 3.54600258521732*^9}, 
   3.546002917537384*^9}],

Cell[TextData[{
 "This is an experiment in extending the ",
 StyleBox["Mathematica ",
  FontSlant->"Italic"],
 "programming language to use a programming style familiar from functional \
languages such as ",
 StyleBox["Haskell",
  FontSlant->"Italic"],
 " and ",
 StyleBox["Clean",
  FontSlant->"Italic"],
 ". Below there is a ",
 ButtonBox["useful palette",
  BaseStyle->"Hyperlink",
  ButtonData->"palette"],
 " for entering comprehension syntax."
}], "Text"],

Cell[CellGroupData[{

Cell["Initialisation for Monads", "Subsubsection",
 InitializationGroup->True],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Needs", "[", "\"\<Monads`\>\"", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"Needs", "[", "\"\<Notation`\>\"", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"Notation", "[", 
   RowBox[{
    TagBox[
     RowBox[{"\[LeftBracketingBar]", "z___", "\[RightBracketingBar]"}],
     "NotationTemplateTag",
     BaseStyle->"NotationTemplateStyle"], " ", "\[DoubleLongLeftRightArrow]", 
    " ", 
    TagBox[
     RowBox[{"comprehend", "[", 
      RowBox[{"Sets", ",", "z___"}], "]"}],
     "NotationTemplateTag",
     BaseStyle->"NotationTemplateStyle"]}], "]"}], ";"}], "\n", 
 RowBox[{
  RowBox[{"Notation", "[", 
   RowBox[{
    TagBox[
     RowBox[{"\[LeftAngleBracket]", "z___", "\[RightAngleBracket]"}],
     "NotationTemplateTag",
     BaseStyle->"NotationTemplateStyle"], " ", "\[DoubleLongLeftRightArrow]", 
    " ", 
    TagBox[
     RowBox[{"comprehend", "[", 
      RowBox[{"List", ",", "z___"}], "]"}],
     "NotationTemplateTag",
     BaseStyle->"NotationTemplateStyle"]}], "]"}], ";"}], "\n", 
 RowBox[{
  RowBox[{"Notation", "[", 
   RowBox[{
    TagBox[
     RowBox[{"p_", "\[LeftTriangle]", "l_"}],
     "NotationTemplateTag",
     BaseStyle->"NotationTemplateStyle"], " ", "\[DoubleLongLeftRightArrow]", 
    " ", 
    TagBox[
     RowBox[{"generator", "[", 
      RowBox[{"p_", ",", "l_"}], "]"}],
     "NotationTemplateTag",
     BaseStyle->"NotationTemplateStyle"]}], "]"}], " ", ";"}], "\n", 
 RowBox[{
  RowBox[{"InfixNotation", "[", 
   RowBox[{
    TagBox["\[DoubleVerticalBar]",
     "NotationTemplateTag"], ",", "zipgen"}], "]"}], ";"}]}], "Input",
 InitializationCell->True]
}, Closed]],

Cell[CellGroupData[{

Cell["Introduction to general monads", "Subsubsection"],

Cell[TextData[{
 "The idea of types is useful in explaining general monads, even in a setting \
such as this where types are not explicit.  We can see already  in the \
definition of ",
 Cell[BoxData[
  StyleBox["comprehend", "InlineInput"]], "Input"],
 " that an element of typing is necessarily introduced with comprehensions \
since ",
 Cell[BoxData[
  StyleBox["comprehend", "InlineInput"]], "Input"],
 " requires the supply of a notion of computation as its first argument.  For \
this presentation, it is enough to think of a type as a set of expressions of \
some kind."
}], "Text",
 CellChangeTimes->{{3.5460026087277193`*^9, 3.546002610465622*^9}, {
  3.546003188942327*^9, 3.5460031906075687`*^9}, {3.547105910344377*^9, 
  3.5471059113420753`*^9}}],

Cell[TextData[{
 Cell[BoxData[
  StyleBox["List", "InlineInput"]], "Input"],
 " is a monad (with zero).  A monad ",
 Cell[BoxData[
  StyleBox["m", "InlineInput"]], "Input"],
 " encapsulates a generalised ",
 StyleBox["notion of computation",
  FontSlant->"Italic"],
 ". Given any type ",
 Cell[BoxData["\[Alpha]"], "Input"],
 ", the monad produces a type ",
 Cell[BoxData[
  StyleBox[
   RowBox[{"m", "[", "\[Alpha]", "]"}], "InlineInput"]], "Input"],
 ", to be seen as a type of ",
 StyleBox["computations yielding values in ",
  FontSlant->"Italic"],
 Cell[BoxData[
  StyleBox["\[Alpha]",
   FontSlant->"Italic"]], "Input"],
 ".  (At least) two functions are defined for any monad ",
 Cell[BoxData[
  StyleBox["m", "InlineInput"]], "Input"],
 ", namely ",
 Cell[BoxData[
  StyleBox[
   RowBox[{"unit", "[", "m", "]"}], "InlineInput"]], "Input"],
 " and ",
 Cell[BoxData[
  StyleBox[
   RowBox[{"bind", "[", "m", "]"}], "InlineInput"]], "Input"],
 ".  ",
 Cell[BoxData[
  StyleBox[
   RowBox[{"unit", "[", "m", "]"}], "InlineInput"]], "Input"],
 " is a function ",
 Cell[BoxData[
  StyleBox[
   RowBox[{"\[Alpha]", " ", "\[LongRightArrow]", " ", 
    RowBox[{"m", "[", "\[Alpha]", "]"}]}], "InlineInput"]], "Input"],
 " which, when given an value of type ",
 Cell[BoxData["\[Alpha]"], "Input"],
 ", returns a computation which immediately returns that value (",
 Cell[BoxData[
  StyleBox["unit", "InlineInput"]], "Input"],
 " is often called ",
 Cell[BoxData[
  StyleBox["return", "InlineInput"]], "Input"],
 ").  In the case of the ",
 Cell[BoxData[
  StyleBox["List", "InlineInput"]], "Input"],
 " monad, ",
 Cell[BoxData[
  StyleBox[
   RowBox[{
    RowBox[{
     RowBox[{"unit", "[", "List", "]"}], "[", "a", "]"}], "=", 
    RowBox[{"{", "a", "}"}]}], "InlineInput"]], "Input"],
 ".  ",
 Cell[BoxData[
  StyleBox[
   RowBox[{"bind", "[", "m", "]"}], "InlineInput"]], "Input"],
 " is a more complex function, which given a computation-generating function ",
 Cell[BoxData[
  StyleBox[
   RowBox[{"f", " ", ":", " ", 
    RowBox[{"\[Alpha]", " ", "\[LongRightArrow]", " ", 
     RowBox[{"m", "[", "\[Beta]", "]"}]}]}], "InlineInput"]], "Input"],
 " and a computation of type ",
 Cell[BoxData[
  StyleBox[
   RowBox[{"m", "[", "\[Alpha]", "]"}], "InlineInput"]], "Input"],
 ", produces a computation of type ",
 Cell[BoxData[
  StyleBox[
   RowBox[{"m", "[", "\[Beta]", "]"}], "InlineInput"]], "Input"],
 ".  Intuitively, ",
 Cell[BoxData[
  StyleBox[
   RowBox[{
    RowBox[{"bind", "[", "m", "]"}], "[", 
    RowBox[{"f", ",", "c"}], "]"}], "InlineInput"]], "Input"],
 " works as follows: execute the computation ",
 Cell[BoxData[
  StyleBox["c", "InlineInput"]], "Input"],
 " over ",
 Cell[BoxData["\[Alpha]"], "Input"],
 ", giving a value ",
 Cell[BoxData[
  StyleBox["a", "InlineInput"]], "Input"],
 " in ",
 Cell[BoxData["\[Alpha]"], "Input"],
 ".  Then apply the function ",
 Cell[BoxData[
  StyleBox["f", "InlineInput"]], "Input"],
 "  to ",
 Cell[BoxData[
  StyleBox["a", "InlineInput"]], "Input"],
 ", yielding a computation over ",
 Cell[BoxData["\[Beta]"], "Input"],
 ", which is then executed to give a value in ",
 Cell[BoxData["\[Beta]"], "Input"],
 ".  In the case of the ",
 Cell[BoxData[
  StyleBox["List", "InlineInput"]], "Input"],
 " monad, the notion of computation is ",
 StyleBox["non-determinism",
  FontSlant->"Italic"],
 ". Many (or no) values are returned in a list ",
 Cell[BoxData[
  StyleBox[
   RowBox[{"{", "l___", "}"}], "InlineInput"]], "Input"],
 ", rather than just one.  Thus ",
 Cell[BoxData[
  StyleBox[
   RowBox[{
    RowBox[{"bind", "[", "List", "]"}], "[", 
    RowBox[{"f", ",", "c"}], "]"}], "InlineInput"]], "Input"],
 " takes the elements of ",
 Cell[BoxData[
  StyleBox["c", "InlineInput"]], "Input"],
 " and applies ",
 Cell[BoxData[
  StyleBox["f", "InlineInput"]], "Input"],
 " to each one, yielding a list of lists.  The elements of those lists are \
returned, that is, the list of lists is flattened at the outermost level."
}], "Text",
 CellChangeTimes->{{3.546002640051774*^9, 3.546002640071183*^9}}],

Cell[TextData[{
 "We could use these definitions to construct a monad comprehension syntax \
from any monad; however in order to use tests we need a zero for the monad. \
Not all monads have a zero but common ones such as ",
 StyleBox["List", "Input"],
 " do."
}], "Text"]
}, Closed]],

Cell[CellGroupData[{

Cell["Definitions of monadic functions", "Subsubsection",
 CellChangeTimes->{{3.546002973989172*^9, 3.5460029741869373`*^9}, {
  3.546003006540436*^9, 3.546003007396016*^9}}],

Cell[TextData[{
 "The monadic functions for ",
 Cell[BoxData[
  StyleBox["List", "InlineInput"]], "Input"],
 " are (thus) as follows:"
}], "Text",
 CellChangeTimes->{3.5460026604156933`*^9}],

Cell[BoxData[{
 RowBox[{
  RowBox[{"zero", "[", "List", "]"}], ":=", 
  RowBox[{"{", "}"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"unit", "[", "List", "]"}], ":=", 
  RowBox[{
   RowBox[{"{", "#", "}"}], "&"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"bind", "[", "List", "]"}], ":=", 
  RowBox[{
   RowBox[{"Flatten", "[", 
    RowBox[{
     RowBox[{"#1", " ", "/@", " ", "#2"}], ",", "1"}], "]"}], 
   "&"}]}]}], "Input",
 CellChangeTimes->{{3.546071869868903*^9, 3.5460718719023657`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"bind", "[", "List", "]"}], "[", 
  RowBox[{"Range", ",", 
   RowBox[{"{", 
    RowBox[{"2", ",", "3", ",", "4"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{
  3.546002679039317*^9, {3.546002725879683*^9, 3.546002727113071*^9}, 
   3.5460027899007607`*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "1", ",", "2", ",", "1", ",", "2", ",", "3", ",", "1", ",", "2", ",", "3", 
   ",", "4"}], "}"}]], "Output",
 CellChangeTimes->{3.546002845044282*^9}]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["The general definition of a monad comprehension", "Subsubsection",
 CellChangeTimes->{{3.54600300186194*^9, 3.546003011019986*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{
    "if", " ", "there", " ", "are", " ", "no", " ", "remaining", " ", 
     "generators", " ", "or", " ", "conditions"}], ",", " ", 
    RowBox[{"return", " ", "the", " ", "value", " ", "e", " ", "only"}]}], 
   " ", "*)"}], "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{"comprehend", "[", 
     RowBox[{"m_", ",", "e_", ",", "True"}], "]"}], ":=", 
    RowBox[{
     RowBox[{"unit", "[", "m", "]"}], "[", "e", "]"}]}], 
   "\[IndentingNewLine]", 
   RowBox[{"(*", " ", 
    RowBox[{
    "process", " ", "the", " ", "last", " ", "generator", " ", "or", " ", 
     "condition"}], " ", "*)"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"comprehend", "[", 
     RowBox[{"m_", ",", "e_", ",", " ", "q_"}], "]"}], ":=", 
    RowBox[{"comprehend", "[", 
     RowBox[{"m", ",", "e", ",", "q", ",", "True"}], "]"}]}], 
   "\[IndentingNewLine]", 
   RowBox[{"(*", " ", 
    RowBox[{
     RowBox[{
      RowBox[{
      "process", " ", "a", " ", "generator", " ", "with", " ", "pattern", " ",
        "p", " ", "and", " ", "source", " ", "l"}], ";", " ", 
      RowBox[{"if", " ", "pattern", " ", "match", " ", "fails"}]}], ",", " ", 
     
     RowBox[{"return", " ", "with", " ", "zero"}]}], " ", "*)"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"comprehend", "[", 
     RowBox[{"m_", ",", "e_", ",", 
      RowBox[{"p_", "\[LeftTriangle]", "l_"}], ",", "q__"}], "]"}], ":=", 
    "\[IndentingNewLine]", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", "ok", "}"}], ",", 
      RowBox[{
       RowBox[{
        RowBox[{"ok", "[", "p", "]"}], ":=", 
        RowBox[{"comprehend", "[", 
         RowBox[{"m", ",", "e", ",", "q"}], "]"}]}], ";", 
       RowBox[{
        RowBox[{"ok", "[", "_", "]"}], ":=", 
        RowBox[{"zero", "[", "m", "]"}]}], ";", 
       RowBox[{
        RowBox[{"bind", "[", "m", "]"}], "[", 
        RowBox[{"ok", ",", "l"}], "]"}]}]}], "]"}]}], "\[IndentingNewLine]", 
   RowBox[{"(*", " ", 
    RowBox[{
     RowBox[{
     "anything", " ", "not", " ", "a", " ", "generator", " ", "is", " ", "a", 
      " ", "test"}], ";", " ", 
     RowBox[{
     "the", " ", "remaining", " ", "computation", " ", "is", " ", "discarded",
       " ", "if", " ", "it", " ", "fails"}]}], " ", "*)"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"comprehend", "[", 
     RowBox[{"m_", ",", "e_", ",", "b_", ",", "q__"}], "]"}], ":=", 
    RowBox[{"If", "[", 
     RowBox[{"b", ",", 
      RowBox[{"comprehend", "[", 
       RowBox[{"m", ",", "e", ",", "q"}], "]"}], ",", 
      RowBox[{"zero", "[", "m", "]"}]}], "]"}]}]}]}]], "Input"]
}, Closed]],

Cell[CellGroupData[{

Cell["The Set monad", "Subsubsection",
 CellChangeTimes->{{3.5460040196686296`*^9, 3.546004022352826*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"pluck", "[", 
   RowBox[{"e_", ",", "l_"}], "]"}], ":=", 
  RowBox[{"Block", "[", 
   RowBox[{
    RowBox[{"{", "x", "}"}], ",", 
    RowBox[{"\[LeftAngleBracket]", 
     RowBox[{"x", ",", 
      RowBox[{"x_", " ", "\[LeftTriangle]", " ", "l"}], ",", 
      RowBox[{"x", "=!=", "e"}]}], "\[RightAngleBracket]"}]}], 
   "]"}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.546004030520919*^9, 3.5460040367814493`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"pluck", "[", 
  RowBox[{"3", ",", 
   RowBox[{"{", 
    RowBox[{"3", ",", "3", ",", "4", ",", "5", ",", "6"}], "}"}]}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.546005380319477*^9, 3.5460054098767977`*^9}, {
  3.5460062845767717`*^9, 3.546006286200119*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"4", ",", "5", ",", "6"}], "}"}]], "Output"]
}, Open  ]],

Cell[TextData[{
 "There is a ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " built-in function ",
 StyleBox["DeleteDuplicates", "Input"],
 " that removes duplicates.  A local version is developed here to illustrate \
that monadic syntax can be useful in defining additional monads."
}], "Text"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"removeDups", "[", 
   RowBox[{"{", "}"}], "]"}], ":=", 
  RowBox[{"{", "}"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"removeDups", "[", 
   RowBox[{"{", 
    RowBox[{"h_", ",", "l___"}], "}"}], "]"}], ":=", 
  RowBox[{"Prepend", "[", 
   RowBox[{
    RowBox[{"pluck", "[", 
     RowBox[{"h", ",", 
      RowBox[{"removeDups", "[", 
       RowBox[{"{", "l", "}"}], "]"}]}], "]"}], ",", "h"}], "]"}]}]}], "Input",\

 CellChangeTimes->{3.54600404175415*^9}],

Cell[BoxData[{
 RowBox[{
  RowBox[{"zero", "[", "Sets", "]"}], ":=", 
  RowBox[{"{", "}"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"unit", "[", "Sets", "]"}], ":=", 
  RowBox[{
   RowBox[{"{", "#", "}"}], "&"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"bind", "[", "Sets", "]"}], ":=", 
  RowBox[{
   RowBox[{"removeDups", "[", 
    RowBox[{"Flatten", "[", 
     RowBox[{
      RowBox[{"#1", " ", "/@", " ", "#2"}], ",", "1"}], "]"}], "]"}], 
   "&"}]}]}], "Input",
 CellChangeTimes->{{3.546004053721813*^9, 3.5460040543987513`*^9}, {
  3.54600485886348*^9, 3.546004865261623*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"bind", "[", "Sets", "]"}], "[", 
  RowBox[{"Range", ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "2", ",", "3", ",", "4"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{
  3.546002679039317*^9, {3.546002725879683*^9, 3.546002727113071*^9}, 
   3.5460027899007607`*^9, {3.546004722527937*^9, 3.546004722963286*^9}, 
   3.546004756503255*^9, {3.5460062063887*^9, 3.546006208530548*^9}, {
   3.5460062400937138`*^9, 3.546006242153459*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"1", ",", "2", ",", "3", ",", "4"}], "}"}]], "Output"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["Simple example of the list monad", "Subsubsection"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Block", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"x", ",", "y"}], "}"}], ",", 
   RowBox[{"\[LeftAngleBracket]", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       SuperscriptBox["x", "2"], ",", 
       SqrtBox["y"]}], "}"}], ",", 
     RowBox[{"x_", " ", "\[LeftTriangle]", " ", 
      RowBox[{"Range", "[", "3", "]"}]}], ",", 
     RowBox[{"y_", "\[LeftTriangle]", 
      RowBox[{"Range", "[", 
       RowBox[{"2", ",", "5"}], "]"}]}], ",", 
     RowBox[{
      RowBox[{"x", " ", "y"}], " ", ">", " ", "4"}], ",", 
     RowBox[{
      RowBox[{"x", "+", "y"}], "=!=", "6"}]}], "\[RightAngleBracket]"}]}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.5460719785313807`*^9, 3.546071995679267*^9}, {
  3.5471063213758*^9, 3.547106327473981*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"4", ",", 
     SqrtBox["3"]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"4", ",", 
     SqrtBox["5"]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"9", ",", 
     SqrtBox["2"]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"9", ",", "2"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"9", ",", 
     SqrtBox["5"]}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.545995967667439*^9, 3.5460043634607153`*^9, 
  3.546004487863296*^9, 3.546004784443838*^9, 3.546005276254693*^9, 
  3.5460055166717*^9, 3.546005640295621*^9, 3.546005945475567*^9, 
  3.546071934763319*^9, 3.546072000546831*^9, 3.54710633265228*^9}]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["Local variables in monad comprehensions", "Subsubsection"],

Cell["\<\
One advantage of this style of programming is that it is very easy to modify \
the code, for instance to add extra conditions or local names.  Previously \
declared names are in scope of those declared later.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Block", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "}"}], ",", 
   "\[IndentingNewLine]", 
   RowBox[{"\[LeftAngleBracket]", 
    RowBox[{"d", ",", 
     RowBox[{"a_", "\[LeftTriangle]", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"3", ",", "5"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"1", ",", "2"}], "}"}]}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"2", ",", "7"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"4", ",", "4"}], "}"}]}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"2", ",", "7"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"4", ",", "0"}], "}"}]}], "}"}]}], "}"}]}], ",", 
     RowBox[{
      RowBox[{"b", "=", 
       RowBox[{"a", "[", 
        RowBox[{"[", 
         RowBox[{"1", ",", "1"}], "]"}], "]"}]}], ";", 
      RowBox[{"b", "\[NotEqual]", "0"}]}], ",", 
     RowBox[{
      RowBox[{"c", "=", 
       RowBox[{"a", "[", 
        RowBox[{"[", 
         RowBox[{"2", ",", "2"}], "]"}], "]"}]}], ";", 
      RowBox[{"c", "\[NotEqual]", "0"}]}], ",", 
     RowBox[{
      RowBox[{"d", "=", 
       SuperscriptBox["b", "c"]}], ";", "True"}]}], 
    "\[RightAngleBracket]"}]}], "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"9", ",", "16"}], "}"}]], "Output"]
}, Open  ]],

Cell["\<\
This can be harder to implement using conventional declarations:\
\>", "Text",
 CellChangeTimes->{{3.5471100470251627`*^9, 3.547110069254959*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Block", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"a", "=", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"3", ",", "5"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"1", ",", "2"}], "}"}]}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"2", ",", "7"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"4", ",", "4"}], "}"}]}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"2", ",", "7"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"4", ",", "0"}], "}"}]}], "}"}]}], "}"}]}], ",", 
     RowBox[{"b", "=", 
      RowBox[{"a", "[", 
       RowBox[{"[", 
        RowBox[{"1", ",", "1"}], "]"}], "]"}]}], ",", 
     RowBox[{"c", "=", 
      RowBox[{"a", "[", 
       RowBox[{"[", 
        RowBox[{"2", ",", "2"}], "]"}], "]"}]}], ",", 
     RowBox[{"d", "=", 
      SuperscriptBox["b", "c"]}]}], "}"}], ",", 
   RowBox[{"If", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"b", "\[NotEqual]", "0"}], "&&", 
      RowBox[{"c", "\[NotEqual]", "0"}]}], ",", 
     RowBox[{"{", "d", "}"}], ",", 
     RowBox[{"{", "}"}]}], "]"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.547109282095006*^9, 3.547109388718279*^9}, {
   3.547109534222377*^9, 3.547109587229471*^9}, {3.547109671379775*^9, 
   3.5471097002883377`*^9}, {3.547109736854134*^9, 3.547109737892541*^9}, {
   3.547109916354621*^9, 3.54710996512683*^9}, 3.547110017757721*^9, {
   3.547110082260145*^9, 3.5471101226333637`*^9}, {3.5471842849690313`*^9, 
   3.547184316544404*^9}, 3.558407000818706*^9}],

Cell[BoxData[
 RowBox[{
  StyleBox[
   RowBox[{"Part", "::", "partd"}], "MessageName"], ":", 
  " ", "\<\"Part specification \[NoBreak]\\!\\(a \[LeftDoubleBracket] \
\\(\\(1, 1\\)\\) \[RightDoubleBracket]\\)\[NoBreak] is longer than depth of \
object. \\!\\(\\*ButtonBox[\\\"\[RightSkeleton]\\\", \
ButtonStyle->\\\"Link\\\", ButtonFrame->None, \
ButtonData:>\\\"paclet:ref/message/General/partd\\\", ButtonNote -> \
\\\"Part::partd\\\"]\\)\"\>"}]], "Message", "MSG"],

Cell[BoxData[
 RowBox[{
  StyleBox[
   RowBox[{"Part", "::", "partd"}], "MessageName"], ":", 
  " ", "\<\"Part specification \[NoBreak]\\!\\(a \[LeftDoubleBracket] \
\\(\\(2, 2\\)\\) \[RightDoubleBracket]\\)\[NoBreak] is longer than depth of \
object. \\!\\(\\*ButtonBox[\\\"\[RightSkeleton]\\\", \
ButtonStyle->\\\"Link\\\", ButtonFrame->None, \
ButtonData:>\\\"paclet:ref/message/General/partd\\\", ButtonNote -> \
\\\"Part::partd\\\"]\\)\"\>"}]], "Message", "MSG"],

Cell[BoxData[
 RowBox[{"If", "[", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{"{", 
      RowBox[{"3", ",", "5"}], "}"}], "\[NotEqual]", "0"}], "&&", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"4", ",", "4"}], "}"}], "\[NotEqual]", "0"}]}], ",", 
   RowBox[{"{", "d", "}"}], ",", 
   RowBox[{"{", "}"}]}], "]"}]], "Output"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["Palette for monad comprehensions", "Subsubsection"],

Cell[BoxData[GridBox[{
   {
    ButtonBox[
     RowBox[{"\[LeftAngleBracket]", 
      RowBox[{"\[SelectionPlaceholder]", ",", 
       RowBox[{
       "\[Placeholder]", " ", "\[LeftTriangle]", " ", "\[Placeholder]"}]}], 
      "\[RightAngleBracket]"}]], 
    ButtonBox[
     RowBox[{
     "\[SelectionPlaceholder]", "\[LeftTriangle]", "\[Placeholder]"}]], 
    ButtonBox["\[LeftAngleBracket]"], 
    ButtonBox["\[RightAngleBracket]"], 
    RowBox[{
     ButtonBox["\[LeftTriangle]"], 
     ButtonBox["\[DoubleVerticalBar]"]}]},
   {
    ButtonBox[
     RowBox[{"\[SelectionPlaceholder]", "\[Union]", "\[Placeholder]"}]], 
    ButtonBox[
     RowBox[{
     "\[SelectionPlaceholder]", "\[Intersection]", "\[Placeholder]"}]], 
    ButtonBox["\[And]"], 
    ButtonBox["\[Or]"], 
    ButtonBox["\[Not]"]},
   {
    ButtonBox[
     RowBox[{"\[LeftBracketingBar]", 
      RowBox[{"\[SelectionPlaceholder]", ",", 
       RowBox[{"\[Placeholder]", "\[LeftTriangle]", "\[Placeholder]"}]}], 
      "\[RightBracketingBar]"}]], 
    ButtonBox[
     RowBox[{"{", "\[SelectionPlaceholder]", "}"}]], 
    ButtonBox["\[LeftBracketingBar]"], 
    ButtonBox["\[RightBracketingBar]"], 
    ButtonBox[""]}
  },
  GridBoxDividers->{
   "Columns" -> {True, {False}, True}, "ColumnsIndexed" -> {}, 
    "Rows" -> {{True}}, "RowsIndexed" -> {}},
  GridBoxSpacings->{"Columns" -> {
      Offset[0.27999999999999997`], {
       Offset[0.]}, 
      Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
      Offset[0.2], {
       Offset[0.]}, 
      Offset[0.2]}, "RowsIndexed" -> {}},
  GridDefaultElement:>ButtonBox["\\[Placeholder]"]]], "Input",
 Deployed->True,
 Evaluatable->False,
 CellTags->"palette"]
}, Open  ]],

Cell[CellGroupData[{

Cell["How to view information about a palette", "Subsubsection"],

Cell["\<\
Replace the directories used below with the installation directory for this \
project.\
\>", "Text"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"SetDirectory", "[", "$HomeDirectory", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"SetDirectory", "[", "\"\<Mathematica/Double\>\"", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"compPalette", "=", 
   RowBox[{
   "NotebookOpen", "[", 
    "\"\</Users/matthew/Mathematica/Double/Comprehensions.nb\>\"", "]"}]}], 
  ";"}]}], "Input"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"NotebookInformation", "[", "compPalette", "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"\<\"FileName\"\>", "\[Rule]", 
    RowBox[{"FrontEnd`FileName", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
       "$RootDirectory", ",", "\<\"Users\"\>", ",", "\<\"matthew\"\>", 
        ",", "\<\"Mathematica\"\>", ",", "\<\"Double\"\>"}], "}"}], 
      ",", "\<\"Comprehensions.nb\"\>", ",", 
      RowBox[{"CharacterEncoding", "\[Rule]", "\<\"UTF-8\"\>"}]}], "]"}]}], 
   ",", 
   RowBox[{"\<\"FileModificationTime\"\>", "\[Rule]", "3.655236698`*^9"}], 
   ",", 
   RowBox[{"\<\"WindowTitle\"\>", "\[Rule]", "\<\"Comprehensions.nb\"\>"}], 
   ",", 
   RowBox[{"\<\"MemoryModificationTime\"\>", "\[Rule]", 
    "3.655239564135028`*^9"}], ",", 
   RowBox[{"\<\"ModifiedInMemory\"\>", "\[Rule]", "True"}], ",", 
   RowBox[{"\<\"StorageSystem\"\>", "\[Rule]", "\<\"Local\"\>"}], ",", 
   RowBox[{"\<\"DocumentType\"\>", "\[Rule]", "\<\"Notebook\"\>"}], ",", 
   RowBox[{"\<\"MIMEType\"\>", 
    "\[Rule]", "\<\"application/vnd.wolfram.nb\"\>"}], ",", 
   RowBox[{"\<\"StyleDefinitions\"\>", "\[Rule]", 
    RowBox[{"{", 
     TemplateBox[{"FrontEndObject[LinkObject[\"ekuur_shm\", 3, 1]]","4"},
      "NotebookObjectMissing"], "}"}]}]}], "}"}]], "Output"]
}, Closed]]
}, Closed]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Monad applications", "Subsection"],

Cell[CellGroupData[{

Cell["Application to finite functions and relations", "Subsubsection"],

Cell[TextData[{
 "We can work with finite functions and relations by representing these as \
lists or, more properly, sets.  Now we can view a relation as a function in \
two complementary ways.  If ",
 Cell[BoxData[
  FormBox["r", TraditionalForm]]],
 " is a relation we usually think of ",
 Cell[BoxData[
  FormBox["r", TraditionalForm]]],
 " as a list of pairs, for example "
}], "Text",
 CellChangeTimes->{{3.545996988903651*^9, 3.545996994345373*^9}, {
  3.547184832543467*^9, 3.547184833571507*^9}, {3.547184877175603*^9, 
  3.547184911585235*^9}, {3.54718495964034*^9, 3.547184961407888*^9}, {
  3.547198250219421*^9, 3.5471982534807653`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"r", "=", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"a", ",", "d"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"a", ",", "e"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"b", ",", "d"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"b", ",", "f"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"c", ",", "f"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"b", ",", "d"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"e", ",", "f"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"f", ",", "c"}], "}"}]}], "}"}]}], ";"}]], "Input",
 InitializationGroup->True,
 CellChangeTimes->{{3.5472020004880342`*^9, 3.547202016838191*^9}}],

Cell[TextData[{
 "It is more convenient to use a more suggestive notation (see ",
 ButtonBox["Z",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["http://en.wikipedia.org/wiki/Z_specification_language"], None},
  ButtonNote->"http://en.wikipedia.org/wiki/Z_specification_language"],
 ", for example) using the maplet ",
 Cell[BoxData[
  RowBox[{"a", "\[RightTeeArrow]", "d"}]], "Input"],
 " instead of ",
 Cell[BoxData[
  RowBox[{"{", 
   RowBox[{"a", ",", "d"}], "}"}]], "Input"],
 ":"
}], "Text",
 CellChangeTimes->{{3.54600458384531*^9, 3.546004593755364*^9}, {
  3.5471987725902967`*^9, 3.547198773128394*^9}, {3.547199458031476*^9, 
  3.547199458089672*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"r", "=", 
  RowBox[{"r", "/.", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"x_", ",", "y_"}], "}"}], "\[Rule]", 
    RowBox[{"(", 
     RowBox[{"x", "\[RightTeeArrow]", "y"}], ")"}]}]}]}]], "Input",
 InitializationCell->True],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"a", "\[RightTeeArrow]", "d"}], ",", 
   RowBox[{"a", "\[RightTeeArrow]", "e"}], ",", 
   RowBox[{"b", "\[RightTeeArrow]", "d"}], ",", 
   RowBox[{"b", "\[RightTeeArrow]", "f"}], ",", 
   RowBox[{"c", "\[RightTeeArrow]", "f"}], ",", 
   RowBox[{"b", "\[RightTeeArrow]", "d"}], ",", 
   RowBox[{"e", "\[RightTeeArrow]", "f"}], ",", 
   RowBox[{"f", "\[RightTeeArrow]", "c"}]}], "}"}]], "Output"]
}, Open  ]],

Cell[TextData[{
 "We need to have control over the elements of ",
 Cell[BoxData[
  FormBox["r", TraditionalForm]]],
 " and so we define the domain and codomain of r using set comprehensions:"
}], "Text",
 CellChangeTimes->{{3.545996797737207*^9, 3.545996799647985*^9}, {
  3.5460045733581247`*^9, 3.546004573369988*^9}}],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"dom", "[", "r_", "]"}], ":=", 
  RowBox[{"Block", "[", 
   RowBox[{
    RowBox[{"{", "x", "}"}], ",", 
    RowBox[{"\[LeftBracketingBar]", 
     RowBox[{"x", ",", 
      RowBox[{
       RowBox[{"(", 
        RowBox[{"x_", "\[RightTeeArrow]", "_"}], ")"}], "\[LeftTriangle]", 
       "r"}]}], "\[RightBracketingBar]"}]}], "]"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"ran", "[", "r_", "]"}], ":=", 
  RowBox[{"Block", "[", 
   RowBox[{
    RowBox[{"{", "y", "}"}], ",", 
    RowBox[{"\[LeftBracketingBar]", 
     RowBox[{"y", ",", 
      RowBox[{
       RowBox[{"(", 
        RowBox[{"_", "\[RightTeeArrow]", "y_"}], ")"}], "\[LeftTriangle]", 
       "r"}]}], "\[RightBracketingBar]"}]}], "]"}]}], "\[IndentingNewLine]", 
 RowBox[{"hereAre", "[", 
  RowBox[{
   RowBox[{"dom", "[", "r", "]"}], ",", 
   RowBox[{"ran", "[", "r", "]"}]}], "]"}]}], "Input",
 InitializationGroup->True,
 CellChangeTimes->{{3.545996020130444*^9, 3.545996027204352*^9}, {
   3.545996078155476*^9, 3.545996085728765*^9}, {3.547198316638857*^9, 
   3.547198332098278*^9}, 3.547198364911385*^9, {3.547200921703107*^9, 
   3.5472009242976723`*^9}}],

Cell[BoxData[
 RowBox[{"hereAre", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"a", ",", "b", ",", "c", ",", "e", ",", "f"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"d", ",", "e", ",", "f", ",", "c"}], "}"}]}], "]"}]], "Output"]
}, Open  ]],

Cell[TextData[{
 "Then ",
 Cell[BoxData[
  FormBox["r", TraditionalForm]]],
 " can be turned into a function in one direction by listing all elements \
paired with ",
 Cell[BoxData[
  FormBox["a", TraditionalForm]]],
 ", all paired with ",
 Cell[BoxData[
  FormBox["b", TraditionalForm]]],
 " and all paired with ",
 Cell[BoxData[
  FormBox["c", TraditionalForm]]],
 ":"
}], "Text",
 CellChangeTimes->{{3.545997010133998*^9, 3.545997022650279*^9}}],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"leftFunction", "[", "r_", "]"}], ":=", 
  RowBox[{"Block", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"x", ",", "y"}], "}"}], ",", 
    RowBox[{"\[LeftAngleBracket]", 
     RowBox[{
      RowBox[{"x", "\[RightTeeArrow]", 
       RowBox[{"\[LeftAngleBracket]", 
        RowBox[{"y", ",", 
         RowBox[{
          RowBox[{"(", 
           RowBox[{"x", "\[RightTeeArrow]", "y_"}], ")"}], " ", 
          "\[LeftTriangle]", " ", "r"}]}], "\[RightAngleBracket]"}]}], ",", 
      RowBox[{"x_", " ", "\[LeftTriangle]", " ", 
       RowBox[{"dom", "[", "r", "]"}]}]}], "\[RightAngleBracket]"}]}], 
   "]"}]}], "\[IndentingNewLine]", 
 RowBox[{"leftFunction", "[", "r", "]"}]}], "Input",
 InitializationGroup->True,
 CellChangeTimes->{{3.545996117577985*^9, 3.545996126877926*^9}, 
   3.5472009116326942`*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"a", "\[RightTeeArrow]", 
    RowBox[{"{", 
     RowBox[{"d", ",", "e"}], "}"}]}], ",", 
   RowBox[{"b", "\[RightTeeArrow]", 
    RowBox[{"{", 
     RowBox[{"d", ",", "f", ",", "d"}], "}"}]}], ",", 
   RowBox[{"c", "\[RightTeeArrow]", 
    RowBox[{"{", "f", "}"}]}], ",", 
   RowBox[{"e", "\[RightTeeArrow]", 
    RowBox[{"{", "f", "}"}]}], ",", 
   RowBox[{"f", "\[RightTeeArrow]", 
    RowBox[{"{", "c", "}"}]}]}], "}"}]], "Output"]
}, Open  ]],

Cell[TextData[{
 Cell[BoxData[
  FormBox["r", TraditionalForm]]],
 " can also be turned into a function in the other direction by listing all \
elements paired with ",
 Cell[BoxData[
  FormBox["d", TraditionalForm]]],
 ", all paired with ",
 Cell[BoxData[
  FormBox["e", TraditionalForm]]],
 " and all paired with ",
 Cell[BoxData[
  FormBox["f", TraditionalForm]]],
 ":"
}], "Text",
 CellChangeTimes->{{3.545997029699584*^9, 3.5459970605834312`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"rightFunction", "[", "r_", "]"}], ":=", 
  RowBox[{"Block", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"y", ",", "x"}], "}"}], ",", 
    RowBox[{"\[LeftAngleBracket]", 
     RowBox[{
      RowBox[{"y", "\[RightTeeArrow]", 
       RowBox[{"\[LeftAngleBracket]", 
        RowBox[{"x", ",", 
         RowBox[{
          RowBox[{"(", 
           RowBox[{"x_", "\[RightTeeArrow]", "y"}], ")"}], " ", 
          "\[LeftTriangle]", " ", "r"}]}], "\[RightAngleBracket]"}]}], ",", 
      RowBox[{"y_", " ", "\[LeftTriangle]", " ", 
       RowBox[{"ran", "[", "r", "]"}]}]}], "\[RightAngleBracket]"}]}], 
   "]"}]}], "\[IndentingNewLine]", 
 RowBox[{"rightFunction", "[", "r", "]"}]}], "Input",
 InitializationGroup->True,
 CellChangeTimes->{{3.545996135229999*^9, 3.545996141816947*^9}, 
   3.545996842400826*^9, 3.547200915198956*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"d", "\[RightTeeArrow]", 
    RowBox[{"{", 
     RowBox[{"a", ",", "b", ",", "b"}], "}"}]}], ",", 
   RowBox[{"e", "\[RightTeeArrow]", 
    RowBox[{"{", "a", "}"}]}], ",", 
   RowBox[{"f", "\[RightTeeArrow]", 
    RowBox[{"{", 
     RowBox[{"b", ",", "c", ",", "e"}], "}"}]}], ",", 
   RowBox[{"c", "\[RightTeeArrow]", 
    RowBox[{"{", "f", "}"}]}]}], "}"}]], "Output"]
}, Open  ]],

Cell[TextData[{
 "Only one of these definitions is necessary if we define the converse \
(relational inverse) to ",
 Cell[BoxData[
  FormBox["r", TraditionalForm]]],
 " in a standard way:"
}], "Text",
 CellChangeTimes->{{3.545997068678679*^9, 3.545997068686592*^9}}],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"converse", "[", "r_", "]"}], ":=", 
  RowBox[{"Block", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"y", ",", "x"}], "}"}], ",", 
    RowBox[{"\[LeftAngleBracket]", 
     RowBox[{
      RowBox[{"(", 
       RowBox[{"y", "\[RightTeeArrow]", "x"}], ")"}], ",", 
      RowBox[{
       RowBox[{"(", 
        RowBox[{"x_", "\[RightTeeArrow]", "y_"}], ")"}], " ", 
       "\[LeftTriangle]", " ", "r"}]}], "\[RightAngleBracket]"}]}], 
   "]"}]}], "\[IndentingNewLine]", 
 RowBox[{"hereAre", "[", 
  RowBox[{"r", ",", 
   RowBox[{"converse", "[", "r", "]"}]}], "]"}]}], "Input",
 InitializationGroup->True,
 CellChangeTimes->{{3.545996441052804*^9, 3.545996451951235*^9}, 
   3.547200918423114*^9}],

Cell[BoxData[
 RowBox[{"hereAre", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"a", "\[RightTeeArrow]", "d"}], ",", 
     RowBox[{"a", "\[RightTeeArrow]", "e"}], ",", 
     RowBox[{"b", "\[RightTeeArrow]", "d"}], ",", 
     RowBox[{"b", "\[RightTeeArrow]", "f"}], ",", 
     RowBox[{"c", "\[RightTeeArrow]", "f"}], ",", 
     RowBox[{"b", "\[RightTeeArrow]", "d"}], ",", 
     RowBox[{"e", "\[RightTeeArrow]", "f"}], ",", 
     RowBox[{"f", "\[RightTeeArrow]", "c"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"d", "\[RightTeeArrow]", "a"}], ",", 
     RowBox[{"e", "\[RightTeeArrow]", "a"}], ",", 
     RowBox[{"d", "\[RightTeeArrow]", "b"}], ",", 
     RowBox[{"f", "\[RightTeeArrow]", "b"}], ",", 
     RowBox[{"f", "\[RightTeeArrow]", "c"}], ",", 
     RowBox[{"d", "\[RightTeeArrow]", "b"}], ",", 
     RowBox[{"f", "\[RightTeeArrow]", "e"}], ",", 
     RowBox[{"c", "\[RightTeeArrow]", "f"}]}], "}"}]}], "]"}]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"rightFunction", "[", "r", "]"}], "\[Equal]", 
  RowBox[{"leftFunction", "[", 
   RowBox[{"converse", "[", "r", "]"}], "]"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"rightFunction", "[", 
   RowBox[{"converse", "[", "r", "]"}], "]"}], "\[Equal]", 
  RowBox[{"leftFunction", "[", "r", "]"}]}]}], "Input"],

Cell[BoxData["True"], "Output"],

Cell[BoxData["True"], "Output"]
}, Open  ]],

Cell[TextData[{
 "To turn a function into a relation given a (finite!) subset ",
 StyleBox["d",
  FontSlant->"Italic"],
 " of its domain, all that is needed is to create a maplet for each element \
of ",
 StyleBox["d",
  FontSlant->"Italic"],
 ":"
}], "Text",
 CellChangeTimes->{{3.5471986443156023`*^9, 3.547198810414958*^9}}],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"makeRel", "[", 
   RowBox[{"f_", ",", "d_"}], "]"}], ":=", 
  RowBox[{"Block", "[", 
   RowBox[{
    RowBox[{"{", "a", "}"}], ",", 
    RowBox[{"\[LeftBracketingBar]", 
     RowBox[{
      RowBox[{"a", "\[RightTeeArrow]", 
       RowBox[{"f", "[", "a", "]"}]}], ",", 
      RowBox[{"a_", "\[LeftTriangle]", "d"}]}], "\[RightBracketingBar]"}]}], 
   "]"}]}], "\[IndentingNewLine]", 
 RowBox[{"squares", "=", 
  RowBox[{"makeRel", "[", 
   RowBox[{
    RowBox[{
     SuperscriptBox["#", "2"], "&"}], ",", 
    RowBox[{"Range", "[", 
     RowBox[{"3", ",", "7"}], "]"}]}], "]"}]}], "\[IndentingNewLine]", 
 RowBox[{"add3", "=", 
  RowBox[{"makeRel", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"#", "+", "3"}], "&"}], ",", 
    RowBox[{"Range", "[", 
     RowBox[{"4", ",", "40"}], "]"}]}], "]"}]}]}], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.547198625706381*^9, 3.5471986356432533`*^9}, {
   3.547198824828211*^9, 3.547198884904974*^9}, {3.547198917760399*^9, 
   3.547198945241597*^9}, 3.547199005388955*^9, {3.5471990562910767`*^9, 
   3.547199098143162*^9}, {3.547199267643484*^9, 3.547199267767744*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"3", "\[RightTeeArrow]", "9"}], ",", 
   RowBox[{"4", "\[RightTeeArrow]", "16"}], ",", 
   RowBox[{"5", "\[RightTeeArrow]", "25"}], ",", 
   RowBox[{"6", "\[RightTeeArrow]", "36"}], ",", 
   RowBox[{"7", "\[RightTeeArrow]", "49"}]}], "}"}]], "Output"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"4", "\[RightTeeArrow]", "7"}], ",", 
   RowBox[{"5", "\[RightTeeArrow]", "8"}], ",", 
   RowBox[{"6", "\[RightTeeArrow]", "9"}], ",", 
   RowBox[{"7", "\[RightTeeArrow]", "10"}], ",", 
   RowBox[{"8", "\[RightTeeArrow]", "11"}], ",", 
   RowBox[{"9", "\[RightTeeArrow]", "12"}], ",", 
   RowBox[{"10", "\[RightTeeArrow]", "13"}], ",", 
   RowBox[{"11", "\[RightTeeArrow]", "14"}], ",", 
   RowBox[{"12", "\[RightTeeArrow]", "15"}], ",", 
   RowBox[{"13", "\[RightTeeArrow]", "16"}], ",", 
   RowBox[{"14", "\[RightTeeArrow]", "17"}], ",", 
   RowBox[{"15", "\[RightTeeArrow]", "18"}], ",", 
   RowBox[{"16", "\[RightTeeArrow]", "19"}], ",", 
   RowBox[{"17", "\[RightTeeArrow]", "20"}], ",", 
   RowBox[{"18", "\[RightTeeArrow]", "21"}], ",", 
   RowBox[{"19", "\[RightTeeArrow]", "22"}], ",", 
   RowBox[{"20", "\[RightTeeArrow]", "23"}], ",", 
   RowBox[{"21", "\[RightTeeArrow]", "24"}], ",", 
   RowBox[{"22", "\[RightTeeArrow]", "25"}], ",", 
   RowBox[{"23", "\[RightTeeArrow]", "26"}], ",", 
   RowBox[{"24", "\[RightTeeArrow]", "27"}], ",", 
   RowBox[{"25", "\[RightTeeArrow]", "28"}], ",", 
   RowBox[{"26", "\[RightTeeArrow]", "29"}], ",", 
   RowBox[{"27", "\[RightTeeArrow]", "30"}], ",", 
   RowBox[{"28", "\[RightTeeArrow]", "31"}], ",", 
   RowBox[{"29", "\[RightTeeArrow]", "32"}], ",", 
   RowBox[{"30", "\[RightTeeArrow]", "33"}], ",", 
   RowBox[{"31", "\[RightTeeArrow]", "34"}], ",", 
   RowBox[{"32", "\[RightTeeArrow]", "35"}], ",", 
   RowBox[{"33", "\[RightTeeArrow]", "36"}], ",", 
   RowBox[{"34", "\[RightTeeArrow]", "37"}], ",", 
   RowBox[{"35", "\[RightTeeArrow]", "38"}], ",", 
   RowBox[{"36", "\[RightTeeArrow]", "39"}], ",", 
   RowBox[{"37", "\[RightTeeArrow]", "40"}], ",", 
   RowBox[{"38", "\[RightTeeArrow]", "41"}], ",", 
   RowBox[{"39", "\[RightTeeArrow]", "42"}], ",", 
   RowBox[{"40", "\[RightTeeArrow]", "43"}]}], "}"}]], "Output"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["Direct (Cartesian) product of relations", "Subsubsection",
 CellChangeTimes->{{3.547206619209326*^9, 3.547206624530888*^9}, {
  3.5472070831828117`*^9, 3.5472070895028973`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"prod", "[", 
   RowBox[{"r_", ",", "s_"}], "]"}], ":=", 
  RowBox[{"Block", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"ra", ",", "rb", ",", "sa", ",", "sb"}], "}"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{"\[LeftBracketingBar]", 
     RowBox[{
      RowBox[{
       RowBox[{"{", 
        RowBox[{"ra", ",", "sa"}], "}"}], "\[RightTeeArrow]", 
       RowBox[{"{", 
        RowBox[{"rb", ",", "sb"}], "}"}]}], ",", 
      RowBox[{
       RowBox[{"(", 
        RowBox[{"ra_", "\[RightTeeArrow]", "rb_"}], ")"}], "\[LeftTriangle]", 
       "r"}], ",", 
      RowBox[{
       RowBox[{"(", 
        RowBox[{"sa_", "\[RightTeeArrow]", "sb_"}], ")"}], "\[LeftTriangle]", 
       "s"}]}], "\[RightBracketingBar]"}]}], "]"}]}], "\[IndentingNewLine]", 
 RowBox[{"prod", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"a", "\[RightTeeArrow]", "d"}], ",", 
     RowBox[{"b", "\[RightTeeArrow]", "d"}]}], "}"}], ",", "squares"}], 
  "]"}]}], "Input",
 InitializationCell->True],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{
    RowBox[{"{", 
     RowBox[{"a", ",", "3"}], "}"}], "\[RightTeeArrow]", 
    RowBox[{"{", 
     RowBox[{"d", ",", "9"}], "}"}]}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"a", ",", "4"}], "}"}], "\[RightTeeArrow]", 
    RowBox[{"{", 
     RowBox[{"d", ",", "16"}], "}"}]}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"a", ",", "5"}], "}"}], "\[RightTeeArrow]", 
    RowBox[{"{", 
     RowBox[{"d", ",", "25"}], "}"}]}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"a", ",", "6"}], "}"}], "\[RightTeeArrow]", 
    RowBox[{"{", 
     RowBox[{"d", ",", "36"}], "}"}]}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"a", ",", "7"}], "}"}], "\[RightTeeArrow]", 
    RowBox[{"{", 
     RowBox[{"d", ",", "49"}], "}"}]}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"b", ",", "3"}], "}"}], "\[RightTeeArrow]", 
    RowBox[{"{", 
     RowBox[{"d", ",", "9"}], "}"}]}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"b", ",", "4"}], "}"}], "\[RightTeeArrow]", 
    RowBox[{"{", 
     RowBox[{"d", ",", "16"}], "}"}]}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"b", ",", "5"}], "}"}], "\[RightTeeArrow]", 
    RowBox[{"{", 
     RowBox[{"d", ",", "25"}], "}"}]}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"b", ",", "6"}], "}"}], "\[RightTeeArrow]", 
    RowBox[{"{", 
     RowBox[{"d", ",", "36"}], "}"}]}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"b", ",", "7"}], "}"}], "\[RightTeeArrow]", 
    RowBox[{"{", 
     RowBox[{"d", ",", "49"}], "}"}]}]}], "}"}]], "Output"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["Observations on leftFunction and rightFunction", "Subsubsection",
 CellChangeTimes->{{3.5459971538226233`*^9, 3.5459971790444937`*^9}, {
  3.5471086474586697`*^9, 3.547108657231258*^9}}],

Cell[TextData[{
 "The left and right function converters have pseudo inverses which act as an \
inverse on anything of the form ",
 StyleBox["leftFunction[r]", "Input"],
 " or ",
 StyleBox["rightFunction[r]", "Input"],
 " respectively.  The function converters preserve information about the \
order in which the domain and range elements ",
 StyleBox["first",
  FontSlant->"Italic"],
 " appear but inevitably group the remainder together."
}], "Text"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"leftFunctionInv", "[", "f_", "]"}], ":=", 
   RowBox[{"Block", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"x", ",", "y"}], "}"}], ",", 
     RowBox[{"\[LeftAngleBracket]", 
      RowBox[{
       RowBox[{"x", "\[RightTeeArrow]", "y"}], ",", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{"x_", "\[RightTeeArrow]", "l_"}], ")"}], " ", 
        "\[LeftTriangle]", " ", "f"}], ",", 
       RowBox[{"y_", "\[LeftTriangle]", "l"}]}], "\[RightAngleBracket]"}]}], 
    "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"rightFunctionInv", "[", "f_", "]"}], ":=", 
   RowBox[{"Block", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"y", ",", "x"}], "}"}], ",", 
     RowBox[{"\[LeftAngleBracket]", 
      RowBox[{
       RowBox[{"y", "\[RightTeeArrow]", "x"}], ",", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{"x_", "\[RightTeeArrow]", "l_"}], ")"}], " ", 
        "\[LeftTriangle]", " ", "f"}], ",", 
       RowBox[{"y_", "\[LeftTriangle]", "l"}]}], "\[RightAngleBracket]"}]}], 
    "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"r", "\[Equal]", 
  RowBox[{"leftFunctionInv", "[", 
   RowBox[{"leftFunction", "[", "r", "]"}], "]"}]}], "\[IndentingNewLine]", 
 RowBox[{"r", "\[Equal]", 
  RowBox[{"rightFunctionInv", "[", 
   RowBox[{"rightFunction", "[", "r", "]"}], "]"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"rightFunctionInv", "[", 
   RowBox[{"rightFunction", "[", "r", "]"}], "]"}], "\[Equal]", 
  RowBox[{"rightFunctionInv", "[", 
   RowBox[{"rightFunction", "[", 
    RowBox[{"rightFunctionInv", "[", 
     RowBox[{"rightFunction", "[", "r", "]"}], "]"}], "]"}], 
   "]"}]}]}], "Input",
 CellChangeTimes->{{3.545996528960141*^9, 3.545996545861607*^9}, 
   3.5459969422387123`*^9}],

Cell[BoxData[
 RowBox[{
  RowBox[{"{", 
   RowBox[{
    RowBox[{"a", "\[RightTeeArrow]", "d"}], ",", 
    RowBox[{"a", "\[RightTeeArrow]", "e"}], ",", 
    RowBox[{"b", "\[RightTeeArrow]", "d"}], ",", 
    RowBox[{"b", "\[RightTeeArrow]", "f"}], ",", 
    RowBox[{"c", "\[RightTeeArrow]", "f"}], ",", 
    RowBox[{"b", "\[RightTeeArrow]", "d"}], ",", 
    RowBox[{"e", "\[RightTeeArrow]", "f"}], ",", 
    RowBox[{"f", "\[RightTeeArrow]", "c"}]}], "}"}], "\[Equal]", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"a", "\[RightTeeArrow]", "d"}], ",", 
    RowBox[{"a", "\[RightTeeArrow]", "e"}], ",", 
    RowBox[{"b", "\[RightTeeArrow]", "d"}], ",", 
    RowBox[{"b", "\[RightTeeArrow]", "f"}], ",", 
    RowBox[{"b", "\[RightTeeArrow]", "d"}], ",", 
    RowBox[{"c", "\[RightTeeArrow]", "f"}], ",", 
    RowBox[{"e", "\[RightTeeArrow]", "f"}], ",", 
    RowBox[{"f", "\[RightTeeArrow]", "c"}]}], "}"}]}]], "Output",
 CellChangeTimes->{3.5459965545388193`*^9, 3.546006424822442*^9, 
  3.5472037519302197`*^9}],

Cell[BoxData[
 RowBox[{
  RowBox[{"{", 
   RowBox[{
    RowBox[{"a", "\[RightTeeArrow]", "d"}], ",", 
    RowBox[{"a", "\[RightTeeArrow]", "e"}], ",", 
    RowBox[{"b", "\[RightTeeArrow]", "d"}], ",", 
    RowBox[{"b", "\[RightTeeArrow]", "f"}], ",", 
    RowBox[{"c", "\[RightTeeArrow]", "f"}], ",", 
    RowBox[{"b", "\[RightTeeArrow]", "d"}], ",", 
    RowBox[{"e", "\[RightTeeArrow]", "f"}], ",", 
    RowBox[{"f", "\[RightTeeArrow]", "c"}]}], "}"}], "\[Equal]", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"a", "\[RightTeeArrow]", "d"}], ",", 
    RowBox[{"b", "\[RightTeeArrow]", "d"}], ",", 
    RowBox[{"b", "\[RightTeeArrow]", "d"}], ",", 
    RowBox[{"a", "\[RightTeeArrow]", "e"}], ",", 
    RowBox[{"b", "\[RightTeeArrow]", "f"}], ",", 
    RowBox[{"c", "\[RightTeeArrow]", "f"}], ",", 
    RowBox[{"e", "\[RightTeeArrow]", "f"}], ",", 
    RowBox[{"f", "\[RightTeeArrow]", "c"}]}], "}"}]}]], "Output",
 CellChangeTimes->{3.5459965545388193`*^9, 3.546006424822442*^9, 
  3.547203751934678*^9}],

Cell[BoxData["True"], "Output",
 CellChangeTimes->{3.5459965545388193`*^9, 3.546006424822442*^9, 
  3.547203751937695*^9}]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["Further tests of monad comprehensions", "Subsubsection"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"\[LeftBracketingBar]", 
  RowBox[{"x", ",", 
   RowBox[{"x_", "\[LeftTriangle]", 
    RowBox[{"{", 
     RowBox[{"1", ",", "2", ",", "3", ",", "2", ",", "5"}], "}"}]}], ",", 
   RowBox[{"x", ">", "1"}]}], "\[RightBracketingBar]"}]], "Input",
 CellChangeTimes->{{3.475233649208026*^9, 3.47523365989262*^9}, {
  3.475233691172131*^9, 3.4752336919636097`*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"2", ",", "3", ",", "5"}], "}"}]], "Output",
 CellChangeTimes->{3.475233661216033*^9, 3.475233693687128*^9, 
  3.5211843087332087`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"\[LeftAngleBracket]", 
  RowBox[{"x", ",", 
   RowBox[{"x_", " ", "\[LeftTriangle]", " ", 
    RowBox[{"{", 
     RowBox[{"1", ",", "2", ",", "3", ",", "2", ",", "5"}], "}"}]}], ",", 
   RowBox[{"x", ">", "1"}]}], "\[RightAngleBracket]"}]], "Input",
 CellChangeTimes->{{3.475233674391137*^9, 3.4752336868918667`*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"2", ",", "3", ",", "2", ",", "5"}], "}"}]], "Output",
 CellChangeTimes->{3.475233696282754*^9, 3.521184312102778*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"\[LeftAngleBracket]", 
  RowBox[{
   RowBox[{
    RowBox[{"2", " ", "l"}], "+", "1"}], ",", 
   RowBox[{"l_", " ", "\[LeftTriangle]", " ", 
    RowBox[{"{", 
     RowBox[{
     "1", ",", "3", ",", "4", ",", "5", ",", "9", ",", "11", ",", "23", ",", 
      "29", ",", "36"}], "}"}]}], ",", 
   RowBox[{"l", "\[NotEqual]", "5"}], ",", 
   RowBox[{"Not", "[", 
    RowBox[{"EvenQ", "[", "l", "]"}], "]"}]}], 
  "\[RightAngleBracket]"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"3", ",", "7", ",", "19", ",", "23", ",", "47", ",", "59"}], 
  "}"}]], "Output"]
}, Open  ]]
}, Closed]]
}, Closed]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Design considerations for double-entry accounting", "Section"],

Cell[CellGroupData[{

Cell["Design of data", "Subsection"],

Cell["\<\
The easiest structure to hold data for an account is a table.  We won\
\[CloseCurlyQuote]t try to create normal form databases at this stage as that\
\[CloseCurlyQuote]s too much work.  A set of accounts is a set of association \
tables, plus assorted information e.g. the account trees, info about the \
entity which is being subjected to accounting, names of types of accounts \
e.g. Bank, Asset, Liability, Personal or Loan &c.  Each row in a table \
represents a transaction.  Each transaction must have a number (for searching \
and transforming data), a date, a description, a Debiting account and a \
Crediting account, at least.  Final column would be the account balance. \
Transaction splits (one-many) must be allowed for and these splits must be \
editable.  That\[CloseCurlyQuote]s the tricky thing.  Clever design means \
that summary accounts can be produced that aggregate values from sub-accounts \
according to the account tree.  We would need to consider whether a non-leaf \
account can have its own entries or whether it is a placeholder account only. \
 Then the list of transactions for such an account would either have just all \
leaves included or all sub-trees.  So we would need an operation to collect \
all transaction numbers appearing in such account trees, a classic \
descending/ascending computation.  Ascending computations might compute total \
balances, for example, while descending ones found the relevant data to \
include in the ascending computation.\
\>", "Text"],

Cell[TextData[{
 "Using association tables makes some things simple: see e.g. ",
 StyleBox["autoNumber", "Input"],
 " below.  Note the passing in of a dynamic object so we can implement a \
procedure using call by reference (call by value is the ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " default).  What is a split though?  Not as easy as it first appears.  \
Editing dates and descriptions for a transaction can be done via the code ",
 StyleBox["makeRow", "Input"],
 " below.  On the other hand, moving a transaction from one account to \
another or creating a transaction split may need something more \
sophisticated, perhaps even a separate tab or window."
}], "Text"],

Cell["\<\
The use of monad comprehensions is not essential and may not be desirable in \
the end but MF has found it useful to construct code in a highly declarative \
way.\
\>", "Text"],

Cell["\<\
As a first pass, pay no attention to prettiness, even to the level of letting \
the order of columns in a transaction come out the \[OpenCurlyDoubleQuote]way \
it wants to\[CloseCurlyDoubleQuote].\
\>", "Text"],

Cell[TextData[{
 "Main motivation for this (apart from an interest in understanding new ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " features and wanting to develop something substantial and of use to the \
community [and for my portfolio!]) is to extend functionality so that cash \
flow forecasts can be made.  In gnucash, only budgets can be created and \
these are crude objects.  Setting up repeating transactions and future \
transactions and allowing the accounts to extend (provisionally of course) \
into the future is not very difficult once the main system is designed.  A \
principle should be that no past data can be edited during the building of a \
cash flow forecast.  Branching should be allowed (i.e having some payments \
scheduled in advance, some conditional on other state variables, then set up \
branches on possible future events); perhaps also backtracking along branches."
}], "Text"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Code for double-entry accounting", "Section"],

Cell[CellGroupData[{

Cell["Account trees and destination table", "Subsection"],

Cell[TextData[{
 "An account tree specifies a set of nested accounts with names.  ",
 StyleBox["tr", "Input"],
 " indicates a tree which has a label (or name) and a set of subtrees. ",
 StyleBox["rt", "Input"],
 " indicates a simple root or leaf which has only a name. The breadcrumb for \
a subtree is the list of names of parent trees. Eventually there may be more \
information associated with accounts than a name and a breadcrumb."
}], "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"accountTrees", "[", "\"\<business\>\"", "]"}], "=", 
   "\[IndentingNewLine]", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"tr", "[", 
      RowBox[{"\"\<Bank Accounts:\>\"", ",", 
       RowBox[{"{", 
        RowBox[{"rt", "@", "\"\<Business Account\>\""}], "}"}]}], "]"}], ",", 
     
     RowBox[{"tr", "[", 
      RowBox[{"\"\<Assets:\>\"", ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"tr", "[", 
          RowBox[{"\"\<Capital Equipment:\>\"", ",", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"rt", "@", "\"\<Computer Equipment\>\""}], ",", 
             RowBox[{"rt", "@", "\"\<Machinery\>\""}]}], "}"}]}], "]"}], ",", 
         
         RowBox[{"rt", "@", "\"\<Accounts Receivable\>\""}], ",", 
         RowBox[{"rt", "@", "\"\<Buildings\>\""}], ",", 
         RowBox[{"rt", "@", "\"\<Cash in Hand\>\""}], ",", 
         RowBox[{"rt", "@", "\"\<Land\>\""}], ",", 
         RowBox[{"rt", "@", "\"\<Plantations\>\""}]}], "}"}]}], "]"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"tr", "[", 
      RowBox[{"\"\<Liabilities:\>\"", ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"rt", "@", "\"\<Credit Card\>\""}], ",", 
         RowBox[{"rt", "@", "\"\<Accounts Payable\>\""}]}], "}"}]}], "]"}], 
     ",", "\[IndentingNewLine]", 
     RowBox[{"tr", "[", 
      RowBox[{"\"\<Equity:\>\"", ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"tr", "[", 
          RowBox[{"\"\<Partners Loan:\>\"", ",", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"rt", "@", "\"\<Matthew loan\>\""}], ",", 
             RowBox[{"rt", "@", "\"\<Beth loan\>\""}], ",", 
             RowBox[{"rt", "@", "\"\<Connor loan\>\""}], ",", 
             RowBox[{"rt", "@", "\"\<Mack loan\>\""}], ",", 
             RowBox[{"rt", "@", "\"\<Agatha loan\>\""}]}], "}"}]}], "]"}], 
         ",", "\[IndentingNewLine]", 
         RowBox[{"tr", "[", 
          RowBox[{"\"\<Capital:\>\"", ",", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"rt", "@", "\"\<Matthew capital\>\""}], ",", 
             RowBox[{"rt", "@", "\"\<Beth capital\>\""}], ",", 
             RowBox[{"rt", "@", "\"\<Connor capital\>\""}], ",", 
             RowBox[{"rt", "@", "\"\<Mack capital\>\""}], ",", 
             RowBox[{"rt", "@", "\"\<Agata capital\>\""}]}], "}"}]}], "]"}], 
         ",", 
         RowBox[{"rt", "@", "\"\<Opening Balances\>\""}]}], "}"}]}], "]"}], 
     ",", "\[IndentingNewLine]", 
     RowBox[{"tr", "[", 
      RowBox[{"\"\<Income:\>\"", ",", "\[IndentingNewLine]", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"rt", "[", "\"\<Interest\>\"", "]"}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{"tr", "[", 
          RowBox[{"\"\<Sales:\>\"", ",", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"tr", "[", 
              RowBox[{"\"\<Food:\>\"", ",", 
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"rt", "@", "\"\<Eggs and meat\>\""}], ",", 
                 RowBox[{"rt", "@", "\"\<Fruit and veg\>\""}]}], "}"}]}], 
              "]"}], ",", 
             RowBox[{"rt", "@", "\"\<Services\>\""}], ",", 
             RowBox[{"rt", "@", "\"\<Grazing\>\""}]}], "}"}]}], "]"}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{"rt", "@", "\"\<Other Income\>\""}]}], "}"}]}], "]"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"tr", "[", 
      RowBox[{"\"\<Expenses in VAT:\>\"", ",", "\[IndentingNewLine]", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"rt", "@", "\"\<Bank Service Charge\>\""}], ",", 
         RowBox[{"rt", "@", "\"\<Dues and Subscriptions\>\""}], ",", 
         RowBox[{"rt", "@", "\"\<Miscellaneous\>\""}], ",", 
         RowBox[{"rt", "@", "\"\<Office Supplies\>\""}], ",", 
         RowBox[{"rt", "@", "\"\<Production\>\""}], ",", 
         RowBox[{"rt", "@", "\"\<Postage and Delivery\>\""}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{"tr", "[", 
          RowBox[{"\"\<Professional Fees:\>\"", ",", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"rt", "@", "\"\<Accounting\>\""}], ",", 
             RowBox[{"rt", "@", "\"\<Legal Fees\>\""}]}], "}"}]}], "]"}], ",",
          "\[IndentingNewLine]", 
         RowBox[{"tr", "[", 
          RowBox[{"\"\<Services:\>\"", ",", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"rt", "@", "\"\<Phone\>\""}], ",", 
             RowBox[{"rt", "@", "\"\<Internet\>\""}]}], "}"}]}], "]"}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{"rt", "@", "\"\<Rent\>\""}], ",", 
         RowBox[{"rt", "@", "\"\<Books\>\""}], ",", 
         RowBox[{"rt", "@", "\"\<Software\>\""}], ",", 
         RowBox[{"rt", "@", "\"\<Travel\>\""}], ",", 
         RowBox[{"rt", "@", "\"\<Marketing\>\""}], ",", 
         RowBox[{"rt", "@", "\"\<Fuel\>\""}], ",", 
         RowBox[{"rt", "@", "\"\<Equipment\>\""}], ",", 
         RowBox[{"rt", "@", "\"\<Materials\>\""}], ",", 
         RowBox[{"rt", "@", "\"\<Plants and Trees\>\""}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{"tr", "[", 
          RowBox[{"\"\<Auto:\>\"", ",", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"rt", "@", "\"\<Auto Tax\>\""}], ",", 
             RowBox[{"rt", "@", "\"\<Auto Fuel\>\""}], ",", 
             RowBox[{"rt", "@", "\"\<Auto Maintenance\>\""}]}], "}"}]}], 
          "]"}], ",", "\[IndentingNewLine]", 
         RowBox[{"rt", "@", "\"\<Contractors\>\""}]}], "}"}]}], "]"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"rt", "@", "\"\<Unspecified\>\""}], " ", 
     RowBox[{"(*", " ", 
      RowBox[{"should", " ", 
       StyleBox["not",
        FontSlant->"Italic"], " ", "be", " ", "used", " ", "as", " ", "a", 
       " ", "destination", " ", 
       RowBox[{"a", "/", "c"}]}], " ", "*)"}], ",", "\[IndentingNewLine]", 
     RowBox[{"tr", "[", 
      RowBox[{"\"\<Expenses outside VAT:\>\"", ",", 
       RowBox[{"{", 
        RowBox[{"tr", "[", 
         RowBox[{"\"\<Insurance:\>\"", ",", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"rt", "@", "\"\<Liability Insurance\>\""}], ",", 
            RowBox[{"rt", "@", "\"\<Auto Insurance\>\""}]}], "}"}]}], "]"}], 
        "}"}]}], "]"}], ",", "\[IndentingNewLine]", 
     RowBox[{"tr", "[", 
      RowBox[{"\"\<Emoluments:\>\"", ",", "\[IndentingNewLine]", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"tr", "[", 
          RowBox[{"\"\<Partners Remuneration:\>\"", ",", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"rt", "[", "\"\<Matthew Fairtlough\>\"", "]"}], ",", 
             RowBox[{"rt", "[", "\"\<Beth Champion\>\"", "]"}], ",", 
             RowBox[{"rt", "[", "\"\<Mack Balance\>\"", "]"}], ",", 
             RowBox[{"rt", "[", "\"\<Agatha Balance\>\"", "]"}]}], "}"}]}], 
          "]"}], ",", "\[IndentingNewLine]", 
         RowBox[{"tr", "[", 
          RowBox[{"\"\<Employees:\>\"", ",", 
           RowBox[{"{", 
            RowBox[{"rt", "@", "\"\<Gross Salaries\>\""}], "}"}]}], "]"}]}], 
        "}"}]}], "]"}], ",", "\[IndentingNewLine]", 
     RowBox[{"tr", "[", 
      RowBox[{"\"\<VAT:\>\"", ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"tr", "[", 
          RowBox[{"\"\<Output:\>\"", ",", 
           RowBox[{"{", 
            RowBox[{"rt", "@", "\"\<Sales\>\""}], "}"}]}], "]"}], ",", 
         RowBox[{"rt", "@", "\"\<Input\>\""}]}], "}"}]}], "]"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"tr", "[", 
      RowBox[{"\"\<Taxes:\>\"", ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"rt", "@", "\"\<Income Tax\>\""}], ",", 
         RowBox[{"rt", "@", "\"\<Corporation Tax\>\""}], ",", 
         RowBox[{"rt", "@", "\"\<Other Tax\>\""}]}], "}"}]}], "]"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"rt", "@", "\"\<Junk\>\""}]}], "\[IndentingNewLine]", "}"}]}], 
  ";"}]], "Input",
 InitializationCell->True],

Cell[CellGroupData[{

Cell["Showing and saving maps for a set of accounts", "Subsubsection"],

Cell[TextData[{
 "Below is an example of a map.  The idea is that certain patterns in the \
description field determine which accounts the transaction involves.  This \
information is later used to create a ",
 StyleBox[".qif", "Input"],
 " file with the correct account information. It may be possible to determine \
splits automatically as well for ",
 StyleBox[".qif", "Input"],
 " export but this is not done here."
}], "Text"],

Cell[BoxData[{
 RowBox[{"Clear", "[", "globMap", "]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"globMap", "[", "\"\<business\>\"", "]"}], "=", 
   "\[IndentingNewLine]", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"\"\<Assets:Cash in Hand\>\"", "\[Rule]", 
      RowBox[{"{", "\"\<ATM Debit\>\"", "}"}]}], ",", 
     RowBox[{"\"\<Equity:Partners Loan\>\"", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{"\"\<TFR xxxxzzz\>\"", ",", "\"\<TFR xxxxyyy\>\""}], "}"}]}], 
     ",", 
     RowBox[{"\"\<Expenses in VAT:Dues and Subscriptions\>\"", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{"\"\<COMPANIES HSE\>\"", ",", "\"\<FWAG\>\""}], "}"}]}], ",", 
     RowBox[{"\"\<Expenses in VAT:Equipment\>\"", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{
       "\"\<ENDSLEIGH GAR\>\"", ",", "\"\<HARRIS & SON\>\"", ",", 
        "\"\<MACHINE MART\>\"", ",", "\"\<MAPLIN EXETER\>\"", ",", 
        "\"\<MOLE AVON\>\"", ",", "\"\<MP HARDWARE\>\""}], "}"}]}], ",", 
     RowBox[{"\"\<Expenses in VAT:Fuel\>\"", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{"\"\<TEXSHINNERSBR\>\"", ",", "\"\<W M MORRISON\>\""}], 
       "}"}]}], ",", 
     RowBox[{"\"\<Expenses in VAT:Materials\>\"", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{
       "\"\<B & Q\>\"", ",", "\"\<CORNWALL FARM\>\"", ",", 
        "\"\<CREATIVE CRAF\>\"", ",", "\"\<FERMOYS\>\"", ",", 
        "\"\<FIRST TUNNELS\>\"", ",", "\"\<INTER-LINE\>\"", ",", 
        "\"\<PIPE STOCK\>\"", ",", "\"\<RAINWATERPROD\>\"", ",", 
        "\"\<SOUTHERN TIMB\>\"", ",", "\"\<TRAGO NEWTON\>\"", ",", 
        "\"\<UNITED ROOFIN\>\"", ",", "\"\<WP-ALLPLAS\>\"", ",", 
        "\"\<WWW.KIOWA\>\""}], "}"}]}], ",", 
     RowBox[{"\"\<Expenses in VAT:Plants and Trees\>\"", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{
       "\"\<MOLES SEEDS\>\"", ",", "\"\<ORGANICCATALO\>\"", ",", 
        "\"\<TAMAR ORGANIC\>\"", ",", "\"\<THE REAL SEED\>\"", ",", 
        "\"\<WOODLAND TRUST\>\"", ",", "\"\<WWW.SOWSEEDS\>\"", ",", 
        "\"\<WWW.SUTTONS-S\>\""}], "}"}]}], ",", 
     RowBox[{"\"\<Expenses in VAT:Production\>\"", "\[Rule]", 
      RowBox[{"{", "\"\<CORNWALL FARM\>\"", "}"}]}], ",", 
     RowBox[{"\"\<Expenses in VAT:Software\>\"", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{
       "\"\<WEB HOSTING\>\"", ",", "\"\<WWW.ANDIC\>\"", ",", 
        "\"\<WWW.ANDICA\>\"", ",", "\"\<WWW.TAXSH\>\"", ",", 
        "\"\<WWW.TAXSHIELD\>\""}], "}"}]}], ",", 
     RowBox[{"\"\<Income:Interest\>\"", "\[Rule]", 
      RowBox[{"{", "\"\<Bank Credit Interest\>\"", "}"}]}], ",", 
     RowBox[{"\"\<Income:Other Income\>\"", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{"\"\<ANNUAL BONUS\>\"", ",", "\"\<National Giro Credit\>\""}], 
       "}"}]}], ",", 
     RowBox[{"\"\<Income:Sales:Food:Fruit and veg\>\"", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{
       "\"\<DETOX RETREATS LTD\>\"", ",", 
        "\"\<Faster Payment SOMEONE F & C\>\"", ",", 
        "\"\<Faster Payment B Person\>\"", ",", 
        "\"\<Faster Payment THRIVE CAFE RETAIL\>\"", ",", 
        "\"\<National Giro Credit\>\""}], "}"}]}], ",", 
     RowBox[{"\"\<VAT:Input\>\"", "\[Rule]", 
      RowBox[{"{", "\"\<HMRC VAT REPAY\>\"", "}"}]}]}], "}"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"globMap", "[", "_", "]"}], "=", 
   RowBox[{"{", "}"}]}], ";"}]}], "Input",
 InitializationCell->True],

Cell[BoxData[{
 RowBox[{"Clear", "[", "flat1", "]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"flat1", "[", "ls_List", "]"}], ":=", 
  RowBox[{"Flatten", "[", 
   RowBox[{"ls", ",", "1"}], "]"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"flat1", "[", "ob_", "]"}], ":=", "ob"}]}], "Input",
 InitializationCell->True],

Cell[BoxData[
 RowBox[{
  RowBox[{"expandMap", "[", "map_", "]"}], ":=", 
  RowBox[{"Block", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"x", ",", "y", ",", "z"}], "}"}], ",", 
    RowBox[{"\[LeftBracketingBar]", 
     RowBox[{
      RowBox[{"z", "\[Rule]", "x"}], ",", 
      RowBox[{
       RowBox[{"(", 
        RowBox[{"x_", "\[Rule]", "y_"}], ")"}], "\[LeftTriangle]", "map"}], 
      ",", 
      RowBox[{"z_", "\[LeftTriangle]", "y"}]}], "\[RightBracketingBar]"}]}], 
   "]"}]}]], "Input",
 InitializationGroup->True,
 CellChangeTimes->{{3.547323486932034*^9, 3.547323642912445*^9}, {
   3.547364454368484*^9, 3.547364455817918*^9}, 3.566704871048023*^9}],

Cell[BoxData[{
 RowBox[{"Clear", "[", 
  RowBox[{"treeToTabs", ",", "forestToTabs"}], "]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"treeToTabs", "[", 
   RowBox[{
    RowBox[{"rt", "[", "r_", "]"}], ",", "map_", ",", "tag_", ",", 
    RowBox[{"name_:", "\"\<\>\""}]}], "]"}], ":=", "\[IndentingNewLine]", 
  RowBox[{"{", 
   RowBox[{"r", "\[Rule]", 
    RowBox[{"DynamicModule", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"f", "=", 
         RowBox[{"name", "<>", "r"}]}], ",", 
        RowBox[{"string", "=", "\"\<\>\""}], ",", 
        RowBox[{"newMap", "=", 
         RowBox[{"Block", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"p", ",", "q"}], "}"}], ",", 
           RowBox[{"\[LeftAngleBracket]", 
            RowBox[{"q", ",", 
             RowBox[{
              RowBox[{"(", 
               RowBox[{
                RowBox[{"(", 
                 RowBox[{"name", "<>", "r"}], ")"}], "\[Rule]", "p_"}], ")"}],
               "\[LeftTriangle]", "map"}], ",", 
             RowBox[{"q_", "\[LeftTriangle]", "p"}]}], 
            "\[RightAngleBracket]"}]}], "]"}]}]}], "}"}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{"Panel", "[", 
       RowBox[{"Grid", "[", 
        RowBox[{"{", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{"Style", "[", 
             RowBox[{"\"\<String map\>\"", ",", "Bold"}], "]"}], ",", 
            "SpanFromLeft"}], "}"}], ",", "\[IndentingNewLine]", 
          RowBox[{"{", 
           RowBox[{"\"\<Name:\>\"", ",", 
            RowBox[{"InputField", "[", 
             RowBox[{
              RowBox[{"Dynamic", "[", "f", "]"}], ",", "String", ",", 
              RowBox[{"Enabled", "\[Rule]", "False"}]}], "]"}]}], "}"}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{"{", 
           RowBox[{"\"\<String:\>\"", ",", 
            RowBox[{"InputField", "[", 
             RowBox[{
              RowBox[{"Dynamic", "[", "string", "]"}], ",", "String"}], 
             "]"}]}], "}"}], ",", "\[IndentingNewLine]", 
          RowBox[{"{", 
           RowBox[{"\"\<\>\"", ",", 
            RowBox[{"Button", "[", 
             RowBox[{"\"\<Add string\>\"", ",", 
              RowBox[{"(", 
               RowBox[{
                RowBox[{"newMap", "=", 
                 RowBox[{"newMap", "\[Union]", 
                  RowBox[{"{", "string", "}"}]}]}], ";", 
                RowBox[{
                 RowBox[{"globMap", "[", "tag", "]"}], "=", 
                 RowBox[{
                  RowBox[{"{", 
                   RowBox[{"f", "\[Rule]", "newMap"}], "}"}], "\[Union]", 
                  RowBox[{"Block", "[", 
                   RowBox[{
                    RowBox[{"{", 
                    RowBox[{"p", ",", "g"}], "}"}], ",", 
                    RowBox[{"\[LeftBracketingBar]", 
                    RowBox[{"p", ",", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"p", ":", 
                    RowBox[{"(", 
                    RowBox[{"g_", "\[Rule]", "_"}], ")"}]}], ")"}], 
                    "\[LeftTriangle]", 
                    RowBox[{"globMap", "[", "tag", "]"}]}], ",", 
                    RowBox[{"g", "\[NotEqual]", "f"}]}], 
                    "\[RightBracketingBar]"}]}], "]"}]}]}]}], ")"}], ",", 
              RowBox[{"BaseStyle", "\[Rule]", "Small"}]}], "]"}]}], "}"}], 
          ",", "\[IndentingNewLine]", 
          RowBox[{"{", 
           RowBox[{"\"\<\>\"", ",", 
            RowBox[{"Button", "[", 
             RowBox[{"\"\<Remove string\>\"", ",", 
              RowBox[{"(", 
               RowBox[{
                RowBox[{"newMap", "=", 
                 RowBox[{"Complement", "[", 
                  RowBox[{"newMap", ",", 
                   RowBox[{"{", "string", "}"}]}], "]"}]}], ";", 
                RowBox[{
                 RowBox[{"globMap", "[", "tag", "]"}], "=", 
                 RowBox[{
                  RowBox[{"{", 
                   RowBox[{"f", "\[Rule]", "newMap"}], "}"}], "\[Union]", 
                  RowBox[{"Block", "[", 
                   RowBox[{
                    RowBox[{"{", 
                    RowBox[{"p", ",", "g"}], "}"}], ",", 
                    RowBox[{"\[LeftBracketingBar]", 
                    RowBox[{"p", ",", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"p", ":", 
                    RowBox[{"(", 
                    RowBox[{"g_", "\[Rule]", "_"}], ")"}]}], ")"}], 
                    "\[LeftTriangle]", 
                    RowBox[{"globMap", "[", "tag", "]"}]}], ",", 
                    RowBox[{"g", "\[NotEqual]", "f"}]}], 
                    "\[RightBracketingBar]"}]}], "]"}]}]}]}], ")"}], ",", 
              RowBox[{"BaseStyle", "\[Rule]", "Small"}]}], "]"}]}], "}"}], 
          ",", "\[IndentingNewLine]", 
          RowBox[{"{", 
           RowBox[{"\"\<\>\"", ",", 
            RowBox[{"Button", "[", 
             RowBox[{"\"\<Print local map\>\"", ",", 
              RowBox[{"Print", "[", 
               RowBox[{"f", "\[Rule]", "newMap"}], "]"}], ",", 
              RowBox[{"BaseStyle", "\[Rule]", "Small"}]}], "]"}]}], "}"}]}], 
         "}"}], "]"}], "]"}]}], "]"}]}], "}"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"treeToTabs", "[", 
   RowBox[{
    RowBox[{"tr", "[", 
     RowBox[{"h_", ",", "t_List"}], "]"}], ",", "map_", ",", "tag_", ",", 
    RowBox[{"name_:", "\"\<\>\""}]}], "]"}], ":=", "\[IndentingNewLine]", 
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"s", "=", 
      RowBox[{
       RowBox[{
        RowBox[{"treeToTabs", "[", 
         RowBox[{"#", ",", "map", ",", "tag", ",", 
          RowBox[{"name", "<>", "h"}]}], "]"}], "&"}], "/@", "t"}]}], "}"}], 
    ",", 
    RowBox[{"{", 
     RowBox[{"h", "\[Rule]", 
      RowBox[{"TabView", "[", 
       RowBox[{
        RowBox[{"flat1", "[", "s", "]"}], ",", 
        RowBox[{"ControlPlacement", "\[Rule]", 
         RowBox[{"{", 
          RowBox[{"Center", ",", "Top"}], "}"}]}], ",", 
        RowBox[{"LabelStyle", "\[Rule]", "Small"}], ",", 
        RowBox[{"Appearance", "\[Rule]", 
         RowBox[{"{", 
          RowBox[{"\"\<Limited\>\"", ",", "10"}], "}"}]}]}], "]"}]}], "}"}]}],
    "]"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"forestToTabs", "[", 
   RowBox[{"trs_List", ",", "map_", ",", "tag_"}], "]"}], ":=", 
  RowBox[{"TabView", "[", 
   RowBox[{
    RowBox[{"flat1", "[", 
     RowBox[{
      RowBox[{
       RowBox[{"treeToTabs", "[", 
        RowBox[{"#", ",", "map", ",", "tag"}], "]"}], "&"}], "/@", "trs"}], 
     "]"}], ",", 
    RowBox[{"ControlPlacement", "\[Rule]", 
     RowBox[{"{", 
      RowBox[{"Center", ",", "Top"}], "}"}]}], ",", 
    RowBox[{"LabelStyle", "\[Rule]", "Small"}], ",", 
    RowBox[{"Appearance", "\[Rule]", 
     RowBox[{"{", 
      RowBox[{"\"\<Limited\>\"", ",", "10"}], "}"}]}]}], "]"}]}]}], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.532596831435953*^9, 3.53259694575951*^9}, {
   3.5325969983735027`*^9, 3.5325970079091473`*^9}, {3.532597062749045*^9, 
   3.532597136610889*^9}, {3.532597167036502*^9, 3.532597169138404*^9}, {
   3.5325972140395813`*^9, 3.532597216488941*^9}, {3.5325973444748363`*^9, 
   3.5325973645627537`*^9}, {3.532597414688806*^9, 3.532597421523992*^9}, {
   3.532597939871817*^9, 3.5325979648889647`*^9}, {3.532598004710309*^9, 
   3.5325980049720907`*^9}, 3.532598077810297*^9, {3.532598147448015*^9, 
   3.532598226432616*^9}, {3.53259825959031*^9, 3.5325983071140537`*^9}, {
   3.532600759875634*^9, 3.5326008206842527`*^9}, {3.532600906033636*^9, 
   3.53260092569693*^9}, {3.532601175155819*^9, 3.532601216621272*^9}, {
   3.532601397444722*^9, 3.532601404557417*^9}, {3.532602905997164*^9, 
   3.5326029124189157`*^9}, {3.532602991809856*^9, 3.532602992398885*^9}, {
   3.5326030590249023`*^9, 3.532603106110323*^9}, {3.532603221076816*^9, 
   3.532603226528722*^9}, {3.532603339344836*^9, 3.53260335034636*^9}, {
   3.532603423172841*^9, 3.532603438400819*^9}, {3.532603642533607*^9, 
   3.532603659689501*^9}, {3.532603696731056*^9, 3.532603705581256*^9}, {
   3.532603902785293*^9, 3.53260390582586*^9}, {3.532603985494052*^9, 
   3.532603987841056*^9}, {3.5326040831041*^9, 3.532604085801927*^9}, {
   3.532604130173295*^9, 3.532604153961739*^9}, {3.532604201834442*^9, 
   3.532604208860446*^9}, {3.532604311952632*^9, 3.532604317266535*^9}, {
   3.532604626353036*^9, 3.5326047328277283`*^9}, {3.532604776721797*^9, 
   3.532604782775261*^9}, {3.532604822121542*^9, 3.532604823616785*^9}, {
   3.532604853963779*^9, 3.532604924126234*^9}, {3.532604959001504*^9, 
   3.532604974576275*^9}, {3.532605190746559*^9, 3.532605226618743*^9}, {
   3.5326052812369833`*^9, 3.532605292936921*^9}, {3.532605327748804*^9, 
   3.532605328999174*^9}, {3.532605367088457*^9, 3.532605471242386*^9}, {
   3.532605562224648*^9, 3.53260560752562*^9}, {3.532606353990905*^9, 
   3.532606371821146*^9}, 3.532606440021366*^9, {3.532607045744728*^9, 
   3.532607099668098*^9}, {3.532607136992845*^9, 3.532607141753723*^9}, {
   3.532607196879321*^9, 3.53260720017875*^9}, {3.532607470077655*^9, 
   3.532607483577414*^9}, {3.532608598832313*^9, 3.532608607220796*^9}, {
   3.532608707106833*^9, 3.532608708357478*^9}, {3.5326090578282137`*^9, 
   3.532609135843232*^9}, 3.532609318891191*^9, {3.5326094371752043`*^9, 
   3.532609463586273*^9}, {3.532609540116735*^9, 3.532609564644959*^9}, {
   3.532609605729141*^9, 3.532609607089602*^9}, {3.532609682781027*^9, 
   3.532609688277049*^9}, {3.5326097209144173`*^9, 3.532609730698217*^9}, {
   3.532609767034842*^9, 3.532609843331456*^9}, {3.532610012211581*^9, 
   3.5326100727312393`*^9}, {3.5326101418402967`*^9, 3.532610170001431*^9}, {
   3.532610210361372*^9, 3.532610229420278*^9}, {3.532610278591442*^9, 
   3.532610328222808*^9}, {3.532610541134131*^9, 3.532610543141769*^9}, {
   3.547304433866675*^9, 3.5473044457518387`*^9}, {3.547304556547682*^9, 
   3.547304565981489*^9}, {3.547304626694693*^9, 3.54730466269343*^9}, {
   3.5473049423540707`*^9, 3.547305012404211*^9}, {3.5473050584269667`*^9, 
   3.547305106351638*^9}, {3.547305167830971*^9, 3.547305172755269*^9}, {
   3.5473134278690443`*^9, 3.547313443716535*^9}, {3.5473136807301292`*^9, 
   3.5473137859165277`*^9}, {3.547314037844233*^9, 3.547314076851839*^9}, {
   3.547314141948142*^9, 3.547314163789001*^9}, {3.5473142009039*^9, 
   3.547314206938697*^9}, {3.547314261027659*^9, 3.547314261465169*^9}, {
   3.54731430773943*^9, 3.5473143137396927`*^9}, {3.547314350306274*^9, 
   3.547314448562632*^9}, {3.547314502590041*^9, 3.547314503201284*^9}, {
   3.547314538777875*^9, 3.547314554627309*^9}, {3.547314646489111*^9, 
   3.5473146507214746`*^9}, {3.547314686068225*^9, 3.547314710796336*^9}, {
   3.547314745770515*^9, 3.54731474906719*^9}, 3.5473162745889883`*^9, {
   3.547316556439013*^9, 3.547316567908581*^9}, {3.547316601955879*^9, 
   3.547316615507223*^9}, {3.547316654057585*^9, 3.5473166844487963`*^9}, {
   3.547316781179748*^9, 3.547316818550025*^9}, {3.547317023843645*^9, 
   3.547317038791027*^9}, {3.5473171317904797`*^9, 3.5473171325281563`*^9}, {
   3.5473171800302877`*^9, 3.5473172052899446`*^9}, {3.547317348171516*^9, 
   3.5473173589433403`*^9}, {3.5473173898897343`*^9, 3.547317438065345*^9}, {
   3.547317487614728*^9, 3.547317489224922*^9}, {3.547317631525599*^9, 
   3.5473176334491463`*^9}, {3.54731781444238*^9, 3.5473178373501453`*^9}, {
   3.547317890980975*^9, 3.547317941072913*^9}, {3.5473179942856913`*^9, 
   3.547318053841885*^9}, {3.5473181092136593`*^9, 3.5473181276992483`*^9}, {
   3.547318176199044*^9, 3.547318183837328*^9}, {3.54731825207544*^9, 
   3.547318255898624*^9}, {3.5473183170572653`*^9, 3.5473183173764563`*^9}, {
   3.547318383776535*^9, 3.547318386114917*^9}, {3.547318468973887*^9, 
   3.547318544585761*^9}, {3.547318854633613*^9, 3.5473188570073633`*^9}, {
   3.547318897619742*^9, 3.5473189041325283`*^9}, {3.5473190393167667`*^9, 
   3.547319040450651*^9}, {3.5473192975322104`*^9, 3.5473193027864*^9}, {
   3.5473193494054317`*^9, 3.54731938285427*^9}, {3.547319455959749*^9, 
   3.547319475708584*^9}, {3.547319561492157*^9, 3.5473195759379683`*^9}, {
   3.547319623970351*^9, 3.5473196706904078`*^9}, 3.5473197386645927`*^9, {
   3.5473198230689383`*^9, 3.547319900373262*^9}, {3.54731995211887*^9, 
   3.54731995626897*^9}, {3.547320291154068*^9, 3.5473202930880613`*^9}, {
   3.547320342997651*^9, 3.547320343452085*^9}, {3.547320385413843*^9, 
   3.5473203937780447`*^9}, {3.5473204534519653`*^9, 
   3.5473204761367807`*^9}, {3.5473205982384577`*^9, 3.547320640275653*^9}, {
   3.547320739387953*^9, 3.547320750293687*^9}, {3.5473207889635344`*^9, 
   3.5473207917988977`*^9}, {3.547320873093528*^9, 3.547320900589818*^9}, {
   3.547320946561352*^9, 3.547320950684059*^9}, {3.547321069385086*^9, 
   3.547321113127598*^9}, {3.5473212565091763`*^9, 3.54732125768926*^9}, {
   3.547321308760651*^9, 3.5473213360625896`*^9}, {3.5473218295958023`*^9, 
   3.547321832043586*^9}, {3.547321896194995*^9, 3.547321955944646*^9}, {
   3.5473219925577*^9, 3.5473219948688087`*^9}, {3.5473220438985167`*^9, 
   3.547322063794035*^9}, {3.5473221062461576`*^9, 3.547322127529706*^9}, 
   3.547328777541133*^9, {3.547356579439398*^9, 3.547356605224022*^9}, {
   3.547356852363739*^9, 3.547356864861188*^9}, {3.547359601149043*^9, 
   3.547359608334738*^9}, {3.547359781108944*^9, 3.547359796033671*^9}, {
   3.547360447730847*^9, 3.547360463580606*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell["Generate interface", "Subsubsection"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"forestToTabs", "[", 
  RowBox[{
   RowBox[{"accountTrees", "[", "\"\<business\>\"", "]"}], ",", 
   RowBox[{"globMap", "[", "\"\<business\>\"", "]"}], ",", 
   "\"\<business\>\""}], "]"}]], "Input"],

Cell[BoxData[
 TagBox[
  DynamicModuleBox[{Typeset`var$$ = 4}, 
   InterpretationBox[
    DynamicModuleBox[{DynamicDump`width$$ = 10, DynamicDump`jump$$ = 10, 
     DynamicDump`tabdata$$ = {{
      1, "\"Bank Accounts:\"" -> 
       TabViewBox[{{
          1, "\"Business Account\"" -> 
           DynamicModuleBox[{$CellContext`f$$ = 
              "Bank Accounts:Business Account", $CellContext`string$$ = 
              "", $CellContext`newMap$$ = {}}, 
             PanelBox[
              TagBox[
               GridBox[{{
                  StyleBox["\"String map\"", Bold, StripOnInput -> False], 
                  "\[SpanFromLeft]"}, {"\"Name:\"", 
                  InputFieldBox[
                   Dynamic[$CellContext`f$$], String, Enabled -> False]}, {
                 "\"String:\"", 
                  InputFieldBox[
                   Dynamic[$CellContext`string$$], String]}, {"\"\"", 
                  ButtonBox[
                  "\"Add string\"", 
                   ButtonFunction :> ($CellContext`newMap$$ = 
                    Union[$CellContext`newMap$$, {$CellContext`string$$}]; \
$CellContext`globMap["business"] = 
                    Union[{$CellContext`f$$ -> $CellContext`newMap$$}, 
                    Block[{$CellContext`p, $CellContext`g}, 
                    Monads`comprehend[Monads`Sets, $CellContext`p, 
                    Monads`generator[
                    Pattern[$CellContext`p, Pattern[$CellContext`g, 
                    Blank[]] -> Blank[]], 
                    $CellContext`globMap[
                    "business"]], $CellContext`g != $CellContext`f$$]]]), 
                   BaseStyle -> Small, Appearance -> Automatic, Evaluator -> 
                   Automatic, Method -> "Preemptive"]}, {"\"\"", 
                  ButtonBox[
                  "\"Remove string\"", 
                   ButtonFunction :> ($CellContext`newMap$$ = 
                    Complement[$CellContext`newMap$$, \
{$CellContext`string$$}]; $CellContext`globMap["business"] = 
                    Union[{$CellContext`f$$ -> $CellContext`newMap$$}, 
                    Block[{$CellContext`p, $CellContext`g}, 
                    Monads`comprehend[Monads`Sets, $CellContext`p, 
                    Monads`generator[
                    Pattern[$CellContext`p, Pattern[$CellContext`g, 
                    Blank[]] -> Blank[]], 
                    $CellContext`globMap[
                    "business"]], $CellContext`g != $CellContext`f$$]]]), 
                   BaseStyle -> Small, Appearance -> Automatic, Evaluator -> 
                   Automatic, Method -> "Preemptive"]}, {"\"\"", 
                  ButtonBox[
                  "\"Print local map\"", ButtonFunction :> 
                   Print[$CellContext`f$$ -> $CellContext`newMap$$], 
                   BaseStyle -> Small, Appearance -> Automatic, Evaluator -> 
                   Automatic, Method -> "Preemptive"]}}, AutoDelete -> False, 
                GridBoxItemSize -> {
                 "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
               "Grid"]], DynamicModuleValues :> {}]}}, 1, 
         ControlPlacement -> {Center, Top}, LabelStyle -> Small]}, {
      2, "\"Assets:\"" -> 
       TabViewBox[{{
          1, "\"Capital Equipment:\"" -> 
           TabViewBox[{{
              1, "\"Computer Equipment\"" -> 
               DynamicModuleBox[{$CellContext`f$$ = 
                  "Assets:Capital Equipment:Computer Equipment", \
$CellContext`string$$ = "", $CellContext`newMap$$ = {}}, 
                 PanelBox[
                  TagBox[
                   GridBox[{{
                    StyleBox["\"String map\"", Bold, StripOnInput -> False], 
                    "\[SpanFromLeft]"}, {"\"Name:\"", 
                    InputFieldBox[
                    Dynamic[$CellContext`f$$], String, Enabled -> False]}, {
                    "\"String:\"", 
                    InputFieldBox[
                    Dynamic[$CellContext`string$$], String]}, {"\"\"", 
                    ButtonBox[
                    "\"Add string\"", 
                    ButtonFunction :> ($CellContext`newMap$$ = 
                    Union[$CellContext`newMap$$, {$CellContext`string$$}]; \
$CellContext`globMap["business"] = 
                    Union[{$CellContext`f$$ -> $CellContext`newMap$$}, 
                    Block[{$CellContext`p, $CellContext`g}, 
                    Monads`comprehend[Monads`Sets, $CellContext`p, 
                    Monads`generator[
                    Pattern[$CellContext`p, Pattern[$CellContext`g, 
                    Blank[]] -> Blank[]], 
                    $CellContext`globMap[
                    "business"]], $CellContext`g != $CellContext`f$$]]]), 
                    BaseStyle -> Small, Appearance -> Automatic, Evaluator -> 
                    Automatic, Method -> "Preemptive"]}, {"\"\"", 
                    ButtonBox[
                    "\"Remove string\"", 
                    ButtonFunction :> ($CellContext`newMap$$ = 
                    Complement[$CellContext`newMap$$, \
{$CellContext`string$$}]; $CellContext`globMap["business"] = 
                    Union[{$CellContext`f$$ -> $CellContext`newMap$$}, 
                    Block[{$CellContext`p, $CellContext`g}, 
                    Monads`comprehend[Monads`Sets, $CellContext`p, 
                    Monads`generator[
                    Pattern[$CellContext`p, Pattern[$CellContext`g, 
                    Blank[]] -> Blank[]], 
                    $CellContext`globMap[
                    "business"]], $CellContext`g != $CellContext`f$$]]]), 
                    BaseStyle -> Small, Appearance -> Automatic, Evaluator -> 
                    Automatic, Method -> "Preemptive"]}, {"\"\"", 
                    ButtonBox[
                    "\"Print local map\"", ButtonFunction :> 
                    Print[$CellContext`f$$ -> $CellContext`newMap$$], 
                    BaseStyle -> Small, Appearance -> Automatic, Evaluator -> 
                    Automatic, Method -> "Preemptive"]}}, AutoDelete -> False,
                     GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                   "Grid"]], DynamicModuleValues :> {}]}, {
              2, "\"Machinery\"" -> 
               DynamicModuleBox[{$CellContext`f$$ = 
                  "Assets:Capital Equipment:Machinery", $CellContext`string$$ = 
                  "", $CellContext`newMap$$ = {}}, 
                 PanelBox[
                  TagBox[
                   GridBox[{{
                    StyleBox["\"String map\"", Bold, StripOnInput -> False], 
                    "\[SpanFromLeft]"}, {"\"Name:\"", 
                    InputFieldBox[
                    Dynamic[$CellContext`f$$], String, Enabled -> False]}, {
                    "\"String:\"", 
                    InputFieldBox[
                    Dynamic[$CellContext`string$$], String]}, {"\"\"", 
                    ButtonBox[
                    "\"Add string\"", 
                    ButtonFunction :> ($CellContext`newMap$$ = 
                    Union[$CellContext`newMap$$, {$CellContext`string$$}]; \
$CellContext`globMap["business"] = 
                    Union[{$CellContext`f$$ -> $CellContext`newMap$$}, 
                    Block[{$CellContext`p, $CellContext`g}, 
                    Monads`comprehend[Monads`Sets, $CellContext`p, 
                    Monads`generator[
                    Pattern[$CellContext`p, Pattern[$CellContext`g, 
                    Blank[]] -> Blank[]], 
                    $CellContext`globMap[
                    "business"]], $CellContext`g != $CellContext`f$$]]]), 
                    BaseStyle -> Small, Appearance -> Automatic, Evaluator -> 
                    Automatic, Method -> "Preemptive"]}, {"\"\"", 
                    ButtonBox[
                    "\"Remove string\"", 
                    ButtonFunction :> ($CellContext`newMap$$ = 
                    Complement[$CellContext`newMap$$, \
{$CellContext`string$$}]; $CellContext`globMap["business"] = 
                    Union[{$CellContext`f$$ -> $CellContext`newMap$$}, 
                    Block[{$CellContext`p, $CellContext`g}, 
                    Monads`comprehend[Monads`Sets, $CellContext`p, 
                    Monads`generator[
                    Pattern[$CellContext`p, Pattern[$CellContext`g, 
                    Blank[]] -> Blank[]], 
                    $CellContext`globMap[
                    "business"]], $CellContext`g != $CellContext`f$$]]]), 
                    BaseStyle -> Small, Appearance -> Automatic, Evaluator -> 
                    Automatic, Method -> "Preemptive"]}, {"\"\"", 
                    ButtonBox[
                    "\"Print local map\"", ButtonFunction :> 
                    Print[$CellContext`f$$ -> $CellContext`newMap$$], 
                    BaseStyle -> Small, Appearance -> Automatic, Evaluator -> 
                    Automatic, Method -> "Preemptive"]}}, AutoDelete -> False,
                     GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                   "Grid"]], DynamicModuleValues :> {}]}}, 1, 
             ControlPlacement -> {Center, Top}, LabelStyle -> Small]}, {
          2, "\"Accounts Receivable\"" -> 
           DynamicModuleBox[{$CellContext`f$$ = 
              "Assets:Accounts Receivable", $CellContext`string$$ = 
              "", $CellContext`newMap$$ = {}}, 
             PanelBox[
              TagBox[
               GridBox[{{
                  StyleBox["\"String map\"", Bold, StripOnInput -> False], 
                  "\[SpanFromLeft]"}, {"\"Name:\"", 
                  InputFieldBox[
                   Dynamic[$CellContext`f$$], String, Enabled -> False]}, {
                 "\"String:\"", 
                  InputFieldBox[
                   Dynamic[$CellContext`string$$], String]}, {"\"\"", 
                  ButtonBox[
                  "\"Add string\"", 
                   ButtonFunction :> ($CellContext`newMap$$ = 
                    Union[$CellContext`newMap$$, {$CellContext`string$$}]; \
$CellContext`globMap["business"] = 
                    Union[{$CellContext`f$$ -> $CellContext`newMap$$}, 
                    Block[{$CellContext`p, $CellContext`g}, 
                    Monads`comprehend[Monads`Sets, $CellContext`p, 
                    Monads`generator[
                    Pattern[$CellContext`p, Pattern[$CellContext`g, 
                    Blank[]] -> Blank[]], 
                    $CellContext`globMap[
                    "business"]], $CellContext`g != $CellContext`f$$]]]), 
                   BaseStyle -> Small, Appearance -> Automatic, Evaluator -> 
                   Automatic, Method -> "Preemptive"]}, {"\"\"", 
                  ButtonBox[
                  "\"Remove string\"", 
                   ButtonFunction :> ($CellContext`newMap$$ = 
                    Complement[$CellContext`newMap$$, \
{$CellContext`string$$}]; $CellContext`globMap["business"] = 
                    Union[{$CellContext`f$$ -> $CellContext`newMap$$}, 
                    Block[{$CellContext`p, $CellContext`g}, 
                    Monads`comprehend[Monads`Sets, $CellContext`p, 
                    Monads`generator[
                    Pattern[$CellContext`p, Pattern[$CellContext`g, 
                    Blank[]] -> Blank[]], 
                    $CellContext`globMap[
                    "business"]], $CellContext`g != $CellContext`f$$]]]), 
                   BaseStyle -> Small, Appearance -> Automatic, Evaluator -> 
                   Automatic, Method -> "Preemptive"]}, {"\"\"", 
                  ButtonBox[
                  "\"Print local map\"", ButtonFunction :> 
                   Print[$CellContext`f$$ -> $CellContext`newMap$$], 
                   BaseStyle -> Small, Appearance -> Automatic, Evaluator -> 
                   Automatic, Method -> "Preemptive"]}}, AutoDelete -> False, 
                GridBoxItemSize -> {
                 "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
               "Grid"]], DynamicModuleValues :> {}]}, {
          3, "\"Buildings\"" -> 
           DynamicModuleBox[{$CellContext`f$$ = 
              "Assets:Buildings", $CellContext`string$$ = 
              "", $CellContext`newMap$$ = {}}, 
             PanelBox[
              TagBox[
               GridBox[{{
                  StyleBox["\"String map\"", Bold, StripOnInput -> False], 
                  "\[SpanFromLeft]"}, {"\"Name:\"", 
                  InputFieldBox[
                   Dynamic[$CellContext`f$$], String, Enabled -> False]}, {
                 "\"String:\"", 
                  InputFieldBox[
                   Dynamic[$CellContext`string$$], String]}, {"\"\"", 
                  ButtonBox[
                  "\"Add string\"", 
                   ButtonFunction :> ($CellContext`newMap$$ = 
                    Union[$CellContext`newMap$$, {$CellContext`string$$}]; \
$CellContext`globMap["business"] = 
                    Union[{$CellContext`f$$ -> $CellContext`newMap$$}, 
                    Block[{$CellContext`p, $CellContext`g}, 
                    Monads`comprehend[Monads`Sets, $CellContext`p, 
                    Monads`generator[
                    Pattern[$CellContext`p, Pattern[$CellContext`g, 
                    Blank[]] -> Blank[]], 
                    $CellContext`globMap[
                    "business"]], $CellContext`g != $CellContext`f$$]]]), 
                   BaseStyle -> Small, Appearance -> Automatic, Evaluator -> 
                   Automatic, Method -> "Preemptive"]}, {"\"\"", 
                  ButtonBox[
                  "\"Remove string\"", 
                   ButtonFunction :> ($CellContext`newMap$$ = 
                    Complement[$CellContext`newMap$$, \
{$CellContext`string$$}]; $CellContext`globMap["business"] = 
                    Union[{$CellContext`f$$ -> $CellContext`newMap$$}, 
                    Block[{$CellContext`p, $CellContext`g}, 
                    Monads`comprehend[Monads`Sets, $CellContext`p, 
                    Monads`generator[
                    Pattern[$CellContext`p, Pattern[$CellContext`g, 
                    Blank[]] -> Blank[]], 
                    $CellContext`globMap[
                    "business"]], $CellContext`g != $CellContext`f$$]]]), 
                   BaseStyle -> Small, Appearance -> Automatic, Evaluator -> 
                   Automatic, Method -> "Preemptive"]}, {"\"\"", 
                  ButtonBox[
                  "\"Print local map\"", ButtonFunction :> 
                   Print[$CellContext`f$$ -> $CellContext`newMap$$], 
                   BaseStyle -> Small, Appearance -> Automatic, Evaluator -> 
                   Automatic, Method -> "Preemptive"]}}, AutoDelete -> False, 
                GridBoxItemSize -> {
                 "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
               "Grid"]], DynamicModuleValues :> {}]}, {
          4, "\"Cash in Hand\"" -> 
           DynamicModuleBox[{$CellContext`f$$ = 
              "Assets:Cash in Hand", $CellContext`string$$ = 
              "", $CellContext`newMap$$ = {"ATM Debit"}}, 
             PanelBox[
              TagBox[
               GridBox[{{
                  StyleBox["\"String map\"", Bold, StripOnInput -> False], 
                  "\[SpanFromLeft]"}, {"\"Name:\"", 
                  InputFieldBox[
                   Dynamic[$CellContext`f$$], String, Enabled -> False]}, {
                 "\"String:\"", 
                  InputFieldBox[
                   Dynamic[$CellContext`string$$], String]}, {"\"\"", 
                  ButtonBox[
                  "\"Add string\"", 
                   ButtonFunction :> ($CellContext`newMap$$ = 
                    Union[$CellContext`newMap$$, {$CellContext`string$$}]; \
$CellContext`globMap["business"] = 
                    Union[{$CellContext`f$$ -> $CellContext`newMap$$}, 
                    Block[{$CellContext`p, $CellContext`g}, 
                    Monads`comprehend[Monads`Sets, $CellContext`p, 
                    Monads`generator[
                    Pattern[$CellContext`p, Pattern[$CellContext`g, 
                    Blank[]] -> Blank[]], 
                    $CellContext`globMap[
                    "business"]], $CellContext`g != $CellContext`f$$]]]), 
                   BaseStyle -> Small, Appearance -> Automatic, Evaluator -> 
                   Automatic, Method -> "Preemptive"]}, {"\"\"", 
                  ButtonBox[
                  "\"Remove string\"", 
                   ButtonFunction :> ($CellContext`newMap$$ = 
                    Complement[$CellContext`newMap$$, \
{$CellContext`string$$}]; $CellContext`globMap["business"] = 
                    Union[{$CellContext`f$$ -> $CellContext`newMap$$}, 
                    Block[{$CellContext`p, $CellContext`g}, 
                    Monads`comprehend[Monads`Sets, $CellContext`p, 
                    Monads`generator[
                    Pattern[$CellContext`p, Pattern[$CellContext`g, 
                    Blank[]] -> Blank[]], 
                    $CellContext`globMap[
                    "business"]], $CellContext`g != $CellContext`f$$]]]), 
                   BaseStyle -> Small, Appearance -> Automatic, Evaluator -> 
                   Automatic, Method -> "Preemptive"]}, {"\"\"", 
                  ButtonBox[
                  "\"Print local map\"", ButtonFunction :> 
                   Print[$CellContext`f$$ -> $CellContext`newMap$$], 
                   BaseStyle -> Small, Appearance -> Automatic, Evaluator -> 
                   Automatic, Method -> "Preemptive"]}}, AutoDelete -> False, 
                GridBoxItemSize -> {
                 "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
               "Grid"]], DynamicModuleValues :> {}]}, {
          5, "\"Land\"" -> 
           DynamicModuleBox[{$CellContext`f$$ = 
              "Assets:Land", $CellContext`string$$ = 
              "", $CellContext`newMap$$ = {}}, 
             PanelBox[
              TagBox[
               GridBox[{{
                  StyleBox["\"String map\"", Bold, StripOnInput -> False], 
                  "\[SpanFromLeft]"}, {"\"Name:\"", 
                  InputFieldBox[
                   Dynamic[$CellContext`f$$], String, Enabled -> False]}, {
                 "\"String:\"", 
                  InputFieldBox[
                   Dynamic[$CellContext`string$$], String]}, {"\"\"", 
                  ButtonBox[
                  "\"Add string\"", 
                   ButtonFunction :> ($CellContext`newMap$$ = 
                    Union[$CellContext`newMap$$, {$CellContext`string$$}]; \
$CellContext`globMap["business"] = 
                    Union[{$CellContext`f$$ -> $CellContext`newMap$$}, 
                    Block[{$CellContext`p, $CellContext`g}, 
                    Monads`comprehend[Monads`Sets, $CellContext`p, 
                    Monads`generator[
                    Pattern[$CellContext`p, Pattern[$CellContext`g, 
                    Blank[]] -> Blank[]], 
                    $CellContext`globMap[
                    "business"]], $CellContext`g != $CellContext`f$$]]]), 
                   BaseStyle -> Small, Appearance -> Automatic, Evaluator -> 
                   Automatic, Method -> "Preemptive"]}, {"\"\"", 
                  ButtonBox[
                  "\"Remove string\"", 
                   ButtonFunction :> ($CellContext`newMap$$ = 
                    Complement[$CellContext`newMap$$, \
{$CellContext`string$$}]; $CellContext`globMap["business"] = 
                    Union[{$CellContext`f$$ -> $CellContext`newMap$$}, 
                    Block[{$CellContext`p, $CellContext`g}, 
                    Monads`comprehend[Monads`Sets, $CellContext`p, 
                    Monads`generator[
                    Pattern[$CellContext`p, Pattern[$CellContext`g, 
                    Blank[]] -> Blank[]], 
                    $CellContext`globMap[
                    "business"]], $CellContext`g != $CellContext`f$$]]]), 
                   BaseStyle -> Small, Appearance -> Automatic, Evaluator -> 
                   Automatic, Method -> "Preemptive"]}, {"\"\"", 
                  ButtonBox[
                  "\"Print local map\"", ButtonFunction :> 
                   Print[$CellContext`f$$ -> $CellContext`newMap$$], 
                   BaseStyle -> Small, Appearance -> Automatic, Evaluator -> 
                   Automatic, Method -> "Preemptive"]}}, AutoDelete -> False, 
                GridBoxItemSize -> {
                 "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
               "Grid"]], DynamicModuleValues :> {}]}, {
          6, "\"Plantations\"" -> 
           DynamicModuleBox[{$CellContext`f$$ = 
              "Assets:Plantations", $CellContext`string$$ = 
              "", $CellContext`newMap$$ = {}}, 
             PanelBox[
              TagBox[
               GridBox[{{
                  StyleBox["\"String map\"", Bold, StripOnInput -> False], 
                  "\[SpanFromLeft]"}, {"\"Name:\"", 
                  InputFieldBox[
                   Dynamic[$CellContext`f$$], String, Enabled -> False]}, {
                 "\"String:\"", 
                  InputFieldBox[
                   Dynamic[$CellContext`string$$], String]}, {"\"\"", 
                  ButtonBox[
                  "\"Add string\"", 
                   ButtonFunction :> ($CellContext`newMap$$ = 
                    Union[$CellContext`newMap$$, {$CellContext`string$$}]; \
$CellContext`globMap["business"] = 
                    Union[{$CellContext`f$$ -> $CellContext`newMap$$}, 
                    Block[{$CellContext`p, $CellContext`g}, 
                    Monads`comprehend[Monads`Sets, $CellContext`p, 
                    Monads`generator[
                    Pattern[$CellContext`p, Pattern[$CellContext`g, 
                    Blank[]] -> Blank[]], 
                    $CellContext`globMap[
                    "business"]], $CellContext`g != $CellContext`f$$]]]), 
                   BaseStyle -> Small, Appearance -> Automatic, Evaluator -> 
                   Automatic, Method -> "Preemptive"]}, {"\"\"", 
                  ButtonBox[
                  "\"Remove string\"", 
                   ButtonFunction :> ($CellContext`newMap$$ = 
                    Complement[$CellContext`newMap$$, \
{$CellContext`string$$}]; $CellContext`globMap["business"] = 
                    Union[{$CellContext`f$$ -> $CellContext`newMap$$}, 
                    Block[{$CellContext`p, $CellContext`g}, 
                    Monads`comprehend[Monads`Sets, $CellContext`p, 
                    Monads`generator[
                    Pattern[$CellContext`p, Pattern[$CellContext`g, 
                    Blank[]] -> Blank[]], 
                    $CellContext`globMap[
                    "business"]], $CellContext`g != $CellContext`f$$]]]), 
                   BaseStyle -> Small, Appearance -> Automatic, Evaluator -> 
                   Automatic, Method -> "Preemptive"]}, {"\"\"", 
                  ButtonBox[
                  "\"Print local map\"", ButtonFunction :> 
                   Print[$CellContext`f$$ -> $CellContext`newMap$$], 
                   BaseStyle -> Small, Appearance -> Automatic, Evaluator -> 
                   Automatic, Method -> "Preemptive"]}}, AutoDelete -> False, 
                GridBoxItemSize -> {
                 "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
               "Grid"]], DynamicModuleValues :> {}]}}, 1, 
         ControlPlacement -> {Center, Top}, LabelStyle -> Small]}, {
      3, "\"Liabilities:\"" -> 
       TabViewBox[{{
          1, "\"Credit Card\"" -> 
           DynamicModuleBox[{$CellContext`f$$ = 
              "Liabilities:Credit Card", $CellContext`string$$ = 
              "", $CellContext`newMap$$ = {}}, 
             PanelBox[
              TagBox[
               GridBox[{{
                  StyleBox["\"String map\"", Bold, StripOnInput -> False], 
                  "\[SpanFromLeft]"}, {"\"Name:\"", 
                  InputFieldBox[
                   Dynamic[$CellContext`f$$], String, Enabled -> False]}, {
                 "\"String:\"", 
                  InputFieldBox[
                   Dynamic[$CellContext`string$$], String]}, {"\"\"", 
                  ButtonBox[
                  "\"Add string\"", 
                   ButtonFunction :> ($CellContext`newMap$$ = 
                    Union[$CellContext`newMap$$, {$CellContext`string$$}]; \
$CellContext`globMap["business"] = 
                    Union[{$CellContext`f$$ -> $CellContext`newMap$$}, 
                    Block[{$CellContext`p, $CellContext`g}, 
                    Monads`comprehend[Monads`Sets, $CellContext`p, 
                    Monads`generator[
                    Pattern[$CellContext`p, Pattern[$CellContext`g, 
                    Blank[]] -> Blank[]], 
                    $CellContext`globMap[
                    "business"]], $CellContext`g != $CellContext`f$$]]]), 
                   BaseStyle -> Small, Appearance -> Automatic, Evaluator -> 
                   Automatic, Method -> "Preemptive"]}, {"\"\"", 
                  ButtonBox[
                  "\"Remove string\"", 
                   ButtonFunction :> ($CellContext`newMap$$ = 
                    Complement[$CellContext`newMap$$, \
{$CellContext`string$$}]; $CellContext`globMap["business"] = 
                    Union[{$CellContext`f$$ -> $CellContext`newMap$$}, 
                    Block[{$CellContext`p, $CellContext`g}, 
                    Monads`comprehend[Monads`Sets, $CellContext`p, 
                    Monads`generator[
                    Pattern[$CellContext`p, Pattern[$CellContext`g, 
                    Blank[]] -> Blank[]], 
                    $CellContext`globMap[
                    "business"]], $CellContext`g != $CellContext`f$$]]]), 
                   BaseStyle -> Small, Appearance -> Automatic, Evaluator -> 
                   Automatic, Method -> "Preemptive"]}, {"\"\"", 
                  ButtonBox[
                  "\"Print local map\"", ButtonFunction :> 
                   Print[$CellContext`f$$ -> $CellContext`newMap$$], 
                   BaseStyle -> Small, Appearance -> Automatic, Evaluator -> 
                   Automatic, Method -> "Preemptive"]}}, AutoDelete -> False, 
                GridBoxItemSize -> {
                 "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
               "Grid"]], DynamicModuleValues :> {}]}, {
          2, "\"Accounts Payable\"" -> 
           DynamicModuleBox[{$CellContext`f$$ = 
              "Liabilities:Accounts Payable", $CellContext`string$$ = 
              "", $CellContext`newMap$$ = {}}, 
             PanelBox[
              TagBox[
               GridBox[{{
                  StyleBox["\"String map\"", Bold, StripOnInput -> False], 
                  "\[SpanFromLeft]"}, {"\"Name:\"", 
                  InputFieldBox[
                   Dynamic[$CellContext`f$$], String, Enabled -> False]}, {
                 "\"String:\"", 
                  InputFieldBox[
                   Dynamic[$CellContext`string$$], String]}, {"\"\"", 
                  ButtonBox[
                  "\"Add string\"", 
                   ButtonFunction :> ($CellContext`newMap$$ = 
                    Union[$CellContext`newMap$$, {$CellContext`string$$}]; \
$CellContext`globMap["business"] = 
                    Union[{$CellContext`f$$ -> $CellContext`newMap$$}, 
                    Block[{$CellContext`p, $CellContext`g}, 
                    Monads`comprehend[Monads`Sets, $CellContext`p, 
                    Monads`generator[
                    Pattern[$CellContext`p, Pattern[$CellContext`g, 
                    Blank[]] -> Blank[]], 
                    $CellContext`globMap[
                    "business"]], $CellContext`g != $CellContext`f$$]]]), 
                   BaseStyle -> Small, Appearance -> Automatic, Evaluator -> 
                   Automatic, Method -> "Preemptive"]}, {"\"\"", 
                  ButtonBox[
                  "\"Remove string\"", 
                   ButtonFunction :> ($CellContext`newMap$$ = 
                    Complement[$CellContext`newMap$$, \
{$CellContext`string$$}]; $CellContext`globMap["business"] = 
                    Union[{$CellContext`f$$ -> $CellContext`newMap$$}, 
                    Block[{$CellContext`p, $CellContext`g}, 
                    Monads`comprehend[Monads`Sets, $CellContext`p, 
                    Monads`generator[
                    Pattern[$CellContext`p, Pattern[$CellContext`g, 
                    Blank[]] -> Blank[]], 
                    $CellContext`globMap[
                    "business"]], $CellContext`g != $CellContext`f$$]]]), 
                   BaseStyle -> Small, Appearance -> Automatic, Evaluator -> 
                   Automatic, Method -> "Preemptive"]}, {"\"\"", 
                  ButtonBox[
                  "\"Print local map\"", ButtonFunction :> 
                   Print[$CellContext`f$$ -> $CellContext`newMap$$], 
                   BaseStyle -> Small, Appearance -> Automatic, Evaluator -> 
                   Automatic, Method -> "Preemptive"]}}, AutoDelete -> False, 
                GridBoxItemSize -> {
                 "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
               "Grid"]], DynamicModuleValues :> {}]}}, 1, 
         ControlPlacement -> {Center, Top}, LabelStyle -> Small]}, {
      4, "\"Equity:\"" -> 
       TabViewBox[{{
          1, "\"Partners Loan:\"" -> 
           TabViewBox[{{
              1, "\"Matthew loan\"" -> 
               DynamicModuleBox[{$CellContext`f$$ = 
                  "Equity:Partners Loan:Matthew loan", $CellContext`string$$ = 
                  "", $CellContext`newMap$$ = {}}, 
                 PanelBox[
                  TagBox[
                   GridBox[{{
                    StyleBox["\"String map\"", Bold, StripOnInput -> False], 
                    "\[SpanFromLeft]"}, {"\"Name:\"", 
                    InputFieldBox[
                    Dynamic[$CellContext`f$$], String, Enabled -> False]}, {
                    "\"String:\"", 
                    InputFieldBox[
                    Dynamic[$CellContext`string$$], String]}, {"\"\"", 
                    ButtonBox[
                    "\"Add string\"", 
                    ButtonFunction :> ($CellContext`newMap$$ = 
                    Union[$CellContext`newMap$$, {$CellContext`string$$}]; \
$CellContext`globMap["business"] = 
                    Union[{$CellContext`f$$ -> $CellContext`newMap$$}, 
                    Block[{$CellContext`p, $CellContext`g}, 
                    Monads`comprehend[Monads`Sets, $CellContext`p, 
                    Monads`generator[
                    Pattern[$CellContext`p, Pattern[$CellContext`g, 
                    Blank[]] -> Blank[]], 
                    $CellContext`globMap[
                    "business"]], $CellContext`g != $CellContext`f$$]]]), 
                    BaseStyle -> Small, Appearance -> Automatic, Evaluator -> 
                    Automatic, Method -> "Preemptive"]}, {"\"\"", 
                    ButtonBox[
                    "\"Remove string\"", 
                    ButtonFunction :> ($CellContext`newMap$$ = 
                    Complement[$CellContext`newMap$$, \
{$CellContext`string$$}]; $CellContext`globMap["business"] = 
                    Union[{$CellContext`f$$ -> $CellContext`newMap$$}, 
                    Block[{$CellContext`p, $CellContext`g}, 
                    Monads`comprehend[Monads`Sets, $CellContext`p, 
                    Monads`generator[
                    Pattern[$CellContext`p, Pattern[$CellContext`g, 
                    Blank[]] -> Blank[]], 
                    $CellContext`globMap[
                    "business"]], $CellContext`g != $CellContext`f$$]]]), 
                    BaseStyle -> Small, Appearance -> Automatic, Evaluator -> 
                    Automatic, Method -> "Preemptive"]}, {"\"\"", 
                    ButtonBox[
                    "\"Print local map\"", ButtonFunction :> 
                    Print[$CellContext`f$$ -> $CellContext`newMap$$], 
                    BaseStyle -> Small, Appearance -> Automatic, Evaluator -> 
                    Automatic, Method -> "Preemptive"]}}, AutoDelete -> False,
                     GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                   "Grid"]], DynamicModuleValues :> {}]}, {
              2, "\"Beth loan\"" -> 
               DynamicModuleBox[{$CellContext`f$$ = 
                  "Equity:Partners Loan:Beth loan", $CellContext`string$$ = 
                  "", $CellContext`newMap$$ = {}}, 
                 PanelBox[
                  TagBox[
                   GridBox[{{
                    StyleBox["\"String map\"", Bold, StripOnInput -> False], 
                    "\[SpanFromLeft]"}, {"\"Name:\"", 
                    InputFieldBox[
                    Dynamic[$CellContext`f$$], String, Enabled -> False]}, {
                    "\"String:\"", 
                    InputFieldBox[
                    Dynamic[$CellContext`string$$], String]}, {"\"\"", 
                    ButtonBox[
                    "\"Add string\"", 
                    ButtonFunction :> ($CellContext`newMap$$ = 
                    Union[$CellContext`newMap$$, {$CellContext`string$$}]; \
$CellContext`globMap["business"] = 
                    Union[{$CellContext`f$$ -> $CellContext`newMap$$}, 
                    Block[{$CellContext`p, $CellContext`g}, 
                    Monads`comprehend[Monads`Sets, $CellContext`p, 
                    Monads`generator[
                    Pattern[$CellContext`p, Pattern[$CellContext`g, 
                    Blank[]] -> Blank[]], 
                    $CellContext`globMap[
                    "business"]], $CellContext`g != $CellContext`f$$]]]), 
                    BaseStyle -> Small, Appearance -> Automatic, Evaluator -> 
                    Automatic, Method -> "Preemptive"]}, {"\"\"", 
                    ButtonBox[
                    "\"Remove string\"", 
                    ButtonFunction :> ($CellContext`newMap$$ = 
                    Complement[$CellContext`newMap$$, \
{$CellContext`string$$}]; $CellContext`globMap["business"] = 
                    Union[{$CellContext`f$$ -> $CellContext`newMap$$}, 
                    Block[{$CellContext`p, $CellContext`g}, 
                    Monads`comprehend[Monads`Sets, $CellContext`p, 
                    Monads`generator[
                    Pattern[$CellContext`p, Pattern[$CellContext`g, 
                    Blank[]] -> Blank[]], 
                    $CellContext`globMap[
                    "business"]], $CellContext`g != $CellContext`f$$]]]), 
                    BaseStyle -> Small, Appearance -> Automatic, Evaluator -> 
                    Automatic, Method -> "Preemptive"]}, {"\"\"", 
                    ButtonBox[
                    "\"Print local map\"", ButtonFunction :> 
                    Print[$CellContext`f$$ -> $CellContext`newMap$$], 
                    BaseStyle -> Small, Appearance -> Automatic, Evaluator -> 
                    Automatic, Method -> "Preemptive"]}}, AutoDelete -> False,
                     GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                   "Grid"]], DynamicModuleValues :> {}]}, {
              3, "\"Connor loan\"" -> 
               DynamicModuleBox[{$CellContext`f$$ = 
                  "Equity:Partners Loan:Connor loan", $CellContext`string$$ = 
                  "", $CellContext`newMap$$ = {}}, 
                 PanelBox[
                  TagBox[
                   GridBox[{{
                    StyleBox["\"String map\"", Bold, StripOnInput -> False], 
                    "\[SpanFromLeft]"}, {"\"Name:\"", 
                    InputFieldBox[
                    Dynamic[$CellContext`f$$], String, Enabled -> False]}, {
                    "\"String:\"", 
                    InputFieldBox[
                    Dynamic[$CellContext`string$$], String]}, {"\"\"", 
                    ButtonBox[
                    "\"Add string\"", 
                    ButtonFunction :> ($CellContext`newMap$$ = 
                    Union[$CellContext`newMap$$, {$CellContext`string$$}]; \
$CellContext`globMap["business"] = 
                    Union[{$CellContext`f$$ -> $CellContext`newMap$$}, 
                    Block[{$CellContext`p, $CellContext`g}, 
                    Monads`comprehend[Monads`Sets, $CellContext`p, 
                    Monads`generator[
                    Pattern[$CellContext`p, Pattern[$CellContext`g, 
                    Blank[]] -> Blank[]], 
                    $CellContext`globMap[
                    "business"]], $CellContext`g != $CellContext`f$$]]]), 
                    BaseStyle -> Small, Appearance -> Automatic, Evaluator -> 
                    Automatic, Method -> "Preemptive"]}, {"\"\"", 
                    ButtonBox[
                    "\"Remove string\"", 
                    ButtonFunction :> ($CellContext`newMap$$ = 
                    Complement[$CellContext`newMap$$, \
{$CellContext`string$$}]; $CellContext`globMap["business"] = 
                    Union[{$CellContext`f$$ -> $CellContext`newMap$$}, 
                    Block[{$CellContext`p, $CellContext`g}, 
                    Monads`comprehend[Monads`Sets, $CellContext`p, 
                    Monads`generator[
                    Pattern[$CellContext`p, Pattern[$CellContext`g, 
                    Blank[]] -> Blank[]], 
                    $CellContext`globMap[
                    "business"]], $CellContext`g != $CellContext`f$$]]]), 
                    BaseStyle -> Small, Appearance -> Automatic, Evaluator -> 
                    Automatic, Method -> "Preemptive"]}, {"\"\"", 
                    ButtonBox[
                    "\"Print local map\"", ButtonFunction :> 
                    Print[$CellContext`f$$ -> $CellContext`newMap$$], 
                    BaseStyle -> Small, Appearance -> Automatic, Evaluator -> 
                    Automatic, Method -> "Preemptive"]}}, AutoDelete -> False,
                     GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                   "Grid"]], DynamicModuleValues :> {}]}, {
              4, "\"Mack loan\"" -> 
               DynamicModuleBox[{$CellContext`f$$ = 
                  "Equity:Partners Loan:Mack loan", $CellContext`string$$ = 
                  "", $CellContext`newMap$$ = {}}, 
                 PanelBox[
                  TagBox[
                   GridBox[{{
                    StyleBox["\"String map\"", Bold, StripOnInput -> False], 
                    "\[SpanFromLeft]"}, {"\"Name:\"", 
                    InputFieldBox[
                    Dynamic[$CellContext`f$$], String, Enabled -> False]}, {
                    "\"String:\"", 
                    InputFieldBox[
                    Dynamic[$CellContext`string$$], String]}, {"\"\"", 
                    ButtonBox[
                    "\"Add string\"", 
                    ButtonFunction :> ($CellContext`newMap$$ = 
                    
                    Union[$CellContext`newMap$$, {$CellContext`string$$}]; \
$CellContext`globMap["business"] = 
                    Union[{$CellContext`f$$ -> $CellContext`newMap$$}, 
                    Block[{$CellContext`p, $CellContext`g}, 
                    Monads`comprehend[Monads`Sets, $CellContext`p, 
                    Monads`generator[
                    Pattern[$CellContext`p, Pattern[$CellContext`g, 
                    Blank[]] -> Blank[]], 
                    $CellContext`globMap[
                    "business"]], $CellContext`g != $CellContext`f$$]]]), 
                    BaseStyle -> Small, Appearance -> Automatic, Evaluator -> 
                    Automatic, Method -> "Preemptive"]}, {"\"\"", 
                    ButtonBox[
                    "\"Remove string\"", 
                    ButtonFunction :> ($CellContext`newMap$$ = 
                    Complement[$CellContext`newMap$$, \
{$CellContext`string$$}]; $CellContext`globMap["business"] = 
                    Union[{$CellContext`f$$ -> $CellContext`newMap$$}, 
                    Block[{$CellContext`p, $CellContext`g}, 
                    Monads`comprehend[Monads`Sets, $CellContext`p, 
                    Monads`generator[
                    Pattern[$CellContext`p, Pattern[$CellContext`g, 
                    Blank[]] -> Blank[]], 
                    $CellContext`globMap[
                    "business"]], $CellContext`g != $CellContext`f$$]]]), 
                    BaseStyle -> Small, Appearance -> Automatic, Evaluator -> 
                    Automatic, Method -> "Preemptive"]}, {"\"\"", 
                    ButtonBox[
                    "\"Print local map\"", ButtonFunction :> 
                    Print[$CellContext`f$$ -> $CellContext`newMap$$], 
                    BaseStyle -> Small, Appearance -> Automatic, Evaluator -> 
                    Automatic, Method -> "Preemptive"]}}, AutoDelete -> False,
                     GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                   "Grid"]], DynamicModuleValues :> {}]}, {
              5, "\"Agatha loan\"" -> 
               DynamicModuleBox[{$CellContext`f$$ = 
                  "Equity:Partners Loan:Agatha loan", $CellContext`string$$ = 
                  "", $CellContext`newMap$$ = {}}, 
                 PanelBox[
                  TagBox[
                   GridBox[{{
                    StyleBox["\"String map\"", Bold, StripOnInput -> False], 
                    "\[SpanFromLeft]"}, {"\"Name:\"", 
                    InputFieldBox[
                    Dynamic[$CellContext`f$$], String, Enabled -> False]}, {
                    "\"String:\"", 
                    InputFieldBox[
                    Dynamic[$CellContext`string$$], String]}, {"\"\"", 
                    ButtonBox[
                    "\"Add string\"", 
                    ButtonFunction :> ($CellContext`newMap$$ = 
                    Union[$CellContext`newMap$$, {$CellContext`string$$}]; \
$CellContext`globMap["business"] = 
                    Union[{$CellContext`f$$ -> $CellContext`newMap$$}, 
                    Block[{$CellContext`p, $CellContext`g}, 
                    Monads`comprehend[Monads`Sets, $CellContext`p, 
                    Monads`generator[
                    Pattern[$CellContext`p, Pattern[$CellContext`g, 
                    Blank[]] -> Blank[]], 
                    $CellContext`globMap[
                    "business"]], $CellContext`g != $CellContext`f$$]]]), 
                    BaseStyle -> Small, Appearance -> Automatic, Evaluator -> 
                    Automatic, Method -> "Preemptive"]}, {"\"\"", 
                    ButtonBox[
                    "\"Remove string\"", 
                    ButtonFunction :> ($CellContext`newMap$$ = 
                    Complement[$CellContext`newMap$$, \
{$CellContext`string$$}]; $CellContext`globMap["business"] = 
                    Union[{$CellContext`f$$ -> $CellContext`newMap$$}, 
                    Block[{$CellContext`p, $CellContext`g}, 
                    Monads`comprehend[Monads`Sets, $CellContext`p, 
                    Monads`generator[
                    Pattern[$CellContext`p, Pattern[$CellContext`g, 
                    Blank[]] -> Blank[]], 
                    $CellContext`globMap[
                    "business"]], $CellContext`g != $CellContext`f$$]]]), 
                    BaseStyle -> Small, Appearance -> Automatic, Evaluator -> 
                    Automatic, Method -> "Preemptive"]}, {"\"\"", 
                    ButtonBox[
                    "\"Print local map\"", ButtonFunction :> 
                    Print[$CellContext`f$$ -> $CellContext`newMap$$], 
                    BaseStyle -> Small, Appearance -> Automatic, Evaluator -> 
                    Automatic, Method -> "Preemptive"]}}, AutoDelete -> False,
                     GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                   "Grid"]], DynamicModuleValues :> {}]}}, 1, 
             ControlPlacement -> {Center, Top}, LabelStyle -> Small]}, {
          2, "\"Capital:\"" -> 
           TabViewBox[{{
              1, "\"Matthew capital\"" -> 
               DynamicModuleBox[{$CellContext`f$$ = 
                  "Equity:Capital:Matthew capital", $CellContext`string$$ = 
                  "", $CellContext`newMap$$ = {}}, 
                 PanelBox[
                  TagBox[
                   GridBox[{{
                    StyleBox["\"String map\"", Bold, StripOnInput -> False], 
                    "\[SpanFromLeft]"}, {"\"Name:\"", 
                    InputFieldBox[
                    Dynamic[$CellContext`f$$], String, Enabled -> False]}, {
                    "\"String:\"", 
                    InputFieldBox[
                    Dynamic[$CellContext`string$$], String]}, {"\"\"", 
                    ButtonBox[
                    "\"Add string\"", 
                    ButtonFunction :> ($CellContext`newMap$$ = 
                    Union[$CellContext`newMap$$, {$CellContext`string$$}]; \
$CellContext`globMap["business"] = 
                    Union[{$CellContext`f$$ -> $CellContext`newMap$$}, 
                    Block[{$CellContext`p, $CellContext`g}, 
                    Monads`comprehend[Monads`Sets, $CellContext`p, 
                    Monads`generator[
                    Pattern[$CellContext`p, Pattern[$CellContext`g, 
                    Blank[]] -> Blank[]], 
                    $CellContext`globMap[
                    "business"]], $CellContext`g != $CellContext`f$$]]]), 
                    BaseStyle -> Small, Appearance -> Automatic, Evaluator -> 
                    Automatic, Method -> "Preemptive"]}, {"\"\"", 
                    ButtonBox[
                    "\"Remove string\"", 
                    ButtonFunction :> ($CellContext`newMap$$ = 
                    Complement[$CellContext`newMap$$, \
{$CellContext`string$$}]; $CellContext`globMap["business"] = 
                    Union[{$CellContext`f$$ -> $CellContext`newMap$$}, 
                    Block[{$CellContext`p, $CellContext`g}, 
                    Monads`comprehend[Monads`Sets, $CellContext`p, 
                    Monads`generator[
                    Pattern[$CellContext`p, Pattern[$CellContext`g, 
                    Blank[]] -> Blank[]], 
                    $CellContext`globMap[
                    "business"]], $CellContext`g != $CellContext`f$$]]]), 
                    BaseStyle -> Small, Appearance -> Automatic, Evaluator -> 
                    Automatic, Method -> "Preemptive"]}, {"\"\"", 
                    ButtonBox[
                    "\"Print local map\"", ButtonFunction :> 
                    Print[$CellContext`f$$ -> $CellContext`newMap$$], 
                    BaseStyle -> Small, Appearance -> Automatic, Evaluator -> 
                    Automatic, Method -> "Preemptive"]}}, AutoDelete -> False,
                     GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                   "Grid"]], DynamicModuleValues :> {}]}, {
              2, "\"Beth capital\"" -> 
               DynamicModuleBox[{$CellContext`f$$ = 
                  "Equity:Capital:Beth capital", $CellContext`string$$ = 
                  "", $CellContext`newMap$$ = {}}, 
                 PanelBox[
                  TagBox[
                   GridBox[{{
                    StyleBox["\"String map\"", Bold, StripOnInput -> False], 
                    "\[SpanFromLeft]"}, {"\"Name:\"", 
                    InputFieldBox[
                    Dynamic[$CellContext`f$$], String, Enabled -> False]}, {
                    "\"String:\"", 
                    InputFieldBox[
                    Dynamic[$CellContext`string$$], String]}, {"\"\"", 
                    ButtonBox[
                    "\"Add string\"", 
                    ButtonFunction :> ($CellContext`newMap$$ = 
                    Union[$CellContext`newMap$$, {$CellContext`string$$}]; \
$CellContext`globMap["business"] = 
                    Union[{$CellContext`f$$ -> $CellContext`newMap$$}, 
                    Block[{$CellContext`p, $CellContext`g}, 
                    Monads`comprehend[Monads`Sets, $CellContext`p, 
                    Monads`generator[
                    Pattern[$CellContext`p, Pattern[$CellContext`g, 
                    Blank[]] -> Blank[]], 
                    $CellContext`globMap[
                    "business"]], $CellContext`g != $CellContext`f$$]]]), 
                    BaseStyle -> Small, Appearance -> Automatic, Evaluator -> 
                    Automatic, Method -> "Preemptive"]}, {"\"\"", 
                    ButtonBox[
                    "\"Remove string\"", 
                    ButtonFunction :> ($CellContext`newMap$$ = 
                    Complement[$CellContext`newMap$$, \
{$CellContext`string$$}]; $CellContext`globMap["business"] = 
                    Union[{$CellContext`f$$ -> $CellContext`newMap$$}, 
                    Block[{$CellContext`p, $CellContext`g}, 
                    Monads`comprehend[Monads`Sets, $CellContext`p, 
                    Monads`generator[
                    Pattern[$CellContext`p, Pattern[$CellContext`g, 
                    Blank[]] -> Blank[]], 
                    $CellContext`globMap[
                    "business"]], $CellContext`g != $CellContext`f$$]]]), 
                    BaseStyle -> Small, Appearance -> Automatic, Evaluator -> 
                    Automatic, Method -> "Preemptive"]}, {"\"\"", 
                    ButtonBox[
                    "\"Print local map\"", ButtonFunction :> 
                    Print[$CellContext`f$$ -> $CellContext`newMap$$], 
                    BaseStyle -> Small, Appearance -> Automatic, Evaluator -> 
                    Automatic, Method -> "Preemptive"]}}, AutoDelete -> False,
                     GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                   "Grid"]], DynamicModuleValues :> {}]}, {
              3, "\"Connor capital\"" -> 
               DynamicModuleBox[{$CellContext`f$$ = 
                  "Equity:Capital:Connor capital", $CellContext`string$$ = 
                  "", $CellContext`newMap$$ = {}}, 
                 PanelBox[
                  TagBox[
                   GridBox[{{
                    StyleBox["\"String map\"", Bold, StripOnInput -> False], 
                    "\[SpanFromLeft]"}, {"\"Name:\"", 
                    InputFieldBox[
                    Dynamic[$CellContext`f$$], String, Enabled -> False]}, {
                    "\"String:\"", 
                    InputFieldBox[
                    Dynamic[$CellContext`string$$], String]}, {"\"\"", 
                    ButtonBox[
                    "\"Add string\"", 
                    ButtonFunction :> ($CellContext`newMap$$ = 
                    Union[$CellContext`newMap$$, {$CellContext`string$$}]; \
$CellContext`globMap["business"] = 
                    Union[{$CellContext`f$$ -> $CellContext`newMap$$}, 
                    Block[{$CellContext`p, $CellContext`g}, 
                    Monads`comprehend[Monads`Sets, $CellContext`p, 
                    Monads`generator[
                    Pattern[$CellContext`p, Pattern[$CellContext`g, 
                    Blank[]] -> Blank[]], 
                    $CellContext`globMap[
                    "business"]], $CellContext`g != $CellContext`f$$]]]), 
                    BaseStyle -> Small, Appearance -> Automatic, Evaluator -> 
                    Automatic, Method -> "Preemptive"]}, {"\"\"", 
                    ButtonBox[
                    "\"Remove string\"", 
                    ButtonFunction :> ($CellContext`newMap$$ = 
                    Complement[$CellContext`newMap$$, \
{$CellContext`string$$}]; $CellContext`globMap["business"] = 
                    Union[{$CellContext`f$$ -> $CellContext`newMap$$}, 
                    Block[{$CellContext`p, $CellContext`g}, 
                    Monads`comprehend[Monads`Sets, $CellContext`p, 
                    Monads`generator[
                    Pattern[$CellContext`p, Pattern[$CellContext`g, 
                    Blank[]] -> Blank[]], 
                    $CellContext`globMap[
                    "business"]], $CellContext`g != $CellContext`f$$]]]), 
                    BaseStyle -> Small, Appearance -> Automatic, Evaluator -> 
                    Automatic, Method -> "Preemptive"]}, {"\"\"", 
                    ButtonBox[
                    "\"Print local map\"", ButtonFunction :> 
                    Print[$CellContext`f$$ -> $CellContext`newMap$$], 
                    BaseStyle -> Small, Appearance -> Automatic, Evaluator -> 
                    Automatic, Method -> "Preemptive"]}}, AutoDelete -> False,
                     GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                   "Grid"]], DynamicModuleValues :> {}]}, {
              4, "\"Mack capital\"" -> 
               DynamicModuleBox[{$CellContext`f$$ = 
                  "Equity:Capital:Mack capital", $CellContext`string$$ = 
                  "", $CellContext`newMap$$ = {}}, 
                 PanelBox[
                  TagBox[
                   GridBox[{{
                    StyleBox["\"String map\"", Bold, StripOnInput -> False], 
                    "\[SpanFromLeft]"}, {"\"Name:\"", 
                    InputFieldBox[
                    Dynamic[$CellContext`f$$], String, Enabled -> False]}, {
                    "\"String:\"", 
                    InputFieldBox[
                    Dynamic[$CellContext`string$$], String]}, {"\"\"", 
                    ButtonBox[
                    "\"Add string\"", 
                    ButtonFunction :> ($CellContext`newMap$$ = 
                    Union[$CellContext`newMap$$, {$CellContext`string$$}]; \
$CellContext`globMap["business"] = 
                    Union[{$CellContext`f$$ -> $CellContext`newMap$$}, 
                    Block[{$CellContext`p, $CellContext`g}, 
                    Monads`comprehend[Monads`Sets, $CellContext`p, 
                    Monads`generator[
                    Pattern[$CellContext`p, Pattern[$CellContext`g, 
                    Blank[]] -> Blank[]], 
                    $CellContext`globMap[
                    "business"]], $CellContext`g != $CellContext`f$$]]]), 
                    BaseStyle -> Small, Appearance -> Automatic, Evaluator -> 
                    Automatic, Method -> "Preemptive"]}, {"\"\"", 
                    ButtonBox[
                    "\"Remove string\"", 
                    ButtonFunction :> ($CellContext`newMap$$ = 
                    Complement[$CellContext`newMap$$, \
{$CellContext`string$$}]; $CellContext`globMap["business"] = 
                    Union[{$CellContext`f$$ -> $CellContext`newMap$$}, 
                    Block[{$CellContext`p, $CellContext`g}, 
                    Monads`comprehend[Monads`Sets, $CellContext`p, 
                    Monads`generator[
                    Pattern[$CellContext`p, Pattern[$CellContext`g, 
                    Blank[]] -> Blank[]], 
                    $CellContext`globMap[
                    "business"]], $CellContext`g != $CellContext`f$$]]]), 
                    BaseStyle -> Small, Appearance -> Automatic, Evaluator -> 
                    Automatic, Method -> "Preemptive"]}, {"\"\"", 
                    ButtonBox[
                    "\"Print local map\"", ButtonFunction :> 
                    Print[$CellContext`f$$ -> $CellContext`newMap$$], 
                    BaseStyle -> Small, Appearance -> Automatic, Evaluator -> 
                    Automatic, Method -> "Preemptive"]}}, AutoDelete -> False,
                     GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                   "Grid"]], DynamicModuleValues :> {}]}, {
              5, "\"Agata capital\"" -> 
               DynamicModuleBox[{$CellContext`f$$ = 
                  "Equity:Capital:Agata capital", $CellContext`string$$ = 
                  "", $CellContext`newMap$$ = {}}, 
                 PanelBox[
                  TagBox[
                   GridBox[{{
                    StyleBox["\"String map\"", Bold, StripOnInput -> False], 
                    "\[SpanFromLeft]"}, {"\"Name:\"", 
                    InputFieldBox[
                    Dynamic[$CellContext`f$$], String, Enabled -> False]}, {
                    "\"String:\"", 
                    InputFieldBox[
                    Dynamic[$CellContext`string$$], String]}, {"\"\"", 
                    ButtonBox[
                    "\"Add string\"", 
                    ButtonFunction :> ($CellContext`newMap$$ = 
                    Union[$CellContext`newMap$$, {$CellContext`string$$}]; \
$CellContext`globMap["business"] = 
                    Union[{$CellContext`f$$ -> $CellContext`newMap$$}, 
                    Block[{$CellContext`p, $CellContext`g}, 
                    Monads`comprehend[Monads`Sets, $CellContext`p, 
                    Monads`generator[
                    Pattern[$CellContext`p, Pattern[$CellContext`g, 
                    Blank[]] -> Blank[]], 
                    $CellContext`globMap[
                    "business"]], $CellContext`g != $CellContext`f$$]]]), 
                    BaseStyle -> Small, Appearance -> Automatic, Evaluator -> 
                    Automatic, Method -> "Preemptive"]}, {"\"\"", 
                    ButtonBox[
                    "\"Remove string\"", 
                    ButtonFunction :> ($CellContext`newMap$$ = 
                    Complement[$CellContext`newMap$$, \
{$CellContext`string$$}]; $CellContext`globMap["business"] = 
                    Union[{$CellContext`f$$ -> $CellContext`newMap$$}, 
                    Block[{$CellContext`p, $CellContext`g}, 
                    Monads`comprehend[Monads`Sets, $CellContext`p, 
                    Monads`generator[
                    Pattern[$CellContext`p, Pattern[$CellContext`g, 
                    Blank[]] -> Blank[]], 
                    $CellContext`globMap[
                    "business"]], $CellContext`g != $CellContext`f$$]]]), 
                    BaseStyle -> Small, Appearance -> Automatic, Evaluator -> 
                    Automatic, Method -> "Preemptive"]}, {"\"\"", 
                    ButtonBox[
                    "\"Print local map\"", ButtonFunction :> 
                    Print[$CellContext`f$$ -> $CellContext`newMap$$], 
                    BaseStyle -> Small, Appearance -> Automatic, Evaluator -> 
                    Automatic, Method -> "Preemptive"]}}, AutoDelete -> False,
                     GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                   "Grid"]], DynamicModuleValues :> {}]}}, 1, 
             ControlPlacement -> {Center, Top}, LabelStyle -> Small]}, {
          3, "\"Opening Balances\"" -> 
           DynamicModuleBox[{$CellContext`f$$ = 
              "Equity:Opening Balances", $CellContext`string$$ = 
              "", $CellContext`newMap$$ = {}}, 
             PanelBox[
              TagBox[
               GridBox[{{
                  StyleBox["\"String map\"", Bold, StripOnInput -> False], 
                  "\[SpanFromLeft]"}, {"\"Name:\"", 
                  InputFieldBox[
                   Dynamic[$CellContext`f$$], String, Enabled -> False]}, {
                 "\"String:\"", 
                  InputFieldBox[
                   Dynamic[$CellContext`string$$], String]}, {"\"\"", 
                  ButtonBox[
                  "\"Add string\"", 
                   ButtonFunction :> ($CellContext`newMap$$ = 
                    Union[$CellContext`newMap$$, {$CellContext`string$$}]; \
$CellContext`globMap["business"] = 
                    Union[{$CellContext`f$$ -> $CellContext`newMap$$}, 
                    Block[{$CellContext`p, $CellContext`g}, 
                    Monads`comprehend[Monads`Sets, $CellContext`p, 
                    Monads`generator[
                    Pattern[$CellContext`p, Pattern[$CellContext`g, 
                    Blank[]] -> Blank[]], 
                    $CellContext`globMap[
                    "business"]], $CellContext`g != $CellContext`f$$]]]), 
                   BaseStyle -> Small, Appearance -> Automatic, Evaluator -> 
                   Automatic, Method -> "Preemptive"]}, {"\"\"", 
                  ButtonBox[
                  "\"Remove string\"", 
                   ButtonFunction :> ($CellContext`newMap$$ = 
                    Complement[$CellContext`newMap$$, \
{$CellContext`string$$}]; $CellContext`globMap["business"] = 
                    Union[{$CellContext`f$$ -> $CellContext`newMap$$}, 
                    Block[{$CellContext`p, $CellContext`g}, 
                    Monads`comprehend[Monads`Sets, $CellContext`p, 
                    Monads`generator[
                    Pattern[$CellContext`p, Pattern[$CellContext`g, 
                    Blank[]] -> Blank[]], 
                    $CellContext`globMap[
                    "business"]], $CellContext`g != $CellContext`f$$]]]), 
                   BaseStyle -> Small, Appearance -> Automatic, Evaluator -> 
                   Automatic, Method -> "Preemptive"]}, {"\"\"", 
                  ButtonBox[
                  "\"Print local map\"", ButtonFunction :> 
                   Print[$CellContext`f$$ -> $CellContext`newMap$$], 
                   BaseStyle -> Small, Appearance -> Automatic, Evaluator -> 
                   Automatic, Method -> "Preemptive"]}}, AutoDelete -> False, 
                GridBoxItemSize -> {
                 "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
               "Grid"]], DynamicModuleValues :> {}]}}, 1, 
         ControlPlacement -> {Center, Top}, LabelStyle -> Small]}, {
      5, "\"Income:\"" -> 
       TabViewBox[{{
          1, "\"Interest\"" -> 
           DynamicModuleBox[{$CellContext`f$$ = 
              "Income:Interest", $CellContext`string$$ = 
              "", $CellContext`newMap$$ = {"Bank Credit Interest"}}, 
             PanelBox[
              TagBox[
               GridBox[{{
                  StyleBox["\"String map\"", Bold, StripOnInput -> False], 
                  "\[SpanFromLeft]"}, {"\"Name:\"", 
                  InputFieldBox[
                   Dynamic[$CellContext`f$$], String, Enabled -> False]}, {
                 "\"String:\"", 
                  InputFieldBox[
                   Dynamic[$CellContext`string$$], String]}, {"\"\"", 
                  ButtonBox[
                  "\"Add string\"", 
                   ButtonFunction :> ($CellContext`newMap$$ = 
                    Union[$CellContext`newMap$$, {$CellContext`string$$}]; \
$CellContext`globMap["business"] = 
                    Union[{$CellContext`f$$ -> $CellContext`newMap$$}, 
                    Block[{$CellContext`p, $CellContext`g}, 
                    Monads`comprehend[Monads`Sets, $CellContext`p, 
                    Monads`generator[
                    Pattern[$CellContext`p, Pattern[$CellContext`g, 
                    Blank[]] -> Blank[]], 
                    $CellContext`globMap[
                    "business"]], $CellContext`g != $CellContext`f$$]]]), 
                   BaseStyle -> Small, Appearance -> Automatic, Evaluator -> 
                   Automatic, Method -> "Preemptive"]}, {"\"\"", 
                  ButtonBox[
                  "\"Remove string\"", 
                   ButtonFunction :> ($CellContext`newMap$$ = 
                    Complement[$CellContext`newMap$$, \
{$CellContext`string$$}]; $CellContext`globMap["business"] = 
                    Union[{$CellContext`f$$ -> $CellContext`newMap$$}, 
                    Block[{$CellContext`p, $CellContext`g}, 
                    Monads`comprehend[Monads`Sets, $CellContext`p, 
                    Monads`generator[
                    Pattern[$CellContext`p, Pattern[$CellContext`g, 
                    Blank[]] -> Blank[]], 
                    $CellContext`globMap[
                    "business"]], $CellContext`g != $CellContext`f$$]]]), 
                   BaseStyle -> Small, Appearance -> Automatic, Evaluator -> 
                   Automatic, Method -> "Preemptive"]}, {"\"\"", 
                  ButtonBox[
                  "\"Print local map\"", ButtonFunction :> 
                   Print[$CellContext`f$$ -> $CellContext`newMap$$], 
                   BaseStyle -> Small, Appearance -> Automatic, Evaluator -> 
                   Automatic, Method -> "Preemptive"]}}, AutoDelete -> False, 
                GridBoxItemSize -> {
                 "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
               "Grid"]], DynamicModuleValues :> {}]}, {
          2, "\"Sales:\"" -> 
           TabViewBox[{{
              1, "\"Food:\"" -> 
               TabViewBox[{{
                  1, "\"Eggs and meat\"" -> 
                   DynamicModuleBox[{$CellContext`f$$ = 
                    "Income:Sales:Food:Eggs and meat", $CellContext`string$$ = 
                    "", $CellContext`newMap$$ = {}}, 
                    PanelBox[
                    TagBox[
                    GridBox[{{
                    StyleBox["\"String map\"", Bold, StripOnInput -> False], 
                    "\[SpanFromLeft]"}, {"\"Name:\"", 
                    InputFieldBox[
                    Dynamic[$CellContext`f$$], String, Enabled -> False]}, {
                    "\"String:\"", 
                    InputFieldBox[
                    Dynamic[$CellContext`string$$], String]}, {"\"\"", 
                    ButtonBox[
                    "\"Add string\"", 
                    ButtonFunction :> ($CellContext`newMap$$ = 
                    Union[$CellContext`newMap$$, {$CellContext`string$$}]; \
$CellContext`globMap["business"] = 
                    Union[{$CellContext`f$$ -> $CellContext`newMap$$}, 
                    Block[{$CellContext`p, $CellContext`g}, 
                    Monads`comprehend[Monads`Sets, $CellContext`p, 
                    Monads`generator[
                    Pattern[$CellContext`p, Pattern[$CellContext`g, 
                    Blank[]] -> Blank[]], 
                    $CellContext`globMap[
                    "business"]], $CellContext`g != $CellContext`f$$]]]), 
                    BaseStyle -> Small, Appearance -> Automatic, Evaluator -> 
                    Automatic, Method -> "Preemptive"]}, {"\"\"", 
                    ButtonBox[
                    "\"Remove string\"", 
                    ButtonFunction :> ($CellContext`newMap$$ = 
                    Complement[$CellContext`newMap$$, \
{$CellContext`string$$}]; $CellContext`globMap["business"] = 
                    Union[{$CellContext`f$$ -> $CellContext`newMap$$}, 
                    Block[{$CellContext`p, $CellContext`g}, 
                    Monads`comprehend[Monads`Sets, $CellContext`p, 
                    Monads`generator[
                    Pattern[$CellContext`p, Pattern[$CellContext`g, 
                    Blank[]] -> Blank[]], 
                    $CellContext`globMap[
                    "business"]], $CellContext`g != $CellContext`f$$]]]), 
                    BaseStyle -> Small, Appearance -> Automatic, Evaluator -> 
                    Automatic, Method -> "Preemptive"]}, {"\"\"", 
                    ButtonBox[
                    "\"Print local map\"", ButtonFunction :> 
                    Print[$CellContext`f$$ -> $CellContext`newMap$$], 
                    BaseStyle -> Small, Appearance -> Automatic, Evaluator -> 
                    Automatic, Method -> "Preemptive"]}}, AutoDelete -> False,
                     GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Grid"]], DynamicModuleValues :> {}]}, {
                  2, "\"Fruit and veg\"" -> 
                   DynamicModuleBox[{$CellContext`f$$ = 
                    "Income:Sales:Food:Fruit and veg", $CellContext`string$$ = 
                    "", $CellContext`newMap$$ = {
                    "DETOX RETREATS LTD", "Faster Payment SOMEONE F & C", 
                    "Faster Payment B Person", 
                    "Faster Payment THRIVE CAFE RETAIL", 
                    "National Giro Credit"}}, 
                    PanelBox[
                    TagBox[
                    GridBox[{{
                    StyleBox["\"String map\"", Bold, StripOnInput -> False], 
                    "\[SpanFromLeft]"}, {"\"Name:\"", 
                    InputFieldBox[
                    Dynamic[$CellContext`f$$], String, Enabled -> False]}, {
                    "\"String:\"", 
                    InputFieldBox[
                    Dynamic[$CellContext`string$$], String]}, {"\"\"", 
                    ButtonBox[
                    "\"Add string\"", 
                    ButtonFunction :> ($CellContext`newMap$$ = 
                    Union[$CellContext`newMap$$, {$CellContext`string$$}]; \
$CellContext`globMap["business"] = 
                    Union[{$CellContext`f$$ -> $CellContext`newMap$$}, 
                    Block[{$CellContext`p, $CellContext`g}, 
                    Monads`comprehend[Monads`Sets, $CellContext`p, 
                    Monads`generator[
                    Pattern[$CellContext`p, Pattern[$CellContext`g, 
                    Blank[]] -> Blank[]], 
                    $CellContext`globMap[
                    "business"]], $CellContext`g != $CellContext`f$$]]]), 
                    BaseStyle -> Small, Appearance -> Automatic, Evaluator -> 
                    Automatic, Method -> "Preemptive"]}, {"\"\"", 
                    ButtonBox[
                    "\"Remove string\"", 
                    ButtonFunction :> ($CellContext`newMap$$ = 
                    Complement[$CellContext`newMap$$, \
{$CellContext`string$$}]; $CellContext`globMap["business"] = 
                    Union[{$CellContext`f$$ -> $CellContext`newMap$$}, 
                    Block[{$CellContext`p, $CellContext`g}, 
                    Monads`comprehend[Monads`Sets, $CellContext`p, 
                    Monads`generator[
                    Pattern[$CellContext`p, Pattern[$CellContext`g, 
                    Blank[]] -> Blank[]], 
                    $CellContext`globMap[
                    "business"]], $CellContext`g != $CellContext`f$$]]]), 
                    BaseStyle -> Small, Appearance -> Automatic, Evaluator -> 
                    Automatic, Method -> "Preemptive"]}, {"\"\"", 
                    ButtonBox[
                    "\"Print local map\"", ButtonFunction :> 
                    Print[$CellContext`f$$ -> $CellContext`newMap$$], 
                    BaseStyle -> Small, Appearance -> Automatic, Evaluator -> 
                    Automatic, Method -> "Preemptive"]}}, AutoDelete -> False,
                     GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Grid"]], DynamicModuleValues :> {}]}}, 1, 
                 ControlPlacement -> {Center, Top}, LabelStyle -> Small]}, {
              2, "\"Services\"" -> 
               DynamicModuleBox[{$CellContext`f$$ = 
                  "Income:Sales:Services", $CellContext`string$$ = 
                  "", $CellContext`newMap$$ = {}}, 
                 PanelBox[
                  TagBox[
                   GridBox[{{
                    StyleBox["\"String map\"", Bold, StripOnInput -> False], 
                    "\[SpanFromLeft]"}, {"\"Name:\"", 
                    InputFieldBox[
                    Dynamic[$CellContext`f$$], String, Enabled -> False]}, {
                    "\"String:\"", 
                    InputFieldBox[
                    Dynamic[$CellContext`string$$], String]}, {"\"\"", 
                    ButtonBox[
                    "\"Add string\"", 
                    ButtonFunction :> ($CellContext`newMap$$ = 
                    Union[$CellContext`newMap$$, {$CellContext`string$$}]; \
$CellContext`globMap["business"] = 
                    Union[{$CellContext`f$$ -> $CellContext`newMap$$}, 
                    Block[{$CellContext`p, $CellContext`g}, 
                    Monads`comprehend[Monads`Sets, $CellContext`p, 
                    Monads`generator[
                    Pattern[$CellContext`p, Pattern[$CellContext`g, 
                    Blank[]] -> Blank[]], 
                    $CellContext`globMap[
                    "business"]], $CellContext`g != $CellContext`f$$]]]), 
                    BaseStyle -> Small, Appearance -> Automatic, Evaluator -> 
                    Automatic, Method -> "Preemptive"]}, {"\"\"", 
                    ButtonBox[
                    "\"Remove string\"", 
                    ButtonFunction :> ($CellContext`newMap$$ = 
                    Complement[$CellContext`newMap$$, \
{$CellContext`string$$}]; $CellContext`globMap["business"] = 
                    Union[{$CellContext`f$$ -> $CellContext`newMap$$}, 
                    Block[{$CellContext`p, $CellContext`g}, 
                    Monads`comprehend[Monads`Sets, $CellContext`p, 
                    Monads`generator[
                    Pattern[$CellContext`p, Pattern[$CellContext`g, 
                    Blank[]] -> Blank[]], 
                    $CellContext`globMap[
                    "business"]], $CellContext`g != $CellContext`f$$]]]), 
                    BaseStyle -> Small, Appearance -> Automatic, Evaluator -> 
                    Automatic, Method -> "Preemptive"]}, {"\"\"", 
                    ButtonBox[
                    "\"Print local map\"", ButtonFunction :> 
                    Print[$CellContext`f$$ -> $CellContext`newMap$$], 
                    BaseStyle -> Small, Appearance -> Automatic, Evaluator -> 
                    Automatic, Method -> "Preemptive"]}}, AutoDelete -> False,
                     GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                   "Grid"]], DynamicModuleValues :> {}]}, {
              3, "\"Grazing\"" -> 
               DynamicModuleBox[{$CellContext`f$$ = 
                  "Income:Sales:Grazing", $CellContext`string$$ = 
                  "", $CellContext`newMap$$ = {}}, 
                 PanelBox[
                  TagBox[
                   GridBox[{{
                    StyleBox["\"String map\"", Bold, StripOnInput -> False], 
                    "\[SpanFromLeft]"}, {"\"Name:\"", 
                    InputFieldBox[
                    Dynamic[$CellContext`f$$], String, Enabled -> False]}, {
                    "\"String:\"", 
                    InputFieldBox[
                    Dynamic[$CellContext`string$$], String]}, {"\"\"", 
                    ButtonBox[
                    "\"Add string\"", 
                    ButtonFunction :> ($CellContext`newMap$$ = 
                    Union[$CellContext`newMap$$, {$CellContext`string$$}]; \
$CellContext`globMap["business"] = 
                    Union[{$CellContext`f$$ -> $CellContext`newMap$$}, 
                    Block[{$CellContext`p, $CellContext`g}, 
                    Monads`comprehend[Monads`Sets, $CellContext`p, 
                    Monads`generator[
                    Pattern[$CellContext`p, Pattern[$CellContext`g, 
                    Blank[]] -> Blank[]], 
                    $CellContext`globMap[
                    "business"]], $CellContext`g != $CellContext`f$$]]]), 
                    BaseStyle -> Small, Appearance -> Automatic, Evaluator -> 
                    Automatic, Method -> "Preemptive"]}, {"\"\"", 
                    ButtonBox[
                    "\"Remove string\"", 
                    ButtonFunction :> ($CellContext`newMap$$ = 
                    Complement[$CellContext`newMap$$, \
{$CellContext`string$$}]; $CellContext`globMap["business"] = 
                    Union[{$CellContext`f$$ -> $CellContext`newMap$$}, 
                    Block[{$CellContext`p, $CellContext`g}, 
                    Monads`comprehend[Monads`Sets, $CellContext`p, 
                    Monads`generator[
                    Pattern[$CellContext`p, Pattern[$CellContext`g, 
                    Blank[]] -> Blank[]], 
                    $CellContext`globMap[
                    "business"]], $CellContext`g != $CellContext`f$$]]]), 
                    BaseStyle -> Small, Appearance -> Automatic, Evaluator -> 
                    Automatic, Method -> "Preemptive"]}, {"\"\"", 
                    ButtonBox[
                    "\"Print local map\"", ButtonFunction :> 
                    Print[$CellContext`f$$ -> $CellContext`newMap$$], 
                    BaseStyle -> Small, Appearance -> Automatic, Evaluator -> 
                    Automatic, Method -> "Preemptive"]}}, AutoDelete -> False,
                     GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                   "Grid"]], DynamicModuleValues :> {}]}}, 1, 
             ControlPlacement -> {Center, Top}, LabelStyle -> Small]}, {
          3, "\"Other Income\"" -> 
           DynamicModuleBox[{$CellContext`f$$ = 
              "Income:Other Income", $CellContext`string$$ = 
              "", $CellContext`newMap$$ = {
               "ANNUAL BONUS", "National Giro Credit"}}, 
             PanelBox[
              TagBox[
               GridBox[{{
                  StyleBox["\"String map\"", Bold, StripOnInput -> False], 
                  "\[SpanFromLeft]"}, {"\"Name:\"", 
                  InputFieldBox[
                   Dynamic[$CellContext`f$$], String, Enabled -> False]}, {
                 "\"String:\"", 
                  InputFieldBox[
                   Dynamic[$CellContext`string$$], String]}, {"\"\"", 
                  ButtonBox[
                  "\"Add string\"", 
                   ButtonFunction :> ($CellContext`newMap$$ = 
                    Union[$CellContext`newMap$$, {$CellContext`string$$}]; \
$CellContext`globMap["business"] = 
                    Union[{$CellContext`f$$ -> $CellContext`newMap$$}, 
                    Block[{$CellContext`p, $CellContext`g}, 
                    Monads`comprehend[Monads`Sets, $CellContext`p, 
                    Monads`generator[
                    Pattern[$CellContext`p, Pattern[$CellContext`g, 
                    Blank[]] -> Blank[]], 
                    $CellContext`globMap[
                    "business"]], $CellContext`g != $CellContext`f$$]]]), 
                   BaseStyle -> Small, Appearance -> Automatic, Evaluator -> 
                   Automatic, Method -> "Preemptive"]}, {"\"\"", 
                  ButtonBox[
                  "\"Remove string\"", 
                   ButtonFunction :> ($CellContext`newMap$$ = 
                    Complement[$CellContext`newMap$$, \
{$CellContext`string$$}]; $CellContext`globMap["business"] = 
                    Union[{$CellContext`f$$ -> $CellContext`newMap$$}, 
                    Block[{$CellContext`p, $CellContext`g}, 
                    Monads`comprehend[Monads`Sets, $CellContext`p, 
                    Monads`generator[
                    Pattern[$CellContext`p, Pattern[$CellContext`g, 
                    Blank[]] -> Blank[]], 
                    $CellContext`globMap[
                    "business"]], $CellContext`g != $CellContext`f$$]]]), 
                   BaseStyle -> Small, Appearance -> Automatic, Evaluator -> 
                   Automatic, Method -> "Preemptive"]}, {"\"\"", 
                  ButtonBox[
                  "\"Print local map\"", ButtonFunction :> 
                   Print[$CellContext`f$$ -> $CellContext`newMap$$], 
                   BaseStyle -> Small, Appearance -> Automatic, Evaluator -> 
                   Automatic, Method -> "Preemptive"]}}, AutoDelete -> False, 
                GridBoxItemSize -> {
                 "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
               "Grid"]], DynamicModuleValues :> {}]}}, 1, 
         ControlPlacement -> {Center, Top}, LabelStyle -> Small]}, {
      6, "\"Expenses in VAT:\"" -> TagBox[
         DynamicModuleBox[{Typeset`var$$ = 1}, 
          InterpretationBox[
           
           DynamicModuleBox[{
            DynamicDump`width$$ = 10, DynamicDump`jump$$ = 10, 
             DynamicDump`tabdata$$ = {{
               1, "\"Bank Service Charge\"" -> 
                DynamicModuleBox[{$CellContext`f$$ = 
                   "Expenses in VAT:Bank Service Charge", \
$CellContext`string$$ = "", $CellContext`newMap$$ = {}}, 
                  PanelBox[
                   TagBox[
                    GridBox[{{
                    StyleBox["\"String map\"", Bold, StripOnInput -> False], 
                    "\[SpanFromLeft]"}, {"\"Name:\"", 
                    InputFieldBox[
                    Dynamic[$CellContext`f$$], String, Enabled -> False]}, {
                    "\"String:\"", 
                    InputFieldBox[
                    Dynamic[$CellContext`string$$], String]}, {"\"\"", 
                    ButtonBox[
                    "\"Add string\"", 
                    ButtonFunction :> ($CellContext`newMap$$ = 
                    Union[$CellContext`newMap$$, {$CellContext`string$$}]; \
$CellContext`globMap["business"] = 
                    Union[{$CellContext`f$$ -> $CellContext`newMap$$}, 
                    Block[{$CellContext`p, $CellContext`g}, 
                    Monads`comprehend[Monads`Sets, $CellContext`p, 
                    Monads`generator[
                    Pattern[$CellContext`p, Pattern[$CellContext`g, 
                    Blank[]] -> Blank[]], 
                    $CellContext`globMap[
                    "business"]], $CellContext`g != $CellContext`f$$]]]), 
                    BaseStyle -> Small, Appearance -> Automatic, Evaluator -> 
                    Automatic, Method -> "Preemptive"]}, {"\"\"", 
                    ButtonBox[
                    "\"Remove string\"", 
                    ButtonFunction :> ($CellContext`newMap$$ = 
                    Complement[$CellContext`newMap$$, \
{$CellContext`string$$}]; $CellContext`globMap["business"] = 
                    Union[{$CellContext`f$$ -> $CellContext`newMap$$}, 
                    Block[{$CellContext`p, $CellContext`g}, 
                    Monads`comprehend[Monads`Sets, $CellContext`p, 
                    Monads`generator[
                    Pattern[$CellContext`p, Pattern[$CellContext`g, 
                    Blank[]] -> Blank[]], 
                    $CellContext`globMap[
                    "business"]], $CellContext`g != $CellContext`f$$]]]), 
                    BaseStyle -> Small, Appearance -> Automatic, Evaluator -> 
                    Automatic, Method -> "Preemptive"]}, {"\"\"", 
                    ButtonBox[
                    "\"Print local map\"", ButtonFunction :> 
                    Print[$CellContext`f$$ -> $CellContext`newMap$$], 
                    BaseStyle -> Small, Appearance -> Automatic, Evaluator -> 
                    Automatic, Method -> "Preemptive"]}}, AutoDelete -> False,
                     GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Grid"]], DynamicModuleValues :> {}]}, {
               2, "\"Dues and Subscriptions\"" -> 
                DynamicModuleBox[{$CellContext`f$$ = 
                   "Expenses in VAT:Dues and Subscriptions", \
$CellContext`string$$ = 
                   "", $CellContext`newMap$$ = {"COMPANIES HSE", "FWAG"}}, 
                  PanelBox[
                   TagBox[
                    GridBox[{{
                    StyleBox["\"String map\"", Bold, StripOnInput -> False], 
                    "\[SpanFromLeft]"}, {"\"Name:\"", 
                    InputFieldBox[
                    Dynamic[$CellContext`f$$], String, Enabled -> False]}, {
                    "\"String:\"", 
                    InputFieldBox[
                    Dynamic[$CellContext`string$$], String]}, {"\"\"", 
                    ButtonBox[
                    "\"Add string\"", 
                    ButtonFunction :> ($CellContext`newMap$$ = 
                    Union[$CellContext`newMap$$, {$CellContext`string$$}]; \
$CellContext`globMap["business"] = 
                    Union[{$CellContext`f$$ -> $CellContext`newMap$$}, 
                    Block[{$CellContext`p, $CellContext`g}, 
                    Monads`comprehend[Monads`Sets, $CellContext`p, 
                    Monads`generator[
                    Pattern[$CellContext`p, Pattern[$CellContext`g, 
                    Blank[]] -> Blank[]], 
                    $CellContext`globMap[
                    "business"]], $CellContext`g != $CellContext`f$$]]]), 
                    BaseStyle -> Small, Appearance -> Automatic, Evaluator -> 
                    Automatic, Method -> "Preemptive"]}, {"\"\"", 
                    ButtonBox[
                    "\"Remove string\"", 
                    ButtonFunction :> ($CellContext`newMap$$ = 
                    Complement[$CellContext`newMap$$, \
{$CellContext`string$$}]; $CellContext`globMap["business"] = 
                    Union[{$CellContext`f$$ -> $CellContext`newMap$$}, 
                    Block[{$CellContext`p, $CellContext`g}, 
                    Monads`comprehend[Monads`Sets, $CellContext`p, 
                    Monads`generator[
                    Pattern[$CellContext`p, Pattern[$CellContext`g, 
                    Blank[]] -> Blank[]], 
                    $CellContext`globMap[
                    "business"]], $CellContext`g != $CellContext`f$$]]]), 
                    BaseStyle -> Small, Appearance -> Automatic, Evaluator -> 
                    Automatic, Method -> "Preemptive"]}, {"\"\"", 
                    ButtonBox[
                    "\"Print local map\"", ButtonFunction :> 
                    Print[$CellContext`f$$ -> $CellContext`newMap$$], 
                    BaseStyle -> Small, Appearance -> Automatic, Evaluator -> 
                    Automatic, Method -> "Preemptive"]}}, AutoDelete -> False,
                     GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Grid"]], DynamicModuleValues :> {}]}, {
               3, "\"Miscellaneous\"" -> 
                DynamicModuleBox[{$CellContext`f$$ = 
                   "Expenses in VAT:Miscellaneous", $CellContext`string$$ = 
                   "", $CellContext`newMap$$ = {}}, 
                  PanelBox[
                   TagBox[
                    GridBox[{{
                    StyleBox["\"String map\"", Bold, StripOnInput -> False], 
                    "\[SpanFromLeft]"}, {"\"Name:\"", 
                    InputFieldBox[
                    Dynamic[$CellContext`f$$], String, Enabled -> False]}, {
                    "\"String:\"", 
                    InputFieldBox[
                    Dynamic[$CellContext`string$$], String]}, {"\"\"", 
                    ButtonBox[
                    "\"Add string\"", 
                    ButtonFunction :> ($CellContext`newMap$$ = 
                    Union[$CellContext`newMap$$, {$CellContext`string$$}]; \
$CellContext`globMap["business"] = 
                    Union[{$CellContext`f$$ -> $CellContext`newMap$$}, 
                    Block[{$CellContext`p, $CellContext`g}, 
                    Monads`comprehend[Monads`Sets, $CellContext`p, 
                    Monads`generator[
                    Pattern[$CellContext`p, Pattern[$CellContext`g, 
                    Blank[]] -> Blank[]], 
                    $CellContext`globMap[
                    "business"]], $CellContext`g != $CellContext`f$$]]]), 
                    BaseStyle -> Small, Appearance -> Automatic, Evaluator -> 
                    Automatic, Method -> "Preemptive"]}, {"\"\"", 
                    ButtonBox[
                    "\"Remove string\"", 
                    ButtonFunction :> ($CellContext`newMap$$ = 
                    Complement[$CellContext`newMap$$, \
{$CellContext`string$$}]; $CellContext`globMap["business"] = 
                    Union[{$CellContext`f$$ -> $CellContext`newMap$$}, 
                    Block[{$CellContext`p, $CellContext`g}, 
                    Monads`comprehend[Monads`Sets, $CellContext`p, 
                    Monads`generator[
                    Pattern[$CellContext`p, Pattern[$CellContext`g, 
                    Blank[]] -> Blank[]], 
                    $CellContext`globMap[
                    "business"]], $CellContext`g != $CellContext`f$$]]]), 
                    BaseStyle -> Small, Appearance -> Automatic, Evaluator -> 
                    Automatic, Method -> "Preemptive"]}, {"\"\"", 
                    ButtonBox[
                    "\"Print local map\"", ButtonFunction :> 
                    Print[$CellContext`f$$ -> $CellContext`newMap$$], 
                    BaseStyle -> Small, Appearance -> Automatic, Evaluator -> 
                    Automatic, Method -> "Preemptive"]}}, AutoDelete -> False,
                     GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Grid"]], DynamicModuleValues :> {}]}, {
               4, "\"Office Supplies\"" -> 
                DynamicModuleBox[{$CellContext`f$$ = 
                   "Expenses in VAT:Office Supplies", $CellContext`string$$ = 
                   "", $CellContext`newMap$$ = {}}, 
                  PanelBox[
                   TagBox[
                    GridBox[{{
                    StyleBox["\"String map\"", Bold, StripOnInput -> False], 
                    "\[SpanFromLeft]"}, {"\"Name:\"", 
                    InputFieldBox[
                    Dynamic[$CellContext`f$$], String, Enabled -> False]}, {
                    "\"String:\"", 
                    InputFieldBox[
                    Dynamic[$CellContext`string$$], String]}, {"\"\"", 
                    ButtonBox[
                    "\"Add string\"", 
                    ButtonFunction :> ($CellContext`newMap$$ = 
                    Union[$CellContext`newMap$$, {$CellContext`string$$}]; \
$CellContext`globMap["business"] = 
                    Union[{$CellContext`f$$ -> $CellContext`newMap$$}, 
                    Block[{$CellContext`p, $CellContext`g}, 
                    Monads`comprehend[Monads`Sets, $CellContext`p, 
                    Monads`generator[
                    Pattern[$CellContext`p, Pattern[$CellContext`g, 
                    Blank[]] -> Blank[]], 
                    $CellContext`globMap[
                    "business"]], $CellContext`g != $CellContext`f$$]]]), 
                    BaseStyle -> Small, Appearance -> Automatic, Evaluator -> 
                    Automatic, Method -> "Preemptive"]}, {"\"\"", 
                    ButtonBox[
                    "\"Remove string\"", 
                    ButtonFunction :> ($CellContext`newMap$$ = 
                    Complement[$CellContext`newMap$$, \
{$CellContext`string$$}]; $CellContext`globMap["business"] = 
                    Union[{$CellContext`f$$ -> $CellContext`newMap$$}, 
                    Block[{$CellContext`p, $CellContext`g}, 
                    Monads`comprehend[Monads`Sets, $CellContext`p, 
                    Monads`generator[
                    Pattern[$CellContext`p, Pattern[$CellContext`g, 
                    Blank[]] -> Blank[]], 
                    $CellContext`globMap[
                    "business"]], $CellContext`g != $CellContext`f$$]]]), 
                    BaseStyle -> Small, Appearance -> Automatic, Evaluator -> 
                    Automatic, Method -> "Preemptive"]}, {"\"\"", 
                    ButtonBox[
                    "\"Print local map\"", ButtonFunction :> 
                    Print[$CellContext`f$$ -> $CellContext`newMap$$], 
                    BaseStyle -> Small, Appearance -> Automatic, Evaluator -> 
                    Automatic, Method -> "Preemptive"]}}, AutoDelete -> False,
                     GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Grid"]], DynamicModuleValues :> {}]}, {
               5, "\"Production\"" -> 
                DynamicModuleBox[{$CellContext`f$$ = 
                   "Expenses in VAT:Production", $CellContext`string$$ = 
                   "", $CellContext`newMap$$ = {"CORNWALL FARM"}}, 
                  PanelBox[
                   TagBox[
                    GridBox[{{
                    StyleBox["\"String map\"", Bold, StripOnInput -> False], 
                    "\[SpanFromLeft]"}, {"\"Name:\"", 
                    InputFieldBox[
                    Dynamic[$CellContext`f$$], String, Enabled -> False]}, {
                    "\"String:\"", 
                    InputFieldBox[
                    Dynamic[$CellContext`string$$], String]}, {"\"\"", 
                    ButtonBox[
                    "\"Add string\"", 
                    ButtonFunction :> ($CellContext`newMap$$ = 
                    Union[$CellContext`newMap$$, {$CellContext`string$$}]; \
$CellContext`globMap["business"] = 
                    Union[{$CellContext`f$$ -> $CellContext`newMap$$}, 
                    Block[{$CellContext`p, $CellContext`g}, 
                    Monads`comprehend[Monads`Sets, $CellContext`p, 
                    Monads`generator[
                    Pattern[$CellContext`p, Pattern[$CellContext`g, 
                    Blank[]] -> Blank[]], 
                    $CellContext`globMap[
                    "business"]], $CellContext`g != $CellContext`f$$]]]), 
                    BaseStyle -> Small, Appearance -> Automatic, Evaluator -> 
                    Automatic, Method -> "Preemptive"]}, {"\"\"", 
                    ButtonBox[
                    "\"Remove string\"", 
                    ButtonFunction :> ($CellContext`newMap$$ = 
                    Complement[$CellContext`newMap$$, \
{$CellContext`string$$}]; $CellContext`globMap["business"] = 
                    Union[{$CellContext`f$$ -> $CellContext`newMap$$}, 
                    Block[{$CellContext`p, $CellContext`g}, 
                    Monads`comprehend[Monads`Sets, $CellContext`p, 
                    Monads`generator[
                    Pattern[$CellContext`p, Pattern[$CellContext`g, 
                    Blank[]] -> Blank[]], 
                    $CellContext`globMap[
                    "business"]], $CellContext`g != $CellContext`f$$]]]), 
                    BaseStyle -> Small, Appearance -> Automatic, Evaluator -> 
                    Automatic, Method -> "Preemptive"]}, {"\"\"", 
                    ButtonBox[
                    "\"Print local map\"", ButtonFunction :> 
                    Print[$CellContext`f$$ -> $CellContext`newMap$$], 
                    BaseStyle -> Small, Appearance -> Automatic, Evaluator -> 
                    Automatic, Method -> "Preemptive"]}}, AutoDelete -> False,
                     GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Grid"]], DynamicModuleValues :> {}]}, {
               6, "\"Postage and Delivery\"" -> 
                DynamicModuleBox[{$CellContext`f$$ = 
                   "Expenses in VAT:Postage and Delivery", \
$CellContext`string$$ = "", $CellContext`newMap$$ = {}}, 
                  PanelBox[
                   TagBox[
                    GridBox[{{
                    StyleBox["\"String map\"", Bold, StripOnInput -> False], 
                    "\[SpanFromLeft]"}, {"\"Name:\"", 
                    InputFieldBox[
                    Dynamic[$CellContext`f$$], String, Enabled -> False]}, {
                    "\"String:\"", 
                    InputFieldBox[
                    Dynamic[$CellContext`string$$], String]}, {"\"\"", 
                    ButtonBox[
                    "\"Add string\"", 
                    ButtonFunction :> ($CellContext`newMap$$ = 
                    Union[$CellContext`newMap$$, {$CellContext`string$$}]; \
$CellContext`globMap["business"] = 
                    Union[{$CellContext`f$$ -> $CellContext`newMap$$}, 
                    Block[{$CellContext`p, $CellContext`g}, 
                    Monads`comprehend[Monads`Sets, $CellContext`p, 
                    Monads`generator[
                    Pattern[$CellContext`p, Pattern[$CellContext`g, 
                    Blank[]] -> Blank[]], 
                    $CellContext`globMap[
                    "business"]], $CellContext`g != $CellContext`f$$]]]), 
                    BaseStyle -> Small, Appearance -> Automatic, Evaluator -> 
                    Automatic, Method -> "Preemptive"]}, {"\"\"", 
                    ButtonBox[
                    "\"Remove string\"", 
                    ButtonFunction :> ($CellContext`newMap$$ = 
                    Complement[$CellContext`newMap$$, \
{$CellContext`string$$}]; $CellContext`globMap["business"] = 
                    Union[{$CellContext`f$$ -> $CellContext`newMap$$}, 
                    Block[{$CellContext`p, $CellContext`g}, 
                    Monads`comprehend[Monads`Sets, $CellContext`p, 
                    Monads`generator[
                    Pattern[$CellContext`p, Pattern[$CellContext`g, 
                    Blank[]] -> Blank[]], 
                    $CellContext`globMap[
                    "business"]], $CellContext`g != $CellContext`f$$]]]), 
                    BaseStyle -> Small, Appearance -> Automatic, Evaluator -> 
                    Automatic, Method -> "Preemptive"]}, {"\"\"", 
                    ButtonBox[
                    "\"Print local map\"", ButtonFunction :> 
                    Print[$CellContext`f$$ -> $CellContext`newMap$$], 
                    BaseStyle -> Small, Appearance -> Automatic, Evaluator -> 
                    Automatic, Method -> "Preemptive"]}}, AutoDelete -> False,
                     GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Grid"]], DynamicModuleValues :> {}]}, {
               7, "\"Professional Fees:\"" -> 
                TabViewBox[{{
                   1, "\"Accounting\"" -> 
                    DynamicModuleBox[{$CellContext`f$$ = 
                    "Expenses in VAT:Professional Fees:Accounting", \
$CellContext`string$$ = "", $CellContext`newMap$$ = {}}, 
                    PanelBox[
                    TagBox[
                    GridBox[{{
                    StyleBox["\"String map\"", Bold, StripOnInput -> False], 
                    "\[SpanFromLeft]"}, {"\"Name:\"", 
                    InputFieldBox[
                    Dynamic[$CellContext`f$$], String, Enabled -> False]}, {
                    "\"String:\"", 
                    InputFieldBox[
                    Dynamic[$CellContext`string$$], String]}, {"\"\"", 
                    ButtonBox[
                    "\"Add string\"", 
                    ButtonFunction :> ($CellContext`newMap$$ = 
                    Union[$CellContext`newMap$$, {$CellContext`string$$}]; \
$CellContext`globMap["business"] = 
                    Union[{$CellContext`f$$ -> $CellContext`newMap$$}, 
                    Block[{$CellContext`p, $CellContext`g}, 
                    Monads`comprehend[Monads`Sets, $CellContext`p, 
                    Monads`generator[
                    Pattern[$CellContext`p, Pattern[$CellContext`g, 
                    Blank[]] -> Blank[]], 
                    $CellContext`globMap[
                    "business"]], $CellContext`g != $CellContext`f$$]]]), 
                    BaseStyle -> Small, Appearance -> Automatic, Evaluator -> 
                    Automatic, Method -> "Preemptive"]}, {"\"\"", 
                    ButtonBox[
                    "\"Remove string\"", 
                    ButtonFunction :> ($CellContext`newMap$$ = 
                    Complement[$CellContext`newMap$$, \
{$CellContext`string$$}]; $CellContext`globMap["business"] = 
                    Union[{$CellContext`f$$ -> $CellContext`newMap$$}, 
                    Block[{$CellContext`p, $CellContext`g}, 
                    Monads`comprehend[Monads`Sets, $CellContext`p, 
                    Monads`generator[
                    Pattern[$CellContext`p, Pattern[$CellContext`g, 
                    Blank[]] -> Blank[]], 
                    $CellContext`globMap[
                    "business"]], $CellContext`g != $CellContext`f$$]]]), 
                    BaseStyle -> Small, Appearance -> Automatic, Evaluator -> 
                    Automatic, Method -> "Preemptive"]}, {"\"\"", 
                    ButtonBox[
                    "\"Print local map\"", ButtonFunction :> 
                    Print[$CellContext`f$$ -> $CellContext`newMap$$], 
                    BaseStyle -> Small, Appearance -> Automatic, Evaluator -> 
                    Automatic, Method -> "Preemptive"]}}, AutoDelete -> False,
                     GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Grid"]], DynamicModuleValues :> {}]}, {
                   2, "\"Legal Fees\"" -> 
                    DynamicModuleBox[{$CellContext`f$$ = 
                    "Expenses in VAT:Professional Fees:Legal Fees", \
$CellContext`string$$ = "", $CellContext`newMap$$ = {}}, 
                    PanelBox[
                    TagBox[
                    GridBox[{{
                    StyleBox["\"String map\"", Bold, StripOnInput -> False], 
                    "\[SpanFromLeft]"}, {"\"Name:\"", 
                    InputFieldBox[
                    Dynamic[$CellContext`f$$], String, Enabled -> False]}, {
                    "\"String:\"", 
                    InputFieldBox[
                    Dynamic[$CellContext`string$$], String]}, {"\"\"", 
                    ButtonBox[
                    "\"Add string\"", 
                    ButtonFunction :> ($CellContext`newMap$$ = 
                    Union[$CellContext`newMap$$, {$CellContext`string$$}]; \
$CellContext`globMap["business"] = 
                    Union[{$CellContext`f$$ -> $CellContext`newMap$$}, 
                    Block[{$CellContext`p, $CellContext`g}, 
                    Monads`comprehend[Monads`Sets, $CellContext`p, 
                    Monads`generator[
                    Pattern[$CellContext`p, Pattern[$CellContext`g, 
                    Blank[]] -> Blank[]], 
                    $CellContext`globMap[
                    "business"]], $CellContext`g != $CellContext`f$$]]]), 
                    BaseStyle -> Small, Appearance -> Automatic, Evaluator -> 
                    Automatic, Method -> "Preemptive"]}, {"\"\"", 
                    ButtonBox[
                    "\"Remove string\"", 
                    ButtonFunction :> ($CellContext`newMap$$ = 
                    Complement[$CellContext`newMap$$, \
{$CellContext`string$$}]; $CellContext`globMap["business"] = 
                    Union[{$CellContext`f$$ -> $CellContext`newMap$$}, 
                    Block[{$CellContext`p, $CellContext`g}, 
                    Monads`comprehend[Monads`Sets, $CellContext`p, 
                    Monads`generator[
                    Pattern[$CellContext`p, Pattern[$CellContext`g, 
                    Blank[]] -> Blank[]], 
                    $CellContext`globMap[
                    "business"]], $CellContext`g != $CellContext`f$$]]]), 
                    BaseStyle -> Small, Appearance -> Automatic, Evaluator -> 
                    Automatic, Method -> "Preemptive"]}, {"\"\"", 
                    ButtonBox[
                    "\"Print local map\"", ButtonFunction :> 
                    Print[$CellContext`f$$ -> $CellContext`newMap$$], 
                    BaseStyle -> Small, Appearance -> Automatic, Evaluator -> 
                    Automatic, Method -> "Preemptive"]}}, AutoDelete -> False,
                     GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Grid"]], DynamicModuleValues :> {}]}}, 1, 
                  ControlPlacement -> {Center, Top}, LabelStyle -> Small]}, {
               8, "\"Services:\"" -> 
                TabViewBox[{{
                   1, "\"Phone\"" -> 
                    DynamicModuleBox[{$CellContext`f$$ = 
                    "Expenses in VAT:Services:Phone", $CellContext`string$$ = 
                    "", $CellContext`newMap$$ = {}}, 
                    PanelBox[
                    TagBox[
                    GridBox[{{
                    StyleBox["\"String map\"", Bold, StripOnInput -> False], 
                    "\[SpanFromLeft]"}, {"\"Name:\"", 
                    InputFieldBox[
                    Dynamic[$CellContext`f$$], String, Enabled -> False]}, {
                    "\"String:\"", 
                    InputFieldBox[
                    Dynamic[$CellContext`string$$], String]}, {"\"\"", 
                    ButtonBox[
                    "\"Add string\"", 
                    ButtonFunction :> ($CellContext`newMap$$ = 
                    Union[$CellContext`newMap$$, {$CellContext`string$$}]; \
$CellContext`globMap["business"] = 
                    Union[{$CellContext`f$$ -> $CellContext`newMap$$}, 
                    Block[{$CellContext`p, $CellContext`g}, 
                    Monads`comprehend[Monads`Sets, $CellContext`p, 
                    Monads`generator[
                    Pattern[$CellContext`p, Pattern[$CellContext`g, 
                    Blank[]] -> Blank[]], 
                    $CellContext`globMap[
                    "business"]], $CellContext`g != $CellContext`f$$]]]), 
                    BaseStyle -> Small, Appearance -> Automatic, Evaluator -> 
                    Automatic, Method -> "Preemptive"]}, {"\"\"", 
                    ButtonBox[
                    "\"Remove string\"", 
                    ButtonFunction :> ($CellContext`newMap$$ = 
                    Complement[$CellContext`newMap$$, \
{$CellContext`string$$}]; $CellContext`globMap["business"] = 
                    Union[{$CellContext`f$$ -> $CellContext`newMap$$}, 
                    Block[{$CellContext`p, $CellContext`g}, 
                    Monads`comprehend[Monads`Sets, $CellContext`p, 
                    Monads`generator[
                    Pattern[$CellContext`p, Pattern[$CellContext`g, 
                    Blank[]] -> Blank[]], 
                    $CellContext`globMap[
                    "business"]], $CellContext`g != $CellContext`f$$]]]), 
                    BaseStyle -> Small, Appearance -> Automatic, Evaluator -> 
                    Automatic, Method -> "Preemptive"]}, {"\"\"", 
                    ButtonBox[
                    "\"Print local map\"", ButtonFunction :> 
                    Print[$CellContext`f$$ -> $CellContext`newMap$$], 
                    BaseStyle -> Small, Appearance -> Automatic, Evaluator -> 
                    Automatic, Method -> "Preemptive"]}}, AutoDelete -> False,
                     GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Grid"]], DynamicModuleValues :> {}]}, {
                   2, "\"Internet\"" -> 
                    DynamicModuleBox[{$CellContext`f$$ = 
                    "Expenses in VAT:Services:Internet", \
$CellContext`string$$ = "", $CellContext`newMap$$ = {}}, 
                    PanelBox[
                    TagBox[
                    GridBox[{{
                    StyleBox["\"String map\"", Bold, StripOnInput -> False], 
                    "\[SpanFromLeft]"}, {"\"Name:\"", 
                    InputFieldBox[
                    Dynamic[$CellContext`f$$], String, Enabled -> False]}, {
                    "\"String:\"", 
                    InputFieldBox[
                    Dynamic[$CellContext`string$$], String]}, {"\"\"", 
                    ButtonBox[
                    "\"Add string\"", 
                    ButtonFunction :> ($CellContext`newMap$$ = 
                    Union[$CellContext`newMap$$, {$CellContext`string$$}]; \
$CellContext`globMap["business"] = 
                    Union[{$CellContext`f$$ -> $CellContext`newMap$$}, 
                    Block[{$CellContext`p, $CellContext`g}, 
                    Monads`comprehend[Monads`Sets, $CellContext`p, 
                    Monads`generator[
                    Pattern[$CellContext`p, Pattern[$CellContext`g, 
                    Blank[]] -> Blank[]], 
                    $CellContext`globMap[
                    "business"]], $CellContext`g != $CellContext`f$$]]]), 
                    BaseStyle -> Small, Appearance -> Automatic, Evaluator -> 
                    Automatic, Method -> "Preemptive"]}, {"\"\"", 
                    ButtonBox[
                    "\"Remove string\"", 
                    ButtonFunction :> ($CellContext`newMap$$ = 
                    Complement[$CellContext`newMap$$, \
{$CellContext`string$$}]; $CellContext`globMap["business"] = 
                    Union[{$CellContext`f$$ -> $CellContext`newMap$$}, 
                    Block[{$CellContext`p, $CellContext`g}, 
                    Monads`comprehend[Monads`Sets, $CellContext`p, 
                    Monads`generator[
                    Pattern[$CellContext`p, Pattern[$CellContext`g, 
                    Blank[]] -> Blank[]], 
                    $CellContext`globMap[
                    "business"]], $CellContext`g != $CellContext`f$$]]]), 
                    BaseStyle -> Small, Appearance -> Automatic, Evaluator -> 
                    Automatic, Method -> "Preemptive"]}, {"\"\"", 
                    ButtonBox[
                    "\"Print local map\"", ButtonFunction :> 
                    Print[$CellContext`f$$ -> $CellContext`newMap$$], 
                    BaseStyle -> Small, Appearance -> Automatic, Evaluator -> 
                    Automatic, Method -> "Preemptive"]}}, AutoDelete -> False,
                     GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Grid"]], DynamicModuleValues :> {}]}}, 1, 
                  ControlPlacement -> {Center, Top}, LabelStyle -> Small]}, {
               9, "\"Rent\"" -> 
                DynamicModuleBox[{$CellContext`f$$ = 
                   "Expenses in VAT:Rent", $CellContext`string$$ = 
                   "", $CellContext`newMap$$ = {}}, 
                  PanelBox[
                   TagBox[
                    GridBox[{{
                    StyleBox["\"String map\"", Bold, StripOnInput -> False], 
                    "\[SpanFromLeft]"}, {"\"Name:\"", 
                    InputFieldBox[
                    Dynamic[$CellContext`f$$], String, Enabled -> False]}, {
                    "\"String:\"", 
                    InputFieldBox[
                    Dynamic[$CellContext`string$$], String]}, {"\"\"", 
                    ButtonBox[
                    "\"Add string\"", 
                    ButtonFunction :> ($CellContext`newMap$$ = 
                    Union[$CellContext`newMap$$, {$CellContext`string$$}]; \
$CellContext`globMap["business"] = 
                    Union[{$CellContext`f$$ -> $CellContext`newMap$$}, 
                    Block[{$CellContext`p, $CellContext`g}, 
                    Monads`comprehend[Monads`Sets, $CellContext`p, 
                    Monads`generator[
                    Pattern[$CellContext`p, Pattern[$CellContext`g, 
                    Blank[]] -> Blank[]], 
                    $CellContext`globMap[
                    "business"]], $CellContext`g != $CellContext`f$$]]]), 
                    BaseStyle -> Small, Appearance -> Automatic, Evaluator -> 
                    Automatic, Method -> "Preemptive"]}, {"\"\"", 
                    ButtonBox[
                    "\"Remove string\"", 
                    ButtonFunction :> ($CellContext`newMap$$ = 
                    Complement[$CellContext`newMap$$, \
{$CellContext`string$$}]; $CellContext`globMap["business"] = 
                    Union[{$CellContext`f$$ -> $CellContext`newMap$$}, 
                    Block[{$CellContext`p, $CellContext`g}, 
                    Monads`comprehend[Monads`Sets, $CellContext`p, 
                    Monads`generator[
                    Pattern[$CellContext`p, Pattern[$CellContext`g, 
                    Blank[]] -> Blank[]], 
                    $CellContext`globMap[
                    "business"]], $CellContext`g != $CellContext`f$$]]]), 
                    BaseStyle -> Small, Appearance -> Automatic, Evaluator -> 
                    Automatic, Method -> "Preemptive"]}, {"\"\"", 
                    ButtonBox[
                    "\"Print local map\"", ButtonFunction :> 
                    Print[$CellContext`f$$ -> $CellContext`newMap$$], 
                    BaseStyle -> Small, Appearance -> Automatic, Evaluator -> 
                    Automatic, Method -> "Preemptive"]}}, AutoDelete -> False,
                     GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Grid"]], DynamicModuleValues :> {}]}, {
               10, "\"Books\"" -> 
                DynamicModuleBox[{$CellContext`f$$ = 
                   "Expenses in VAT:Books", $CellContext`string$$ = 
                   "", $CellContext`newMap$$ = {}}, 
                  PanelBox[
                   TagBox[
                    GridBox[{{
                    StyleBox["\"String map\"", Bold, StripOnInput -> False], 
                    "\[SpanFromLeft]"}, {"\"Name:\"", 
                    InputFieldBox[
                    Dynamic[$CellContext`f$$], String, Enabled -> False]}, {
                    "\"String:\"", 
                    InputFieldBox[
                    Dynamic[$CellContext`string$$], String]}, {"\"\"", 
                    ButtonBox[
                    "\"Add string\"", 
                    ButtonFunction :> ($CellContext`newMap$$ = 
                    Union[$CellContext`newMap$$, {$CellContext`string$$}]; \
$CellContext`globMap["business"] = 
                    Union[{$CellContext`f$$ -> $CellContext`newMap$$}, 
                    Block[{$CellContext`p, $CellContext`g}, 
                    Monads`comprehend[Monads`Sets, $CellContext`p, 
                    Monads`generator[
                    Pattern[$CellContext`p, Pattern[$CellContext`g, 
                    Blank[]] -> Blank[]], 
                    $CellContext`globMap[
                    "business"]], $CellContext`g != $CellContext`f$$]]]), 
                    BaseStyle -> Small, Appearance -> Automatic, Evaluator -> 
                    Automatic, Method -> "Preemptive"]}, {"\"\"", 
                    ButtonBox[
                    "\"Remove string\"", 
                    ButtonFunction :> ($CellContext`newMap$$ = 
                    Complement[$CellContext`newMap$$, \
{$CellContext`string$$}]; $CellContext`globMap["business"] = 
                    Union[{$CellContext`f$$ -> $CellContext`newMap$$}, 
                    Block[{$CellContext`p, $CellContext`g}, 
                    Monads`comprehend[Monads`Sets, $CellContext`p, 
                    Monads`generator[
                    Pattern[$CellContext`p, Pattern[$CellContext`g, 
                    Blank[]] -> Blank[]], 
                    $CellContext`globMap[
                    "business"]], $CellContext`g != $CellContext`f$$]]]), 
                    BaseStyle -> Small, Appearance -> Automatic, Evaluator -> 
                    Automatic, Method -> "Preemptive"]}, {"\"\"", 
                    ButtonBox[
                    "\"Print local map\"", ButtonFunction :> 
                    Print[$CellContext`f$$ -> $CellContext`newMap$$], 
                    BaseStyle -> Small, Appearance -> Automatic, Evaluator -> 
                    Automatic, Method -> "Preemptive"]}}, AutoDelete -> False,
                     GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Grid"]], DynamicModuleValues :> {}]}, {
               11, "\"Software\"" -> 
                DynamicModuleBox[{$CellContext`f$$ = 
                   "Expenses in VAT:Software", $CellContext`string$$ = 
                   "", $CellContext`newMap$$ = {
                    "WEB HOSTING", "WWW.ANDIC", "WWW.ANDICA", "WWW.TAXSH", 
                    "WWW.TAXSHIELD"}}, 
                  PanelBox[
                   TagBox[
                    GridBox[{{
                    StyleBox["\"String map\"", Bold, StripOnInput -> False], 
                    "\[SpanFromLeft]"}, {"\"Name:\"", 
                    InputFieldBox[
                    Dynamic[$CellContext`f$$], String, Enabled -> False]}, {
                    "\"String:\"", 
                    InputFieldBox[
                    Dynamic[$CellContext`string$$], String]}, {"\"\"", 
                    ButtonBox[
                    "\"Add string\"", 
                    ButtonFunction :> ($CellContext`newMap$$ = 
                    Union[$CellContext`newMap$$, {$CellContext`string$$}]; \
$CellContext`globMap["business"] = 
                    Union[{$CellContext`f$$ -> $CellContext`newMap$$}, 
                    Block[{$CellContext`p, $CellContext`g}, 
                    Monads`comprehend[Monads`Sets, $CellContext`p, 
                    Monads`generator[
                    Pattern[$CellContext`p, Pattern[$CellContext`g, 
                    Blank[]] -> Blank[]], 
                    $CellContext`globMap[
                    "business"]], $CellContext`g != $CellContext`f$$]]]), 
                    BaseStyle -> Small, Appearance -> Automatic, Evaluator -> 
                    Automatic, Method -> "Preemptive"]}, {"\"\"", 
                    ButtonBox[
                    "\"Remove string\"", 
                    ButtonFunction :> ($CellContext`newMap$$ = 
                    Complement[$CellContext`newMap$$, \
{$CellContext`string$$}]; $CellContext`globMap["business"] = 
                    Union[{$CellContext`f$$ -> $CellContext`newMap$$}, 
                    Block[{$CellContext`p, $CellContext`g}, 
                    Monads`comprehend[Monads`Sets, $CellContext`p, 
                    Monads`generator[
                    Pattern[$CellContext`p, Pattern[$CellContext`g, 
                    Blank[]] -> Blank[]], 
                    $CellContext`globMap[
                    "business"]], $CellContext`g != $CellContext`f$$]]]), 
                    BaseStyle -> Small, Appearance -> Automatic, Evaluator -> 
                    Automatic, Method -> "Preemptive"]}, {"\"\"", 
                    ButtonBox[
                    "\"Print local map\"", ButtonFunction :> 
                    Print[$CellContext`f$$ -> $CellContext`newMap$$], 
                    BaseStyle -> Small, Appearance -> Automatic, Evaluator -> 
                    Automatic, Method -> "Preemptive"]}}, AutoDelete -> False,
                     GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Grid"]], DynamicModuleValues :> {}]}, {
               12, "\"Travel\"" -> 
                DynamicModuleBox[{$CellContext`f$$ = 
                   "Expenses in VAT:Travel", $CellContext`string$$ = 
                   "", $CellContext`newMap$$ = {}}, 
                  PanelBox[
                   TagBox[
                    GridBox[{{
                    StyleBox["\"String map\"", Bold, StripOnInput -> False], 
                    "\[SpanFromLeft]"}, {"\"Name:\"", 
                    InputFieldBox[
                    Dynamic[$CellContext`f$$], String, Enabled -> False]}, {
                    "\"String:\"", 
                    InputFieldBox[
                    Dynamic[$CellContext`string$$], String]}, {"\"\"", 
                    ButtonBox[
                    "\"Add string\"", 
                    ButtonFunction :> ($CellContext`newMap$$ = 
                    Union[$CellContext`newMap$$, {$CellContext`string$$}]; \
$CellContext`globMap["business"] = 
                    Union[{$CellContext`f$$ -> $CellContext`newMap$$}, 
                    Block[{$CellContext`p, $CellContext`g}, 
                    Monads`comprehend[Monads`Sets, $CellContext`p, 
                    Monads`generator[
                    Pattern[$CellContext`p, Pattern[$CellContext`g, 
                    Blank[]] -> Blank[]], 
                    $CellContext`globMap[
                    "business"]], $CellContext`g != $CellContext`f$$]]]), 
                    BaseStyle -> Small, Appearance -> Automatic, Evaluator -> 
                    Automatic, Method -> "Preemptive"]}, {"\"\"", 
                    ButtonBox[
                    "\"Remove string\"", 
                    ButtonFunction :> ($CellContext`newMap$$ = 
                    Complement[$CellContext`newMap$$, \
{$CellContext`string$$}]; $CellContext`globMap["business"] = 
                    Union[{$CellContext`f$$ -> $CellContext`newMap$$}, 
                    Block[{$CellContext`p, $CellContext`g}, 
                    Monads`comprehend[Monads`Sets, $CellContext`p, 
                    Monads`generator[
                    Pattern[$CellContext`p, Pattern[$CellContext`g, 
                    Blank[]] -> Blank[]], 
                    $CellContext`globMap[
                    "business"]], $CellContext`g != $CellContext`f$$]]]), 
                    BaseStyle -> Small, Appearance -> Automatic, Evaluator -> 
                    Automatic, Method -> "Preemptive"]}, {"\"\"", 
                    ButtonBox[
                    "\"Print local map\"", ButtonFunction :> 
                    Print[$CellContext`f$$ -> $CellContext`newMap$$], 
                    BaseStyle -> Small, Appearance -> Automatic, Evaluator -> 
                    Automatic, Method -> "Preemptive"]}}, AutoDelete -> False,
                     GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Grid"]], DynamicModuleValues :> {}]}, {
               13, "\"Marketing\"" -> 
                DynamicModuleBox[{$CellContext`f$$ = 
                   "Expenses in VAT:Marketing", $CellContext`string$$ = 
                   "", $CellContext`newMap$$ = {}}, 
                  PanelBox[
                   TagBox[
                    GridBox[{{
                    StyleBox["\"String map\"", Bold, StripOnInput -> False], 
                    "\[SpanFromLeft]"}, {"\"Name:\"", 
                    InputFieldBox[
                    Dynamic[$CellContext`f$$], String, Enabled -> False]}, {
                    "\"String:\"", 
                    InputFieldBox[
                    Dynamic[$CellContext`string$$], String]}, {"\"\"", 
                    ButtonBox[
                    "\"Add string\"", 
                    ButtonFunction :> ($CellContext`newMap$$ = 
                    
                    Union[$CellContext`newMap$$, {$CellContext`string$$}]; \
$CellContext`globMap["business"] = 
                    Union[{$CellContext`f$$ -> $CellContext`newMap$$}, 
                    Block[{$CellContext`p, $CellContext`g}, 
                    Monads`comprehend[Monads`Sets, $CellContext`p, 
                    Monads`generator[
                    Pattern[$CellContext`p, Pattern[$CellContext`g, 
                    Blank[]] -> Blank[]], 
                    $CellContext`globMap[
                    "business"]], $CellContext`g != $CellContext`f$$]]]), 
                    BaseStyle -> Small, Appearance -> Automatic, Evaluator -> 
                    Automatic, Method -> "Preemptive"]}, {"\"\"", 
                    ButtonBox[
                    "\"Remove string\"", 
                    ButtonFunction :> ($CellContext`newMap$$ = 
                    Complement[$CellContext`newMap$$, \
{$CellContext`string$$}]; $CellContext`globMap["business"] = 
                    Union[{$CellContext`f$$ -> $CellContext`newMap$$}, 
                    Block[{$CellContext`p, $CellContext`g}, 
                    Monads`comprehend[Monads`Sets, $CellContext`p, 
                    Monads`generator[
                    Pattern[$CellContext`p, Pattern[$CellContext`g, 
                    Blank[]] -> Blank[]], 
                    $CellContext`globMap[
                    "business"]], $CellContext`g != $CellContext`f$$]]]), 
                    BaseStyle -> Small, Appearance -> Automatic, Evaluator -> 
                    Automatic, Method -> "Preemptive"]}, {"\"\"", 
                    ButtonBox[
                    "\"Print local map\"", ButtonFunction :> 
                    Print[$CellContext`f$$ -> $CellContext`newMap$$], 
                    BaseStyle -> Small, Appearance -> Automatic, Evaluator -> 
                    Automatic, Method -> "Preemptive"]}}, AutoDelete -> False,
                     GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Grid"]], DynamicModuleValues :> {}]}, {
               14, "\"Fuel\"" -> 
                DynamicModuleBox[{$CellContext`f$$ = 
                   "Expenses in VAT:Fuel", $CellContext`string$$ = 
                   "", $CellContext`newMap$$ = {
                    "TEXSHINNERSBR", "W M MORRISON"}}, 
                  PanelBox[
                   TagBox[
                    GridBox[{{
                    StyleBox["\"String map\"", Bold, StripOnInput -> False], 
                    "\[SpanFromLeft]"}, {"\"Name:\"", 
                    InputFieldBox[
                    Dynamic[$CellContext`f$$], String, Enabled -> False]}, {
                    "\"String:\"", 
                    InputFieldBox[
                    Dynamic[$CellContext`string$$], String]}, {"\"\"", 
                    ButtonBox[
                    "\"Add string\"", 
                    ButtonFunction :> ($CellContext`newMap$$ = 
                    Union[$CellContext`newMap$$, {$CellContext`string$$}]; \
$CellContext`globMap["business"] = 
                    Union[{$CellContext`f$$ -> $CellContext`newMap$$}, 
                    Block[{$CellContext`p, $CellContext`g}, 
                    Monads`comprehend[Monads`Sets, $CellContext`p, 
                    Monads`generator[
                    Pattern[$CellContext`p, Pattern[$CellContext`g, 
                    Blank[]] -> Blank[]], 
                    $CellContext`globMap[
                    "business"]], $CellContext`g != $CellContext`f$$]]]), 
                    BaseStyle -> Small, Appearance -> Automatic, Evaluator -> 
                    Automatic, Method -> "Preemptive"]}, {"\"\"", 
                    ButtonBox[
                    "\"Remove string\"", 
                    ButtonFunction :> ($CellContext`newMap$$ = 
                    Complement[$CellContext`newMap$$, \
{$CellContext`string$$}]; $CellContext`globMap["business"] = 
                    Union[{$CellContext`f$$ -> $CellContext`newMap$$}, 
                    Block[{$CellContext`p, $CellContext`g}, 
                    Monads`comprehend[Monads`Sets, $CellContext`p, 
                    Monads`generator[
                    Pattern[$CellContext`p, Pattern[$CellContext`g, 
                    Blank[]] -> Blank[]], 
                    $CellContext`globMap[
                    "business"]], $CellContext`g != $CellContext`f$$]]]), 
                    BaseStyle -> Small, Appearance -> Automatic, Evaluator -> 
                    Automatic, Method -> "Preemptive"]}, {"\"\"", 
                    ButtonBox[
                    "\"Print local map\"", ButtonFunction :> 
                    Print[$CellContext`f$$ -> $CellContext`newMap$$], 
                    BaseStyle -> Small, Appearance -> Automatic, Evaluator -> 
                    Automatic, Method -> "Preemptive"]}}, AutoDelete -> False,
                     GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Grid"]], DynamicModuleValues :> {}]}, {
               15, "\"Equipment\"" -> 
                DynamicModuleBox[{$CellContext`f$$ = 
                   "Expenses in VAT:Equipment", $CellContext`string$$ = 
                   "", $CellContext`newMap$$ = {
                    "ENDSLEIGH GAR", "HARRIS & SON", "MACHINE MART", 
                    "MAPLIN EXETER", "MOLE AVON", "MP HARDWARE"}}, 
                  PanelBox[
                   TagBox[
                    GridBox[{{
                    StyleBox["\"String map\"", Bold, StripOnInput -> False], 
                    "\[SpanFromLeft]"}, {"\"Name:\"", 
                    InputFieldBox[
                    Dynamic[$CellContext`f$$], String, Enabled -> False]}, {
                    "\"String:\"", 
                    InputFieldBox[
                    Dynamic[$CellContext`string$$], String]}, {"\"\"", 
                    ButtonBox[
                    "\"Add string\"", 
                    ButtonFunction :> ($CellContext`newMap$$ = 
                    Union[$CellContext`newMap$$, {$CellContext`string$$}]; \
$CellContext`globMap["business"] = 
                    Union[{$CellContext`f$$ -> $CellContext`newMap$$}, 
                    Block[{$CellContext`p, $CellContext`g}, 
                    Monads`comprehend[Monads`Sets, $CellContext`p, 
                    Monads`generator[
                    Pattern[$CellContext`p, Pattern[$CellContext`g, 
                    Blank[]] -> Blank[]], 
                    $CellContext`globMap[
                    "business"]], $CellContext`g != $CellContext`f$$]]]), 
                    BaseStyle -> Small, Appearance -> Automatic, Evaluator -> 
                    Automatic, Method -> "Preemptive"]}, {"\"\"", 
                    ButtonBox[
                    "\"Remove string\"", 
                    ButtonFunction :> ($CellContext`newMap$$ = 
                    Complement[$CellContext`newMap$$, \
{$CellContext`string$$}]; $CellContext`globMap["business"] = 
                    Union[{$CellContext`f$$ -> $CellContext`newMap$$}, 
                    Block[{$CellContext`p, $CellContext`g}, 
                    Monads`comprehend[Monads`Sets, $CellContext`p, 
                    Monads`generator[
                    Pattern[$CellContext`p, Pattern[$CellContext`g, 
                    Blank[]] -> Blank[]], 
                    $CellContext`globMap[
                    "business"]], $CellContext`g != $CellContext`f$$]]]), 
                    BaseStyle -> Small, Appearance -> Automatic, Evaluator -> 
                    Automatic, Method -> "Preemptive"]}, {"\"\"", 
                    ButtonBox[
                    "\"Print local map\"", ButtonFunction :> 
                    Print[$CellContext`f$$ -> $CellContext`newMap$$], 
                    BaseStyle -> Small, Appearance -> Automatic, Evaluator -> 
                    Automatic, Method -> "Preemptive"]}}, AutoDelete -> False,
                     GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Grid"]], DynamicModuleValues :> {}]}, {
               16, "\"Materials\"" -> 
                DynamicModuleBox[{$CellContext`f$$ = 
                   "Expenses in VAT:Materials", $CellContext`string$$ = 
                   "", $CellContext`newMap$$ = {
                    "B & Q", "CORNWALL FARM", "CREATIVE CRAF", "FERMOYS", 
                    "FIRST TUNNELS", "INTER-LINE", "PIPE STOCK", 
                    "RAINWATERPROD", "SOUTHERN TIMB", "TRAGO NEWTON", 
                    "UNITED ROOFIN", "WP-ALLPLAS", "WWW.KIOWA"}}, 
                  PanelBox[
                   TagBox[
                    GridBox[{{
                    StyleBox["\"String map\"", Bold, StripOnInput -> False], 
                    "\[SpanFromLeft]"}, {"\"Name:\"", 
                    InputFieldBox[
                    Dynamic[$CellContext`f$$], String, Enabled -> False]}, {
                    "\"String:\"", 
                    InputFieldBox[
                    Dynamic[$CellContext`string$$], String]}, {"\"\"", 
                    ButtonBox[
                    "\"Add string\"", 
                    ButtonFunction :> ($CellContext`newMap$$ = 
                    Union[$CellContext`newMap$$, {$CellContext`string$$}]; \
$CellContext`globMap["business"] = 
                    Union[{$CellContext`f$$ -> $CellContext`newMap$$}, 
                    Block[{$CellContext`p, $CellContext`g}, 
                    Monads`comprehend[Monads`Sets, $CellContext`p, 
                    Monads`generator[
                    Pattern[$CellContext`p, Pattern[$CellContext`g, 
                    Blank[]] -> Blank[]], 
                    $CellContext`globMap[
                    "business"]], $CellContext`g != $CellContext`f$$]]]), 
                    BaseStyle -> Small, Appearance -> Automatic, Evaluator -> 
                    Automatic, Method -> "Preemptive"]}, {"\"\"", 
                    ButtonBox[
                    "\"Remove string\"", 
                    ButtonFunction :> ($CellContext`newMap$$ = 
                    Complement[$CellContext`newMap$$, \
{$CellContext`string$$}]; $CellContext`globMap["business"] = 
                    Union[{$CellContext`f$$ -> $CellContext`newMap$$}, 
                    Block[{$CellContext`p, $CellContext`g}, 
                    Monads`comprehend[Monads`Sets, $CellContext`p, 
                    Monads`generator[
                    Pattern[$CellContext`p, Pattern[$CellContext`g, 
                    Blank[]] -> Blank[]], 
                    $CellContext`globMap[
                    "business"]], $CellContext`g != $CellContext`f$$]]]), 
                    BaseStyle -> Small, Appearance -> Automatic, Evaluator -> 
                    Automatic, Method -> "Preemptive"]}, {"\"\"", 
                    ButtonBox[
                    "\"Print local map\"", ButtonFunction :> 
                    Print[$CellContext`f$$ -> $CellContext`newMap$$], 
                    BaseStyle -> Small, Appearance -> Automatic, Evaluator -> 
                    Automatic, Method -> "Preemptive"]}}, AutoDelete -> False,
                     GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Grid"]], DynamicModuleValues :> {}]}, {
               17, "\"Plants and Trees\"" -> 
                DynamicModuleBox[{$CellContext`f$$ = 
                   "Expenses in VAT:Plants and Trees", $CellContext`string$$ = 
                   "", $CellContext`newMap$$ = {
                    "MOLES SEEDS", "ORGANICCATALO", "TAMAR ORGANIC", 
                    "THE REAL SEED", "WOODLAND TRUST", "WWW.SOWSEEDS", 
                    "WWW.SUTTONS-S"}}, 
                  PanelBox[
                   TagBox[
                    GridBox[{{
                    StyleBox["\"String map\"", Bold, StripOnInput -> False], 
                    "\[SpanFromLeft]"}, {"\"Name:\"", 
                    InputFieldBox[
                    Dynamic[$CellContext`f$$], String, Enabled -> False]}, {
                    "\"String:\"", 
                    InputFieldBox[
                    Dynamic[$CellContext`string$$], String]}, {"\"\"", 
                    ButtonBox[
                    "\"Add string\"", 
                    ButtonFunction :> ($CellContext`newMap$$ = 
                    Union[$CellContext`newMap$$, {$CellContext`string$$}]; \
$CellContext`globMap["business"] = 
                    Union[{$CellContext`f$$ -> $CellContext`newMap$$}, 
                    Block[{$CellContext`p, $CellContext`g}, 
                    Monads`comprehend[Monads`Sets, $CellContext`p, 
                    Monads`generator[
                    Pattern[$CellContext`p, Pattern[$CellContext`g, 
                    Blank[]] -> Blank[]], 
                    $CellContext`globMap[
                    "business"]], $CellContext`g != $CellContext`f$$]]]), 
                    BaseStyle -> Small, Appearance -> Automatic, Evaluator -> 
                    Automatic, Method -> "Preemptive"]}, {"\"\"", 
                    ButtonBox[
                    "\"Remove string\"", 
                    ButtonFunction :> ($CellContext`newMap$$ = 
                    Complement[$CellContext`newMap$$, \
{$CellContext`string$$}]; $CellContext`globMap["business"] = 
                    Union[{$CellContext`f$$ -> $CellContext`newMap$$}, 
                    Block[{$CellContext`p, $CellContext`g}, 
                    Monads`comprehend[Monads`Sets, $CellContext`p, 
                    Monads`generator[
                    Pattern[$CellContext`p, Pattern[$CellContext`g, 
                    Blank[]] -> Blank[]], 
                    $CellContext`globMap[
                    "business"]], $CellContext`g != $CellContext`f$$]]]), 
                    BaseStyle -> Small, Appearance -> Automatic, Evaluator -> 
                    Automatic, Method -> "Preemptive"]}, {"\"\"", 
                    ButtonBox[
                    "\"Print local map\"", ButtonFunction :> 
                    Print[$CellContext`f$$ -> $CellContext`newMap$$], 
                    BaseStyle -> Small, Appearance -> Automatic, Evaluator -> 
                    Automatic, Method -> "Preemptive"]}}, AutoDelete -> False,
                     GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Grid"]], DynamicModuleValues :> {}]}, {
               18, "\"Auto:\"" -> 
                TabViewBox[{{
                   1, "\"Auto Tax\"" -> 
                    DynamicModuleBox[{$CellContext`f$$ = 
                    "Expenses in VAT:Auto:Auto Tax", $CellContext`string$$ = 
                    "", $CellContext`newMap$$ = {}}, 
                    PanelBox[
                    TagBox[
                    GridBox[{{
                    StyleBox["\"String map\"", Bold, StripOnInput -> False], 
                    "\[SpanFromLeft]"}, {"\"Name:\"", 
                    InputFieldBox[
                    Dynamic[$CellContext`f$$], String, Enabled -> False]}, {
                    "\"String:\"", 
                    InputFieldBox[
                    Dynamic[$CellContext`string$$], String]}, {"\"\"", 
                    ButtonBox[
                    "\"Add string\"", 
                    ButtonFunction :> ($CellContext`newMap$$ = 
                    Union[$CellContext`newMap$$, {$CellContext`string$$}]; \
$CellContext`globMap["business"] = 
                    Union[{$CellContext`f$$ -> $CellContext`newMap$$}, 
                    Block[{$CellContext`p, $CellContext`g}, 
                    Monads`comprehend[Monads`Sets, $CellContext`p, 
                    Monads`generator[
                    Pattern[$CellContext`p, Pattern[$CellContext`g, 
                    Blank[]] -> Blank[]], 
                    $CellContext`globMap[
                    "business"]], $CellContext`g != $CellContext`f$$]]]), 
                    BaseStyle -> Small, Appearance -> Automatic, Evaluator -> 
                    Automatic, Method -> "Preemptive"]}, {"\"\"", 
                    ButtonBox[
                    "\"Remove string\"", 
                    ButtonFunction :> ($CellContext`newMap$$ = 
                    Complement[$CellContext`newMap$$, \
{$CellContext`string$$}]; $CellContext`globMap["business"] = 
                    Union[{$CellContext`f$$ -> $CellContext`newMap$$}, 
                    Block[{$CellContext`p, $CellContext`g}, 
                    Monads`comprehend[Monads`Sets, $CellContext`p, 
                    Monads`generator[
                    Pattern[$CellContext`p, Pattern[$CellContext`g, 
                    Blank[]] -> Blank[]], 
                    $CellContext`globMap[
                    "business"]], $CellContext`g != $CellContext`f$$]]]), 
                    BaseStyle -> Small, Appearance -> Automatic, Evaluator -> 
                    Automatic, Method -> "Preemptive"]}, {"\"\"", 
                    ButtonBox[
                    "\"Print local map\"", ButtonFunction :> 
                    Print[$CellContext`f$$ -> $CellContext`newMap$$], 
                    BaseStyle -> Small, Appearance -> Automatic, Evaluator -> 
                    Automatic, Method -> "Preemptive"]}}, AutoDelete -> False,
                     GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Grid"]], DynamicModuleValues :> {}]}, {
                   2, "\"Auto Fuel\"" -> 
                    DynamicModuleBox[{$CellContext`f$$ = 
                    "Expenses in VAT:Auto:Auto Fuel", $CellContext`string$$ = 
                    "", $CellContext`newMap$$ = {}}, 
                    PanelBox[
                    TagBox[
                    GridBox[{{
                    StyleBox["\"String map\"", Bold, StripOnInput -> False], 
                    "\[SpanFromLeft]"}, {"\"Name:\"", 
                    InputFieldBox[
                    Dynamic[$CellContext`f$$], String, Enabled -> False]}, {
                    "\"String:\"", 
                    InputFieldBox[
                    Dynamic[$CellContext`string$$], String]}, {"\"\"", 
                    ButtonBox[
                    "\"Add string\"", 
                    ButtonFunction :> ($CellContext`newMap$$ = 
                    Union[$CellContext`newMap$$, {$CellContext`string$$}]; \
$CellContext`globMap["business"] = 
                    Union[{$CellContext`f$$ -> $CellContext`newMap$$}, 
                    Block[{$CellContext`p, $CellContext`g}, 
                    Monads`comprehend[Monads`Sets, $CellContext`p, 
                    Monads`generator[
                    Pattern[$CellContext`p, Pattern[$CellContext`g, 
                    Blank[]] -> Blank[]], 
                    $CellContext`globMap[
                    "business"]], $CellContext`g != $CellContext`f$$]]]), 
                    BaseStyle -> Small, Appearance -> Automatic, Evaluator -> 
                    Automatic, Method -> "Preemptive"]}, {"\"\"", 
                    ButtonBox[
                    "\"Remove string\"", 
                    ButtonFunction :> ($CellContext`newMap$$ = 
                    Complement[$CellContext`newMap$$, \
{$CellContext`string$$}]; $CellContext`globMap["business"] = 
                    Union[{$CellContext`f$$ -> $CellContext`newMap$$}, 
                    Block[{$CellContext`p, $CellContext`g}, 
                    Monads`comprehend[Monads`Sets, $CellContext`p, 
                    Monads`generator[
                    Pattern[$CellContext`p, Pattern[$CellContext`g, 
                    Blank[]] -> Blank[]], 
                    $CellContext`globMap[
                    "business"]], $CellContext`g != $CellContext`f$$]]]), 
                    BaseStyle -> Small, Appearance -> Automatic, Evaluator -> 
                    Automatic, Method -> "Preemptive"]}, {"\"\"", 
                    ButtonBox[
                    "\"Print local map\"", ButtonFunction :> 
                    Print[$CellContext`f$$ -> $CellContext`newMap$$], 
                    BaseStyle -> Small, Appearance -> Automatic, Evaluator -> 
                    Automatic, Method -> "Preemptive"]}}, AutoDelete -> False,
                     GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Grid"]], DynamicModuleValues :> {}]}, {
                   3, "\"Auto Maintenance\"" -> 
                    DynamicModuleBox[{$CellContext`f$$ = 
                    "Expenses in VAT:Auto:Auto Maintenance", \
$CellContext`string$$ = "", $CellContext`newMap$$ = {}}, 
                    PanelBox[
                    TagBox[
                    GridBox[{{
                    StyleBox["\"String map\"", Bold, StripOnInput -> False], 
                    "\[SpanFromLeft]"}, {"\"Name:\"", 
                    InputFieldBox[
                    Dynamic[$CellContext`f$$], String, Enabled -> False]}, {
                    "\"String:\"", 
                    InputFieldBox[
                    Dynamic[$CellContext`string$$], String]}, {"\"\"", 
                    ButtonBox[
                    "\"Add string\"", 
                    ButtonFunction :> ($CellContext`newMap$$ = 
                    Union[$CellContext`newMap$$, {$CellContext`string$$}]; \
$CellContext`globMap["business"] = 
                    Union[{$CellContext`f$$ -> $CellContext`newMap$$}, 
                    Block[{$CellContext`p, $CellContext`g}, 
                    Monads`comprehend[Monads`Sets, $CellContext`p, 
                    Monads`generator[
                    Pattern[$CellContext`p, Pattern[$CellContext`g, 
                    Blank[]] -> Blank[]], 
                    $CellContext`globMap[
                    "business"]], $CellContext`g != $CellContext`f$$]]]), 
                    BaseStyle -> Small, Appearance -> Automatic, Evaluator -> 
                    Automatic, Method -> "Preemptive"]}, {"\"\"", 
                    ButtonBox[
                    "\"Remove string\"", 
                    ButtonFunction :> ($CellContext`newMap$$ = 
                    Complement[$CellContext`newMap$$, \
{$CellContext`string$$}]; $CellContext`globMap["business"] = 
                    Union[{$CellContext`f$$ -> $CellContext`newMap$$}, 
                    Block[{$CellContext`p, $CellContext`g}, 
                    Monads`comprehend[Monads`Sets, $CellContext`p, 
                    Monads`generator[
                    Pattern[$CellContext`p, Pattern[$CellContext`g, 
                    Blank[]] -> Blank[]], 
                    $CellContext`globMap[
                    "business"]], $CellContext`g != $CellContext`f$$]]]), 
                    BaseStyle -> Small, Appearance -> Automatic, Evaluator -> 
                    Automatic, Method -> "Preemptive"]}, {"\"\"", 
                    ButtonBox[
                    "\"Print local map\"", ButtonFunction :> 
                    Print[$CellContext`f$$ -> $CellContext`newMap$$], 
                    BaseStyle -> Small, Appearance -> Automatic, Evaluator -> 
                    Automatic, Method -> "Preemptive"]}}, AutoDelete -> False,
                     GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Grid"]], DynamicModuleValues :> {}]}}, 1, 
                  ControlPlacement -> {Center, Top}, LabelStyle -> Small]}, {
               19, "\"Contractors\"" -> 
                DynamicModuleBox[{$CellContext`f$$ = 
                   "Expenses in VAT:Contractors", $CellContext`string$$ = 
                   "", $CellContext`newMap$$ = {}}, 
                  PanelBox[
                   TagBox[
                    GridBox[{{
                    StyleBox["\"String map\"", Bold, StripOnInput -> False], 
                    "\[SpanFromLeft]"}, {"\"Name:\"", 
                    InputFieldBox[
                    Dynamic[$CellContext`f$$], String, Enabled -> False]}, {
                    "\"String:\"", 
                    InputFieldBox[
                    Dynamic[$CellContext`string$$], String]}, {"\"\"", 
                    ButtonBox[
                    "\"Add string\"", 
                    ButtonFunction :> ($CellContext`newMap$$ = 
                    Union[$CellContext`newMap$$, {$CellContext`string$$}]; \
$CellContext`globMap["business"] = 
                    Union[{$CellContext`f$$ -> $CellContext`newMap$$}, 
                    Block[{$CellContext`p, $CellContext`g}, 
                    Monads`comprehend[Monads`Sets, $CellContext`p, 
                    Monads`generator[
                    Pattern[$CellContext`p, Pattern[$CellContext`g, 
                    Blank[]] -> Blank[]], 
                    $CellContext`globMap[
                    "business"]], $CellContext`g != $CellContext`f$$]]]), 
                    BaseStyle -> Small, Appearance -> Automatic, Evaluator -> 
                    Automatic, Method -> "Preemptive"]}, {"\"\"", 
                    ButtonBox[
                    "\"Remove string\"", 
                    ButtonFunction :> ($CellContext`newMap$$ = 
                    Complement[$CellContext`newMap$$, \
{$CellContext`string$$}]; $CellContext`globMap["business"] = 
                    Union[{$CellContext`f$$ -> $CellContext`newMap$$}, 
                    Block[{$CellContext`p, $CellContext`g}, 
                    Monads`comprehend[Monads`Sets, $CellContext`p, 
                    Monads`generator[
                    Pattern[$CellContext`p, Pattern[$CellContext`g, 
                    Blank[]] -> Blank[]], 
                    $CellContext`globMap[
                    "business"]], $CellContext`g != $CellContext`f$$]]]), 
                    BaseStyle -> Small, Appearance -> Automatic, Evaluator -> 
                    Automatic, Method -> "Preemptive"]}, {"\"\"", 
                    ButtonBox[
                    "\"Print local map\"", ButtonFunction :> 
                    Print[$CellContext`f$$ -> $CellContext`newMap$$], 
                    BaseStyle -> Small, Appearance -> Automatic, Evaluator -> 
                    Automatic, Method -> "Preemptive"]}}, AutoDelete -> False,
                     GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Grid"]], DynamicModuleValues :> {}]}}, 
             DynamicDump`start$$ = 1, DynamicDump`maxstart$$ = 10, 
             DynamicDump`index$$}, 
            DynamicBox[
             TabViewBox[{{Typeset`first, (StyleBox[#, 
                  CurrentValue[{"ControlsFontSize", Large}], FontColor -> 
                  If[#2 === #3, Gray, Black]]& )[
                 "\[FirstPage]", DynamicDump`start$$, 1] -> Null}, {
               Typeset`left, (StyleBox[#, 
                  CurrentValue[{"ControlsFontSize", Large}], FontColor -> 
                  If[#2 === #3, Gray, Black]]& )[
                 "\[LeftPointer]", DynamicDump`start$$, 1] -> Null}, 
               Apply[Sequence, 
                Take[
                DynamicDump`tabdata$$, {
                 DynamicDump`start$$, DynamicDump`start$$ + 
                  DynamicDump`width$$ - 1}]], {Typeset`right, (StyleBox[#, 
                  CurrentValue[{"ControlsFontSize", Large}], FontColor -> 
                  If[#2 === #3, Gray, Black]]& )[
                 "\[RightPointer]", DynamicDump`start$$, 
                  DynamicDump`maxstart$$] -> Null}, {
               Typeset`last, (StyleBox[#, 
                  CurrentValue[{"ControlsFontSize", Large}], FontColor -> 
                  If[#2 === #3, Gray, Black]]& )[
                 "\[LastPage]", DynamicDump`start$$, DynamicDump`maxstart$$] -> 
                Null}}, 
              Dynamic[DynamicDump`index$$ = Quiet[
                  Check[
                   Part[
                    Position[DynamicDump`tabdata$$, {Typeset`var$$, 
                    Blank[]}, 1, 1], 1, 1], 0]]; If[
                 Inequality[
                 0, LessEqual, DynamicDump`index$$ - DynamicDump`start$$, 
                  Less, DynamicDump`width$$], None, DynamicDump`start$$ = 
                 Clip[
                  Floor[(DynamicDump`index$$ - 1)/DynamicDump`jump$$] 
                    DynamicDump`jump$$ + 1, {1, DynamicDump`maxstart$$}]]; 
               Typeset`var$$, 
               Switch[#, Typeset`first, DynamicDump`start$$ = 1; 
                Typeset`var$$ = 
                 Part[DynamicDump`tabdata$$, DynamicDump`start$$, 1], 
                Typeset`left, 
                DynamicDump`start$$ = 
                 Max[DynamicDump`start$$ - DynamicDump`jump$$, 1]; 
                Typeset`var$$ = 
                 Part[DynamicDump`tabdata$$, DynamicDump`start$$, 1], 
                Typeset`right, 
                DynamicDump`start$$ = 
                 Min[DynamicDump`start$$ + DynamicDump`jump$$, 
                   DynamicDump`maxstart$$]; 
                Typeset`var$$ = 
                 Part[DynamicDump`tabdata$$, DynamicDump`start$$ + 
                   DynamicDump`width$$ - 1, 1], Typeset`last, 
                DynamicDump`start$$ = DynamicDump`maxstart$$; 
                Typeset`var$$ = 
                 Part[DynamicDump`tabdata$$, DynamicDump`start$$ + 
                   DynamicDump`width$$ - 1, 1], 
                Blank[], Typeset`var$$ = #]& ], 
              Apply[Sequence, 
               
               DeleteCases[{
                ControlPlacement -> {Center, Top}, LabelStyle -> Small}, 
                Blank[][Method, 
                 Blank[]]]]]], DynamicModuleValues :> {}], 
           
           TabView[{
            "Bank Service Charge" -> 
             DynamicModule[{$CellContext`f = 
                "Expenses in VAT:Bank Service Charge", $CellContext`string = 
                "", $CellContext`newMap = {}}, 
               Panel[
                Grid[{{
                   Style["String map", Bold], SpanFromLeft}, {"Name:", 
                   InputField[
                    Dynamic[$CellContext`f], String, Enabled -> False]}, {
                  "String:", 
                   InputField[
                    Dynamic[$CellContext`string], String]}, {"", 
                   Button[
                   "Add string", $CellContext`newMap = 
                    Union[$CellContext`newMap, {$CellContext`string}]; \
$CellContext`globMap["business"] = 
                    Union[{$CellContext`f -> $CellContext`newMap}, 
                    Block[{$CellContext`p, $CellContext`g}, 
                    Monads`comprehend[Monads`Sets, $CellContext`p, 
                    Monads`generator[
                    Pattern[$CellContext`p, Pattern[$CellContext`g, 
                    Blank[]] -> Blank[]], 
                    $CellContext`globMap[
                    "business"]], $CellContext`g != $CellContext`f]]], 
                    BaseStyle -> Small]}, {"", 
                   Button[
                   "Remove string", $CellContext`newMap = 
                    Complement[$CellContext`newMap, {$CellContext`string}]; \
$CellContext`globMap["business"] = 
                    Union[{$CellContext`f -> $CellContext`newMap}, 
                    Block[{$CellContext`p, $CellContext`g}, 
                    Monads`comprehend[Monads`Sets, $CellContext`p, 
                    Monads`generator[
                    Pattern[$CellContext`p, Pattern[$CellContext`g, 
                    Blank[]] -> Blank[]], 
                    $CellContext`globMap[
                    "business"]], $CellContext`g != $CellContext`f]]], 
                    BaseStyle -> Small]}, {"", 
                   Button["Print local map", 
                    Print[$CellContext`f -> $CellContext`newMap], BaseStyle -> 
                    Small]}}]], DynamicModuleValues :> {}], 
             "Dues and Subscriptions" -> 
             DynamicModule[{$CellContext`f = 
                "Expenses in VAT:Dues and Subscriptions", $CellContext`string = 
                "", $CellContext`newMap = {"COMPANIES HSE", "FWAG"}}, 
               Panel[
                Grid[{{
                   Style["String map", Bold], SpanFromLeft}, {"Name:", 
                   InputField[
                    Dynamic[$CellContext`f], String, Enabled -> False]}, {
                  "String:", 
                   InputField[
                    Dynamic[$CellContext`string], String]}, {"", 
                   Button[
                   "Add string", $CellContext`newMap = 
                    Union[$CellContext`newMap, {$CellContext`string}]; \
$CellContext`globMap["business"] = 
                    Union[{$CellContext`f -> $CellContext`newMap}, 
                    Block[{$CellContext`p, $CellContext`g}, 
                    Monads`comprehend[Monads`Sets, $CellContext`p, 
                    Monads`generator[
                    Pattern[$CellContext`p, Pattern[$CellContext`g, 
                    Blank[]] -> Blank[]], 
                    $CellContext`globMap[
                    "business"]], $CellContext`g != $CellContext`f]]], 
                    BaseStyle -> Small]}, {"", 
                   Button[
                   "Remove string", $CellContext`newMap = 
                    Complement[$CellContext`newMap, {$CellContext`string}]; \
$CellContext`globMap["business"] = 
                    Union[{$CellContext`f -> $CellContext`newMap}, 
                    Block[{$CellContext`p, $CellContext`g}, 
                    Monads`comprehend[Monads`Sets, $CellContext`p, 
                    Monads`generator[
                    Pattern[$CellContext`p, Pattern[$CellContext`g, 
                    Blank[]] -> Blank[]], 
                    $CellContext`globMap[
                    "business"]], $CellContext`g != $CellContext`f]]], 
                    BaseStyle -> Small]}, {"", 
                   Button["Print local map", 
                    Print[$CellContext`f -> $CellContext`newMap], BaseStyle -> 
                    Small]}}]], DynamicModuleValues :> {}], "Miscellaneous" -> 
             DynamicModule[{$CellContext`f = 
                "Expenses in VAT:Miscellaneous", $CellContext`string = 
                "", $CellContext`newMap = {}}, 
               Panel[
                Grid[{{
                   Style["String map", Bold], SpanFromLeft}, {"Name:", 
                   InputField[
                    Dynamic[$CellContext`f], String, Enabled -> False]}, {
                  "String:", 
                   InputField[
                    Dynamic[$CellContext`string], String]}, {"", 
                   Button[
                   "Add string", $CellContext`newMap = 
                    Union[$CellContext`newMap, {$CellContext`string}]; \
$CellContext`globMap["business"] = 
                    Union[{$CellContext`f -> $CellContext`newMap}, 
                    Block[{$CellContext`p, $CellContext`g}, 
                    Monads`comprehend[Monads`Sets, $CellContext`p, 
                    Monads`generator[
                    Pattern[$CellContext`p, Pattern[$CellContext`g, 
                    Blank[]] -> Blank[]], 
                    $CellContext`globMap[
                    "business"]], $CellContext`g != $CellContext`f]]], 
                    BaseStyle -> Small]}, {"", 
                   Button[
                   "Remove string", $CellContext`newMap = 
                    Complement[$CellContext`newMap, {$CellContext`string}]; \
$CellContext`globMap["business"] = 
                    Union[{$CellContext`f -> $CellContext`newMap}, 
                    Block[{$CellContext`p, $CellContext`g}, 
                    Monads`comprehend[Monads`Sets, $CellContext`p, 
                    Monads`generator[
                    Pattern[$CellContext`p, Pattern[$CellContext`g, 
                    Blank[]] -> Blank[]], 
                    $CellContext`globMap[
                    "business"]], $CellContext`g != $CellContext`f]]], 
                    BaseStyle -> Small]}, {"", 
                   Button["Print local map", 
                    Print[$CellContext`f -> $CellContext`newMap], BaseStyle -> 
                    Small]}}]], DynamicModuleValues :> {}], "Office Supplies" -> 
             DynamicModule[{$CellContext`f = 
                "Expenses in VAT:Office Supplies", $CellContext`string = 
                "", $CellContext`newMap = {}}, 
               Panel[
                Grid[{{
                   Style["String map", Bold], SpanFromLeft}, {"Name:", 
                   InputField[
                    Dynamic[$CellContext`f], String, Enabled -> False]}, {
                  "String:", 
                   InputField[
                    Dynamic[$CellContext`string], String]}, {"", 
                   Button[
                   "Add string", $CellContext`newMap = 
                    Union[$CellContext`newMap, {$CellContext`string}]; \
$CellContext`globMap["business"] = 
                    Union[{$CellContext`f -> $CellContext`newMap}, 
                    Block[{$CellContext`p, $CellContext`g}, 
                    Monads`comprehend[Monads`Sets, $CellContext`p, 
                    Monads`generator[
                    Pattern[$CellContext`p, Pattern[$CellContext`g, 
                    Blank[]] -> Blank[]], 
                    $CellContext`globMap[
                    "business"]], $CellContext`g != $CellContext`f]]], 
                    BaseStyle -> Small]}, {"", 
                   Button[
                   "Remove string", $CellContext`newMap = 
                    Complement[$CellContext`newMap, {$CellContext`string}]; \
$CellContext`globMap["business"] = 
                    Union[{$CellContext`f -> $CellContext`newMap}, 
                    Block[{$CellContext`p, $CellContext`g}, 
                    Monads`comprehend[Monads`Sets, $CellContext`p, 
                    Monads`generator[
                    Pattern[$CellContext`p, Pattern[$CellContext`g, 
                    Blank[]] -> Blank[]], 
                    $CellContext`globMap[
                    "business"]], $CellContext`g != $CellContext`f]]], 
                    BaseStyle -> Small]}, {"", 
                   Button["Print local map", 
                    Print[$CellContext`f -> $CellContext`newMap], BaseStyle -> 
                    Small]}}]], DynamicModuleValues :> {}], "Production" -> 
             DynamicModule[{$CellContext`f = 
                "Expenses in VAT:Production", $CellContext`string = 
                "", $CellContext`newMap = {"CORNWALL FARM"}}, 
               Panel[
                Grid[{{
                   Style["String map", Bold], SpanFromLeft}, {"Name:", 
                   InputField[
                    Dynamic[$CellContext`f], String, Enabled -> False]}, {
                  "String:", 
                   InputField[
                    Dynamic[$CellContext`string], String]}, {"", 
                   Button[
                   "Add string", $CellContext`newMap = 
                    Union[$CellContext`newMap, {$CellContext`string}]; \
$CellContext`globMap["business"] = 
                    Union[{$CellContext`f -> $CellContext`newMap}, 
                    Block[{$CellContext`p, $CellContext`g}, 
                    Monads`comprehend[Monads`Sets, $CellContext`p, 
                    Monads`generator[
                    Pattern[$CellContext`p, Pattern[$CellContext`g, 
                    Blank[]] -> Blank[]], 
                    $CellContext`globMap[
                    "business"]], $CellContext`g != $CellContext`f]]], 
                    BaseStyle -> Small]}, {"", 
                   Button[
                   "Remove string", $CellContext`newMap = 
                    Complement[$CellContext`newMap, {$CellContext`string}]; \
$CellContext`globMap["business"] = 
                    Union[{$CellContext`f -> $CellContext`newMap}, 
                    Block[{$CellContext`p, $CellContext`g}, 
                    Monads`comprehend[Monads`Sets, $CellContext`p, 
                    Monads`generator[
                    Pattern[$CellContext`p, Pattern[$CellContext`g, 
                    Blank[]] -> Blank[]], 
                    $CellContext`globMap[
                    "business"]], $CellContext`g != $CellContext`f]]], 
                    BaseStyle -> Small]}, {"", 
                   Button["Print local map", 
                    Print[$CellContext`f -> $CellContext`newMap], BaseStyle -> 
                    Small]}}]], DynamicModuleValues :> {}], 
             "Postage and Delivery" -> 
             DynamicModule[{$CellContext`f = 
                "Expenses in VAT:Postage and Delivery", $CellContext`string = 
                "", $CellContext`newMap = {}}, 
               Panel[
                Grid[{{
                   Style["String map", Bold], SpanFromLeft}, {"Name:", 
                   InputField[
                    Dynamic[$CellContext`f], String, Enabled -> False]}, {
                  "String:", 
                   InputField[
                    Dynamic[$CellContext`string], String]}, {"", 
                   Button[
                   "Add string", $CellContext`newMap = 
                    Union[$CellContext`newMap, {$CellContext`string}]; \
$CellContext`globMap["business"] = 
                    Union[{$CellContext`f -> $CellContext`newMap}, 
                    Block[{$CellContext`p, $CellContext`g}, 
                    Monads`comprehend[Monads`Sets, $CellContext`p, 
                    Monads`generator[
                    Pattern[$CellContext`p, Pattern[$CellContext`g, 
                    Blank[]] -> Blank[]], 
                    $CellContext`globMap[
                    "business"]], $CellContext`g != $CellContext`f]]], 
                    BaseStyle -> Small]}, {"", 
                   Button[
                   "Remove string", $CellContext`newMap = 
                    Complement[$CellContext`newMap, {$CellContext`string}]; \
$CellContext`globMap["business"] = 
                    Union[{$CellContext`f -> $CellContext`newMap}, 
                    Block[{$CellContext`p, $CellContext`g}, 
                    Monads`comprehend[Monads`Sets, $CellContext`p, 
                    Monads`generator[
                    Pattern[$CellContext`p, Pattern[$CellContext`g, 
                    Blank[]] -> Blank[]], 
                    $CellContext`globMap[
                    "business"]], $CellContext`g != $CellContext`f]]], 
                    BaseStyle -> Small]}, {"", 
                   Button["Print local map", 
                    Print[$CellContext`f -> $CellContext`newMap], BaseStyle -> 
                    Small]}}]], DynamicModuleValues :> {}], 
             "Professional Fees:" -> 
             TabView[{
               "Accounting" -> 
                DynamicModule[{$CellContext`f = 
                   "Expenses in VAT:Professional Fees:Accounting", \
$CellContext`string = "", $CellContext`newMap = {}}, 
                  Panel[
                   Grid[{{
                    Style["String map", Bold], SpanFromLeft}, {"Name:", 
                    InputField[
                    Dynamic[$CellContext`f], String, Enabled -> False]}, {
                    "String:", 
                    InputField[
                    Dynamic[$CellContext`string], String]}, {"", 
                    Button[
                    "Add string", $CellContext`newMap = 
                    Union[$CellContext`newMap, {$CellContext`string}]; \
$CellContext`globMap["business"] = 
                    Union[{$CellContext`f -> $CellContext`newMap}, 
                    Block[{$CellContext`p, $CellContext`g}, 
                    Monads`comprehend[Monads`Sets, $CellContext`p, 
                    Monads`generator[
                    Pattern[$CellContext`p, Pattern[$CellContext`g, 
                    Blank[]] -> Blank[]], 
                    $CellContext`globMap[
                    "business"]], $CellContext`g != $CellContext`f]]], 
                    BaseStyle -> Small]}, {"", 
                    Button[
                    "Remove string", $CellContext`newMap = 
                    Complement[$CellContext`newMap, {$CellContext`string}]; \
$CellContext`globMap["business"] = 
                    Union[{$CellContext`f -> $CellContext`newMap}, 
                    Block[{$CellContext`p, $CellContext`g}, 
                    Monads`comprehend[Monads`Sets, $CellContext`p, 
                    Monads`generator[
                    Pattern[$CellContext`p, Pattern[$CellContext`g, 
                    Blank[]] -> Blank[]], 
                    $CellContext`globMap[
                    "business"]], $CellContext`g != $CellContext`f]]], 
                    BaseStyle -> Small]}, {"", 
                    Button["Print local map", 
                    Print[$CellContext`f -> $CellContext`newMap], BaseStyle -> 
                    Small]}}]], DynamicModuleValues :> {}], "Legal Fees" -> 
                DynamicModule[{$CellContext`f = 
                   "Expenses in VAT:Professional Fees:Legal Fees", \
$CellContext`string = "", $CellContext`newMap = {}}, 
                  Panel[
                   Grid[{{
                    Style["String map", Bold], SpanFromLeft}, {"Name:", 
                    InputField[
                    Dynamic[$CellContext`f], String, Enabled -> False]}, {
                    "String:", 
                    InputField[
                    Dynamic[$CellContext`string], String]}, {"", 
                    Button[
                    "Add string", $CellContext`newMap = 
                    Union[$CellContext`newMap, {$CellContext`string}]; \
$CellContext`globMap["business"] = 
                    Union[{$CellContext`f -> $CellContext`newMap}, 
                    Block[{$CellContext`p, $CellContext`g}, 
                    Monads`comprehend[Monads`Sets, $CellContext`p, 
                    Monads`generator[
                    Pattern[$CellContext`p, Pattern[$CellContext`g, 
                    Blank[]] -> Blank[]], 
                    $CellContext`globMap[
                    "business"]], $CellContext`g != $CellContext`f]]], 
                    BaseStyle -> Small]}, {"", 
                    Button[
                    "Remove string", $CellContext`newMap = 
                    Complement[$CellContext`newMap, {$CellContext`string}]; \
$CellContext`globMap["business"] = 
                    Union[{$CellContext`f -> $CellContext`newMap}, 
                    Block[{$CellContext`p, $CellContext`g}, 
                    Monads`comprehend[Monads`Sets, $CellContext`p, 
                    Monads`generator[
                    Pattern[$CellContext`p, Pattern[$CellContext`g, 
                    Blank[]] -> Blank[]], 
                    $CellContext`globMap[
                    "business"]], $CellContext`g != $CellContext`f]]], 
                    BaseStyle -> Small]}, {"", 
                    Button["Print local map", 
                    Print[$CellContext`f -> $CellContext`newMap], BaseStyle -> 
                    Small]}}]], DynamicModuleValues :> {}]}, 
               ControlPlacement -> {Center, Top}, LabelStyle -> Small, 
               Appearance -> {"Limited", 10}], "Services:" -> 
             TabView[{
               "Phone" -> 
                DynamicModule[{$CellContext`f = 
                   "Expenses in VAT:Services:Phone", $CellContext`string = 
                   "", $CellContext`newMap = {}}, 
                  Panel[
                   Grid[{{
                    Style["String map", Bold], SpanFromLeft}, {"Name:", 
                    InputField[
                    Dynamic[$CellContext`f], String, Enabled -> False]}, {
                    "String:", 
                    InputField[
                    Dynamic[$CellContext`string], String]}, {"", 
                    Button[
                    "Add string", $CellContext`newMap = 
                    Union[$CellContext`newMap, {$CellContext`string}]; \
$CellContext`globMap["business"] = 
                    Union[{$CellContext`f -> $CellContext`newMap}, 
                    Block[{$CellContext`p, $CellContext`g}, 
                    Monads`comprehend[Monads`Sets, $CellContext`p, 
                    Monads`generator[
                    Pattern[$CellContext`p, Pattern[$CellContext`g, 
                    Blank[]] -> Blank[]], 
                    $CellContext`globMap[
                    "business"]], $CellContext`g != $CellContext`f]]], 
                    BaseStyle -> Small]}, {"", 
                    Button[
                    "Remove string", $CellContext`newMap = 
                    Complement[$CellContext`newMap, {$CellContext`string}]; \
$CellContext`globMap["business"] = 
                    Union[{$CellContext`f -> $CellContext`newMap}, 
                    Block[{$CellContext`p, $CellContext`g}, 
                    Monads`comprehend[Monads`Sets, $CellContext`p, 
                    Monads`generator[
                    Pattern[$CellContext`p, Pattern[$CellContext`g, 
                    Blank[]] -> Blank[]], 
                    $CellContext`globMap[
                    "business"]], $CellContext`g != $CellContext`f]]], 
                    BaseStyle -> Small]}, {"", 
                    Button["Print local map", 
                    Print[$CellContext`f -> $CellContext`newMap], BaseStyle -> 
                    Small]}}]], DynamicModuleValues :> {}], "Internet" -> 
                DynamicModule[{$CellContext`f = 
                   "Expenses in VAT:Services:Internet", $CellContext`string = 
                   "", $CellContext`newMap = {}}, 
                  Panel[
                   Grid[{{
                    Style["String map", Bold], SpanFromLeft}, {"Name:", 
                    InputField[
                    Dynamic[$CellContext`f], String, Enabled -> False]}, {
                    "String:", 
                    InputField[
                    Dynamic[$CellContext`string], String]}, {"", 
                    Button[
                    "Add string", $CellContext`newMap = 
                    Union[$CellContext`newMap, {$CellContext`string}]; \
$CellContext`globMap["business"] = 
                    Union[{$CellContext`f -> $CellContext`newMap}, 
                    Block[{$CellContext`p, $CellContext`g}, 
                    Monads`comprehend[Monads`Sets, $CellContext`p, 
                    Monads`generator[
                    Pattern[$CellContext`p, Pattern[$CellContext`g, 
                    Blank[]] -> Blank[]], 
                    $CellContext`globMap[
                    "business"]], $CellContext`g != $CellContext`f]]], 
                    BaseStyle -> Small]}, {"", 
                    Button[
                    "Remove string", $CellContext`newMap = 
                    Complement[$CellContext`newMap, {$CellContext`string}]; \
$CellContext`globMap["business"] = 
                    Union[{$CellContext`f -> $CellContext`newMap}, 
                    Block[{$CellContext`p, $CellContext`g}, 
                    Monads`comprehend[Monads`Sets, $CellContext`p, 
                    Monads`generator[
                    Pattern[$CellContext`p, Pattern[$CellContext`g, 
                    Blank[]] -> Blank[]], 
                    $CellContext`globMap[
                    "business"]], $CellContext`g != $CellContext`f]]], 
                    BaseStyle -> Small]}, {"", 
                    Button["Print local map", 
                    Print[$CellContext`f -> $CellContext`newMap], BaseStyle -> 
                    Small]}}]], DynamicModuleValues :> {}]}, 
               ControlPlacement -> {Center, Top}, LabelStyle -> Small, 
               Appearance -> {"Limited", 10}], "Rent" -> 
             DynamicModule[{$CellContext`f = 
                "Expenses in VAT:Rent", $CellContext`string = 
                "", $CellContext`newMap = {}}, 
               Panel[
                Grid[{{
                   Style["String map", Bold], SpanFromLeft}, {"Name:", 
                   InputField[
                    Dynamic[$CellContext`f], String, Enabled -> False]}, {
                  "String:", 
                   InputField[
                    Dynamic[$CellContext`string], String]}, {"", 
                   Button[
                   "Add string", $CellContext`newMap = 
                    Union[$CellContext`newMap, {$CellContext`string}]; \
$CellContext`globMap["business"] = 
                    Union[{$CellContext`f -> $CellContext`newMap}, 
                    Block[{$CellContext`p, $CellContext`g}, 
                    Monads`comprehend[Monads`Sets, $CellContext`p, 
                    Monads`generator[
                    Pattern[$CellContext`p, Pattern[$CellContext`g, 
                    Blank[]] -> Blank[]], 
                    $CellContext`globMap[
                    "business"]], $CellContext`g != $CellContext`f]]], 
                    BaseStyle -> Small]}, {"", 
                   Button[
                   "Remove string", $CellContext`newMap = 
                    Complement[$CellContext`newMap, {$CellContext`string}]; \
$CellContext`globMap["business"] = 
                    Union[{$CellContext`f -> $CellContext`newMap}, 
                    Block[{$CellContext`p, $CellContext`g}, 
                    Monads`comprehend[Monads`Sets, $CellContext`p, 
                    Monads`generator[
                    Pattern[$CellContext`p, Pattern[$CellContext`g, 
                    Blank[]] -> Blank[]], 
                    $CellContext`globMap[
                    "business"]], $CellContext`g != $CellContext`f]]], 
                    BaseStyle -> Small]}, {"", 
                   Button["Print local map", 
                    Print[$CellContext`f -> $CellContext`newMap], BaseStyle -> 
                    Small]}}]], DynamicModuleValues :> {}], "Books" -> 
             DynamicModule[{$CellContext`f = 
                "Expenses in VAT:Books", $CellContext`string = 
                "", $CellContext`newMap = {}}, 
               Panel[
                Grid[{{
                   Style["String map", Bold], SpanFromLeft}, {"Name:", 
                   InputField[
                    Dynamic[$CellContext`f], String, Enabled -> False]}, {
                  "String:", 
                   InputField[
                    Dynamic[$CellContext`string], String]}, {"", 
                   Button[
                   "Add string", $CellContext`newMap = 
                    Union[$CellContext`newMap, {$CellContext`string}]; \
$CellContext`globMap["business"] = 
                    Union[{$CellContext`f -> $CellContext`newMap}, 
                    Block[{$CellContext`p, $CellContext`g}, 
                    Monads`comprehend[Monads`Sets, $CellContext`p, 
                    Monads`generator[
                    Pattern[$CellContext`p, Pattern[$CellContext`g, 
                    Blank[]] -> Blank[]], 
                    $CellContext`globMap[
                    "business"]], $CellContext`g != $CellContext`f]]], 
                    BaseStyle -> Small]}, {"", 
                   Button[
                   "Remove string", $CellContext`newMap = 
                    Complement[$CellContext`newMap, {$CellContext`string}]; \
$CellContext`globMap["business"] = 
                    Union[{$CellContext`f -> $CellContext`newMap}, 
                    Block[{$CellContext`p, $CellContext`g}, 
                    Monads`comprehend[Monads`Sets, $CellContext`p, 
                    Monads`generator[
                    Pattern[$CellContext`p, Pattern[$CellContext`g, 
                    Blank[]] -> Blank[]], 
                    $CellContext`globMap[
                    "business"]], $CellContext`g != $CellContext`f]]], 
                    BaseStyle -> Small]}, {"", 
                   Button["Print local map", 
                    Print[$CellContext`f -> $CellContext`newMap], BaseStyle -> 
                    Small]}}]], DynamicModuleValues :> {}], "Software" -> 
             DynamicModule[{$CellContext`f = 
                "Expenses in VAT:Software", $CellContext`string = 
                "", $CellContext`newMap = {
                 "WEB HOSTING", "WWW.ANDIC", "WWW.ANDICA", "WWW.TAXSH", 
                  "WWW.TAXSHIELD"}}, 
               Panel[
                Grid[{{
                   Style["String map", Bold], SpanFromLeft}, {"Name:", 
                   InputField[
                    Dynamic[$CellContext`f], String, Enabled -> False]}, {
                  "String:", 
                   InputField[
                    Dynamic[$CellContext`string], String]}, {"", 
                   Button[
                   "Add string", $CellContext`newMap = 
                    Union[$CellContext`newMap, {$CellContext`string}]; \
$CellContext`globMap["business"] = 
                    Union[{$CellContext`f -> $CellContext`newMap}, 
                    Block[{$CellContext`p, $CellContext`g}, 
                    Monads`comprehend[Monads`Sets, $CellContext`p, 
                    Monads`generator[
                    Pattern[$CellContext`p, Pattern[$CellContext`g, 
                    Blank[]] -> Blank[]], 
                    $CellContext`globMap[
                    "business"]], $CellContext`g != $CellContext`f]]], 
                    BaseStyle -> Small]}, {"", 
                   Button[
                   "Remove string", $CellContext`newMap = 
                    Complement[$CellContext`newMap, {$CellContext`string}]; \
$CellContext`globMap["business"] = 
                    Union[{$CellContext`f -> $CellContext`newMap}, 
                    Block[{$CellContext`p, $CellContext`g}, 
                    Monads`comprehend[Monads`Sets, $CellContext`p, 
                    Monads`generator[
                    Pattern[$CellContext`p, Pattern[$CellContext`g, 
                    Blank[]] -> Blank[]], 
                    $CellContext`globMap[
                    "business"]], $CellContext`g != $CellContext`f]]], 
                    BaseStyle -> Small]}, {"", 
                   Button["Print local map", 
                    Print[$CellContext`f -> $CellContext`newMap], BaseStyle -> 
                    Small]}}]], DynamicModuleValues :> {}], "Travel" -> 
             DynamicModule[{$CellContext`f = 
                "Expenses in VAT:Travel", $CellContext`string = 
                "", $CellContext`newMap = {}}, 
               Panel[
                Grid[{{
                   Style["String map", Bold], SpanFromLeft}, {"Name:", 
                   InputField[
                    Dynamic[$CellContext`f], String, Enabled -> False]}, {
                  "String:", 
                   InputField[
                    Dynamic[$CellContext`string], String]}, {"", 
                   Button[
                   "Add string", $CellContext`newMap = 
                    Union[$CellContext`newMap, {$CellContext`string}]; \
$CellContext`globMap["business"] = 
                    Union[{$CellContext`f -> $CellContext`newMap}, 
                    Block[{$CellContext`p, $CellContext`g}, 
                    Monads`comprehend[Monads`Sets, $CellContext`p, 
                    Monads`generator[
                    Pattern[$CellContext`p, Pattern[$CellContext`g, 
                    Blank[]] -> Blank[]], 
                    $CellContext`globMap[
                    "business"]], $CellContext`g != $CellContext`f]]], 
                    BaseStyle -> Small]}, {"", 
                   Button[
                   "Remove string", $CellContext`newMap = 
                    Complement[$CellContext`newMap, {$CellContext`string}]; \
$CellContext`globMap["business"] = 
                    Union[{$CellContext`f -> $CellContext`newMap}, 
                    Block[{$CellContext`p, $CellContext`g}, 
                    Monads`comprehend[Monads`Sets, $CellContext`p, 
                    Monads`generator[
                    Pattern[$CellContext`p, Pattern[$CellContext`g, 
                    Blank[]] -> Blank[]], 
                    $CellContext`globMap[
                    "business"]], $CellContext`g != $CellContext`f]]], 
                    BaseStyle -> Small]}, {"", 
                   Button["Print local map", 
                    Print[$CellContext`f -> $CellContext`newMap], BaseStyle -> 
                    Small]}}]], DynamicModuleValues :> {}], "Marketing" -> 
             DynamicModule[{$CellContext`f = 
                "Expenses in VAT:Marketing", $CellContext`string = 
                "", $CellContext`newMap = {}}, 
               Panel[
                Grid[{{
                   Style["String map", Bold], SpanFromLeft}, {"Name:", 
                   InputField[
                    Dynamic[$CellContext`f], String, Enabled -> False]}, {
                  "String:", 
                   InputField[
                    Dynamic[$CellContext`string], String]}, {"", 
                   Button[
                   "Add string", $CellContext`newMap = 
                    Union[$CellContext`newMap, {$CellContext`string}]; \
$CellContext`globMap["business"] = 
                    Union[{$CellContext`f -> $CellContext`newMap}, 
                    Block[{$CellContext`p, $CellContext`g}, 
                    Monads`comprehend[Monads`Sets, $CellContext`p, 
                    Monads`generator[
                    Pattern[$CellContext`p, Pattern[$CellContext`g, 
                    Blank[]] -> Blank[]], 
                    $CellContext`globMap[
                    "business"]], $CellContext`g != $CellContext`f]]], 
                    BaseStyle -> Small]}, {"", 
                   Button[
                   "Remove string", $CellContext`newMap = 
                    Complement[$CellContext`newMap, {$CellContext`string}]; \
$CellContext`globMap["business"] = 
                    Union[{$CellContext`f -> $CellContext`newMap}, 
                    Block[{$CellContext`p, $CellContext`g}, 
                    Monads`comprehend[Monads`Sets, $CellContext`p, 
                    Monads`generator[
                    Pattern[$CellContext`p, Pattern[$CellContext`g, 
                    Blank[]] -> Blank[]], 
                    $CellContext`globMap[
                    "business"]], $CellContext`g != $CellContext`f]]], 
                    BaseStyle -> Small]}, {"", 
                   Button["Print local map", 
                    Print[$CellContext`f -> $CellContext`newMap], BaseStyle -> 
                    Small]}}]], DynamicModuleValues :> {}], "Fuel" -> 
             DynamicModule[{$CellContext`f = 
                "Expenses in VAT:Fuel", $CellContext`string = 
                "", $CellContext`newMap = {"TEXSHINNERSBR", "W M MORRISON"}}, 
               
               Panel[
                Grid[{{
                   Style["String map", Bold], SpanFromLeft}, {"Name:", 
                   InputField[
                    Dynamic[$CellContext`f], String, Enabled -> False]}, {
                  "String:", 
                   InputField[
                    Dynamic[$CellContext`string], String]}, {"", 
                   Button[
                   "Add string", $CellContext`newMap = 
                    Union[$CellContext`newMap, {$CellContext`string}]; \
$CellContext`globMap["business"] = 
                    Union[{$CellContext`f -> $CellContext`newMap}, 
                    Block[{$CellContext`p, $CellContext`g}, 
                    Monads`comprehend[Monads`Sets, $CellContext`p, 
                    Monads`generator[
                    Pattern[$CellContext`p, Pattern[$CellContext`g, 
                    Blank[]] -> Blank[]], 
                    $CellContext`globMap[
                    "business"]], $CellContext`g != $CellContext`f]]], 
                    BaseStyle -> Small]}, {"", 
                   Button[
                   "Remove string", $CellContext`newMap = 
                    Complement[$CellContext`newMap, {$CellContext`string}]; \
$CellContext`globMap["business"] = 
                    Union[{$CellContext`f -> $CellContext`newMap}, 
                    Block[{$CellContext`p, $CellContext`g}, 
                    Monads`comprehend[Monads`Sets, $CellContext`p, 
                    Monads`generator[
                    Pattern[$CellContext`p, Pattern[$CellContext`g, 
                    Blank[]] -> Blank[]], 
                    $CellContext`globMap[
                    "business"]], $CellContext`g != $CellContext`f]]], 
                    BaseStyle -> Small]}, {"", 
                   Button["Print local map", 
                    Print[$CellContext`f -> $CellContext`newMap], BaseStyle -> 
                    Small]}}]], DynamicModuleValues :> {}], "Equipment" -> 
             DynamicModule[{$CellContext`f = 
                "Expenses in VAT:Equipment", $CellContext`string = 
                "", $CellContext`newMap = {
                 "ENDSLEIGH GAR", "HARRIS & SON", "MACHINE MART", 
                  "MAPLIN EXETER", "MOLE AVON", "MP HARDWARE"}}, 
               Panel[
                Grid[{{
                   Style["String map", Bold], SpanFromLeft}, {"Name:", 
                   InputField[
                    Dynamic[$CellContext`f], String, Enabled -> False]}, {
                  "String:", 
                   InputField[
                    Dynamic[$CellContext`string], String]}, {"", 
                   Button[
                   "Add string", $CellContext`newMap = 
                    Union[$CellContext`newMap, {$CellContext`string}]; \
$CellContext`globMap["business"] = 
                    Union[{$CellContext`f -> $CellContext`newMap}, 
                    Block[{$CellContext`p, $CellContext`g}, 
                    Monads`comprehend[Monads`Sets, $CellContext`p, 
                    Monads`generator[
                    Pattern[$CellContext`p, Pattern[$CellContext`g, 
                    Blank[]] -> Blank[]], 
                    $CellContext`globMap[
                    "business"]], $CellContext`g != $CellContext`f]]], 
                    BaseStyle -> Small]}, {"", 
                   Button[
                   "Remove string", $CellContext`newMap = 
                    Complement[$CellContext`newMap, {$CellContext`string}]; \
$CellContext`globMap["business"] = 
                    Union[{$CellContext`f -> $CellContext`newMap}, 
                    Block[{$CellContext`p, $CellContext`g}, 
                    Monads`comprehend[Monads`Sets, $CellContext`p, 
                    Monads`generator[
                    Pattern[$CellContext`p, Pattern[$CellContext`g, 
                    Blank[]] -> Blank[]], 
                    $CellContext`globMap[
                    "business"]], $CellContext`g != $CellContext`f]]], 
                    BaseStyle -> Small]}, {"", 
                   Button["Print local map", 
                    Print[$CellContext`f -> $CellContext`newMap], BaseStyle -> 
                    Small]}}]], DynamicModuleValues :> {}], "Materials" -> 
             DynamicModule[{$CellContext`f = 
                "Expenses in VAT:Materials", $CellContext`string = 
                "", $CellContext`newMap = {
                 "B & Q", "CORNWALL FARM", "CREATIVE CRAF", "FERMOYS", 
                  "FIRST TUNNELS", "INTER-LINE", "PIPE STOCK", 
                  "RAINWATERPROD", "SOUTHERN TIMB", "TRAGO NEWTON", 
                  "UNITED ROOFIN", "WP-ALLPLAS", "WWW.KIOWA"}}, 
               Panel[
                Grid[{{
                   Style["String map", Bold], SpanFromLeft}, {"Name:", 
                   InputField[
                    Dynamic[$CellContext`f], String, Enabled -> False]}, {
                  "String:", 
                   InputField[
                    Dynamic[$CellContext`string], String]}, {"", 
                   Button[
                   "Add string", $CellContext`newMap = 
                    Union[$CellContext`newMap, {$CellContext`string}]; \
$CellContext`globMap["business"] = 
                    Union[{$CellContext`f -> $CellContext`newMap}, 
                    Block[{$CellContext`p, $CellContext`g}, 
                    Monads`comprehend[Monads`Sets, $CellContext`p, 
                    Monads`generator[
                    Pattern[$CellContext`p, Pattern[$CellContext`g, 
                    Blank[]] -> Blank[]], 
                    $CellContext`globMap[
                    "business"]], $CellContext`g != $CellContext`f]]], 
                    BaseStyle -> Small]}, {"", 
                   Button[
                   "Remove string", $CellContext`newMap = 
                    Complement[$CellContext`newMap, {$CellContext`string}]; \
$CellContext`globMap["business"] = 
                    Union[{$CellContext`f -> $CellContext`newMap}, 
                    Block[{$CellContext`p, $CellContext`g}, 
                    Monads`comprehend[Monads`Sets, $CellContext`p, 
                    Monads`generator[
                    Pattern[$CellContext`p, Pattern[$CellContext`g, 
                    Blank[]] -> Blank[]], 
                    $CellContext`globMap[
                    "business"]], $CellContext`g != $CellContext`f]]], 
                    BaseStyle -> Small]}, {"", 
                   Button["Print local map", 
                    Print[$CellContext`f -> $CellContext`newMap], BaseStyle -> 
                    Small]}}]], DynamicModuleValues :> {}], 
             "Plants and Trees" -> 
             DynamicModule[{$CellContext`f = 
                "Expenses in VAT:Plants and Trees", $CellContext`string = 
                "", $CellContext`newMap = {
                 "MOLES SEEDS", "ORGANICCATALO", "TAMAR ORGANIC", 
                  "THE REAL SEED", "WOODLAND TRUST", "WWW.SOWSEEDS", 
                  "WWW.SUTTONS-S"}}, 
               Panel[
                Grid[{{
                   Style["String map", Bold], SpanFromLeft}, {"Name:", 
                   InputField[
                    Dynamic[$CellContext`f], String, Enabled -> False]}, {
                  "String:", 
                   InputField[
                    Dynamic[$CellContext`string], String]}, {"", 
                   Button[
                   "Add string", $CellContext`newMap = 
                    Union[$CellContext`newMap, {$CellContext`string}]; \
$CellContext`globMap["business"] = 
                    Union[{$CellContext`f -> $CellContext`newMap}, 
                    Block[{$CellContext`p, $CellContext`g}, 
                    Monads`comprehend[Monads`Sets, $CellContext`p, 
                    Monads`generator[
                    Pattern[$CellContext`p, Pattern[$CellContext`g, 
                    Blank[]] -> Blank[]], 
                    $CellContext`globMap[
                    "business"]], $CellContext`g != $CellContext`f]]], 
                    BaseStyle -> Small]}, {"", 
                   Button[
                   "Remove string", $CellContext`newMap = 
                    Complement[$CellContext`newMap, {$CellContext`string}]; \
$CellContext`globMap["business"] = 
                    Union[{$CellContext`f -> $CellContext`newMap}, 
                    Block[{$CellContext`p, $CellContext`g}, 
                    Monads`comprehend[Monads`Sets, $CellContext`p, 
                    Monads`generator[
                    Pattern[$CellContext`p, Pattern[$CellContext`g, 
                    Blank[]] -> Blank[]], 
                    $CellContext`globMap[
                    "business"]], $CellContext`g != $CellContext`f]]], 
                    BaseStyle -> Small]}, {"", 
                   Button["Print local map", 
                    Print[$CellContext`f -> $CellContext`newMap], BaseStyle -> 
                    Small]}}]], DynamicModuleValues :> {}], "Auto:" -> 
             TabView[{
               "Auto Tax" -> 
                DynamicModule[{$CellContext`f = 
                   "Expenses in VAT:Auto:Auto Tax", $CellContext`string = 
                   "", $CellContext`newMap = {}}, 
                  Panel[
                   Grid[{{
                    Style["String map", Bold], SpanFromLeft}, {"Name:", 
                    InputField[
                    Dynamic[$CellContext`f], String, Enabled -> False]}, {
                    "String:", 
                    InputField[
                    Dynamic[$CellContext`string], String]}, {"", 
                    Button[
                    "Add string", $CellContext`newMap = 
                    Union[$CellContext`newMap, {$CellContext`string}]; \
$CellContext`globMap["business"] = 
                    Union[{$CellContext`f -> $CellContext`newMap}, 
                    Block[{$CellContext`p, $CellContext`g}, 
                    Monads`comprehend[Monads`Sets, $CellContext`p, 
                    Monads`generator[
                    Pattern[$CellContext`p, Pattern[$CellContext`g, 
                    Blank[]] -> Blank[]], 
                    $CellContext`globMap[
                    "business"]], $CellContext`g != $CellContext`f]]], 
                    BaseStyle -> Small]}, {"", 
                    Button[
                    "Remove string", $CellContext`newMap = 
                    Complement[$CellContext`newMap, {$CellContext`string}]; \
$CellContext`globMap["business"] = 
                    Union[{$CellContext`f -> $CellContext`newMap}, 
                    Block[{$CellContext`p, $CellContext`g}, 
                    Monads`comprehend[Monads`Sets, $CellContext`p, 
                    Monads`generator[
                    Pattern[$CellContext`p, Pattern[$CellContext`g, 
                    Blank[]] -> Blank[]], 
                    $CellContext`globMap[
                    "business"]], $CellContext`g != $CellContext`f]]], 
                    BaseStyle -> Small]}, {"", 
                    Button["Print local map", 
                    Print[$CellContext`f -> $CellContext`newMap], BaseStyle -> 
                    Small]}}]], DynamicModuleValues :> {}], "Auto Fuel" -> 
                DynamicModule[{$CellContext`f = 
                   "Expenses in VAT:Auto:Auto Fuel", $CellContext`string = 
                   "", $CellContext`newMap = {}}, 
                  Panel[
                   Grid[{{
                    Style["String map", Bold], SpanFromLeft}, {"Name:", 
                    InputField[
                    Dynamic[$CellContext`f], String, Enabled -> False]}, {
                    "String:", 
                    InputField[
                    Dynamic[$CellContext`string], String]}, {"", 
                    Button[
                    "Add string", $CellContext`newMap = 
                    Union[$CellContext`newMap, {$CellContext`string}]; \
$CellContext`globMap["business"] = 
                    Union[{$CellContext`f -> $CellContext`newMap}, 
                    Block[{$CellContext`p, $CellContext`g}, 
                    Monads`comprehend[Monads`Sets, $CellContext`p, 
                    Monads`generator[
                    Pattern[$CellContext`p, Pattern[$CellContext`g, 
                    Blank[]] -> Blank[]], 
                    $CellContext`globMap[
                    "business"]], $CellContext`g != $CellContext`f]]], 
                    BaseStyle -> Small]}, {"", 
                    Button[
                    "Remove string", $CellContext`newMap = 
                    Complement[$CellContext`newMap, {$CellContext`string}]; \
$CellContext`globMap["business"] = 
                    Union[{$CellContext`f -> $CellContext`newMap}, 
                    Block[{$CellContext`p, $CellContext`g}, 
                    Monads`comprehend[Monads`Sets, $CellContext`p, 
                    Monads`generator[
                    Pattern[$CellContext`p, Pattern[$CellContext`g, 
                    Blank[]] -> Blank[]], 
                    $CellContext`globMap[
                    "business"]], $CellContext`g != $CellContext`f]]], 
                    BaseStyle -> Small]}, {"", 
                    Button["Print local map", 
                    Print[$CellContext`f -> $CellContext`newMap], BaseStyle -> 
                    Small]}}]], DynamicModuleValues :> {}], 
                "Auto Maintenance" -> 
                DynamicModule[{$CellContext`f = 
                   "Expenses in VAT:Auto:Auto Maintenance", \
$CellContext`string = "", $CellContext`newMap = {}}, 
                  Panel[
                   Grid[{{
                    Style["String map", Bold], SpanFromLeft}, {"Name:", 
                    InputField[
                    Dynamic[$CellContext`f], String, Enabled -> False]}, {
                    "String:", 
                    InputField[
                    Dynamic[$CellContext`string], String]}, {"", 
                    Button[
                    "Add string", $CellContext`newMap = 
                    Union[$CellContext`newMap, {$CellContext`string}]; \
$CellContext`globMap["business"] = 
                    Union[{$CellContext`f -> $CellContext`newMap}, 
                    Block[{$CellContext`p, $CellContext`g}, 
                    Monads`comprehend[Monads`Sets, $CellContext`p, 
                    Monads`generator[
                    Pattern[$CellContext`p, Pattern[$CellContext`g, 
                    Blank[]] -> Blank[]], 
                    $CellContext`globMap[
                    "business"]], $CellContext`g != $CellContext`f]]], 
                    BaseStyle -> Small]}, {"", 
                    Button[
                    "Remove string", $CellContext`newMap = 
                    Complement[$CellContext`newMap, {$CellContext`string}]; \
$CellContext`globMap["business"] = 
                    Union[{$CellContext`f -> $CellContext`newMap}, 
                    Block[{$CellContext`p, $CellContext`g}, 
                    Monads`comprehend[Monads`Sets, $CellContext`p, 
                    Monads`generator[
                    Pattern[$CellContext`p, Pattern[$CellContext`g, 
                    Blank[]] -> Blank[]], 
                    $CellContext`globMap[
                    "business"]], $CellContext`g != $CellContext`f]]], 
                    BaseStyle -> Small]}, {"", 
                    Button["Print local map", 
                    Print[$CellContext`f -> $CellContext`newMap], BaseStyle -> 
                    Small]}}]], DynamicModuleValues :> {}]}, 
               ControlPlacement -> {Center, Top}, LabelStyle -> Small, 
               Appearance -> {"Limited", 10}], "Contractors" -> 
             DynamicModule[{$CellContext`f = 
                "Expenses in VAT:Contractors", $CellContext`string = 
                "", $CellContext`newMap = {}}, 
               Panel[
                Grid[{{
                   Style["String map", Bold], SpanFromLeft}, {"Name:", 
                   InputField[
                    Dynamic[$CellContext`f], String, Enabled -> False]}, {
                  "String:", 
                   InputField[
                    Dynamic[$CellContext`string], String]}, {"", 
                   Button[
                   "Add string", $CellContext`newMap = 
                    Union[$CellContext`newMap, {$CellContext`string}]; \
$CellContext`globMap["business"] = 
                    Union[{$CellContext`f -> $CellContext`newMap}, 
                    Block[{$CellContext`p, $CellContext`g}, 
                    Monads`comprehend[Monads`Sets, $CellContext`p, 
                    Monads`generator[
                    Pattern[$CellContext`p, Pattern[$CellContext`g, 
                    Blank[]] -> Blank[]], 
                    $CellContext`globMap[
                    "business"]], $CellContext`g != $CellContext`f]]], 
                    BaseStyle -> Small]}, {"", 
                   Button[
                   "Remove string", $CellContext`newMap = 
                    Complement[$CellContext`newMap, {$CellContext`string}]; \
$CellContext`globMap["business"] = 
                    Union[{$CellContext`f -> $CellContext`newMap}, 
                    Block[{$CellContext`p, $CellContext`g}, 
                    Monads`comprehend[Monads`Sets, $CellContext`p, 
                    Monads`generator[
                    Pattern[$CellContext`p, Pattern[$CellContext`g, 
                    Blank[]] -> Blank[]], 
                    $CellContext`globMap[
                    "business"]], $CellContext`g != $CellContext`f]]], 
                    BaseStyle -> Small]}, {"", 
                   Button["Print local map", 
                    Print[$CellContext`f -> $CellContext`newMap], BaseStyle -> 
                    Small]}}]], DynamicModuleValues :> {}]}, Typeset`var$$, 
            ControlPlacement -> {Center, Top}, LabelStyle -> Small, 
            Appearance -> {"Limited", 10}]], DynamicModuleValues -> 
          Automatic], Setting[#, {0}]& ]}, {
      7, "\"Unspecified\"" -> 
       DynamicModuleBox[{$CellContext`f$$ = 
          "Unspecified", $CellContext`string$$ = 
          "", $CellContext`newMap$$ = {}}, 
         PanelBox[
          TagBox[
           GridBox[{{
              StyleBox["\"String map\"", Bold, StripOnInput -> False], 
              "\[SpanFromLeft]"}, {"\"Name:\"", 
              InputFieldBox[
               Dynamic[$CellContext`f$$], String, Enabled -> False]}, {
             "\"String:\"", 
              InputFieldBox[
               Dynamic[$CellContext`string$$], String]}, {"\"\"", 
              ButtonBox[
              "\"Add string\"", 
               ButtonFunction :> ($CellContext`newMap$$ = 
                 Union[$CellContext`newMap$$, {$CellContext`string$$}]; \
$CellContext`globMap["business"] = 
                 Union[{$CellContext`f$$ -> $CellContext`newMap$$}, 
                   Block[{$CellContext`p, $CellContext`g}, 
                    Monads`comprehend[Monads`Sets, $CellContext`p, 
                    Monads`generator[
                    Pattern[$CellContext`p, Pattern[$CellContext`g, 
                    Blank[]] -> Blank[]], 
                    $CellContext`globMap[
                    "business"]], $CellContext`g != $CellContext`f$$]]]), 
               BaseStyle -> Small, Appearance -> Automatic, Evaluator -> 
               Automatic, Method -> "Preemptive"]}, {"\"\"", 
              ButtonBox[
              "\"Remove string\"", 
               ButtonFunction :> ($CellContext`newMap$$ = 
                 Complement[$CellContext`newMap$$, {$CellContext`string$$}]; \
$CellContext`globMap["business"] = 
                 Union[{$CellContext`f$$ -> $CellContext`newMap$$}, 
                   Block[{$CellContext`p, $CellContext`g}, 
                    Monads`comprehend[Monads`Sets, $CellContext`p, 
                    Monads`generator[
                    Pattern[$CellContext`p, Pattern[$CellContext`g, 
                    Blank[]] -> Blank[]], 
                    $CellContext`globMap[
                    "business"]], $CellContext`g != $CellContext`f$$]]]), 
               BaseStyle -> Small, Appearance -> Automatic, Evaluator -> 
               Automatic, Method -> "Preemptive"]}, {"\"\"", 
              ButtonBox[
              "\"Print local map\"", ButtonFunction :> 
               Print[$CellContext`f$$ -> $CellContext`newMap$$], BaseStyle -> 
               Small, Appearance -> Automatic, Evaluator -> Automatic, Method -> 
               "Preemptive"]}}, AutoDelete -> False, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Grid"]], 
         DynamicModuleValues :> {}]}, {
      8, "\"Expenses outside VAT:\"" -> 
       TabViewBox[{{
          1, "\"Insurance:\"" -> 
           TabViewBox[{{
              1, "\"Liability Insurance\"" -> 
               DynamicModuleBox[{$CellContext`f$$ = 
                  "Expenses outside VAT:Insurance:Liability Insurance", \
$CellContext`string$$ = "", $CellContext`newMap$$ = {}}, 
                 PanelBox[
                  TagBox[
                   GridBox[{{
                    StyleBox["\"String map\"", Bold, StripOnInput -> False], 
                    "\[SpanFromLeft]"}, {"\"Name:\"", 
                    InputFieldBox[
                    Dynamic[$CellContext`f$$], String, Enabled -> False]}, {
                    "\"String:\"", 
                    InputFieldBox[
                    Dynamic[$CellContext`string$$], String]}, {"\"\"", 
                    ButtonBox[
                    "\"Add string\"", 
                    ButtonFunction :> ($CellContext`newMap$$ = 
                    Union[$CellContext`newMap$$, {$CellContext`string$$}]; \
$CellContext`globMap["business"] = 
                    Union[{$CellContext`f$$ -> $CellContext`newMap$$}, 
                    Block[{$CellContext`p, $CellContext`g}, 
                    Monads`comprehend[Monads`Sets, $CellContext`p, 
                    Monads`generator[
                    Pattern[$CellContext`p, Pattern[$CellContext`g, 
                    Blank[]] -> Blank[]], 
                    $CellContext`globMap[
                    "business"]], $CellContext`g != $CellContext`f$$]]]), 
                    BaseStyle -> Small, Appearance -> Automatic, Evaluator -> 
                    Automatic, Method -> "Preemptive"]}, {"\"\"", 
                    ButtonBox[
                    "\"Remove string\"", 
                    ButtonFunction :> ($CellContext`newMap$$ = 
                    Complement[$CellContext`newMap$$, \
{$CellContext`string$$}]; $CellContext`globMap["business"] = 
                    Union[{$CellContext`f$$ -> $CellContext`newMap$$}, 
                    Block[{$CellContext`p, $CellContext`g}, 
                    Monads`comprehend[Monads`Sets, $CellContext`p, 
                    Monads`generator[
                    Pattern[$CellContext`p, Pattern[$CellContext`g, 
                    Blank[]] -> Blank[]], 
                    $CellContext`globMap[
                    "business"]], $CellContext`g != $CellContext`f$$]]]), 
                    BaseStyle -> Small, Appearance -> Automatic, Evaluator -> 
                    Automatic, Method -> "Preemptive"]}, {"\"\"", 
                    ButtonBox[
                    "\"Print local map\"", ButtonFunction :> 
                    Print[$CellContext`f$$ -> $CellContext`newMap$$], 
                    BaseStyle -> Small, Appearance -> Automatic, Evaluator -> 
                    Automatic, Method -> "Preemptive"]}}, AutoDelete -> False,
                     GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                   "Grid"]], DynamicModuleValues :> {}]}, {
              2, "\"Auto Insurance\"" -> 
               DynamicModuleBox[{$CellContext`f$$ = 
                  "Expenses outside VAT:Insurance:Auto Insurance", \
$CellContext`string$$ = "", $CellContext`newMap$$ = {}}, 
                 PanelBox[
                  TagBox[
                   GridBox[{{
                    StyleBox["\"String map\"", Bold, StripOnInput -> False], 
                    "\[SpanFromLeft]"}, {"\"Name:\"", 
                    InputFieldBox[
                    Dynamic[$CellContext`f$$], String, Enabled -> False]}, {
                    "\"String:\"", 
                    InputFieldBox[
                    Dynamic[$CellContext`string$$], String]}, {"\"\"", 
                    ButtonBox[
                    "\"Add string\"", 
                    ButtonFunction :> ($CellContext`newMap$$ = 
                    Union[$CellContext`newMap$$, {$CellContext`string$$}]; \
$CellContext`globMap["business"] = 
                    Union[{$CellContext`f$$ -> $CellContext`newMap$$}, 
                    Block[{$CellContext`p, $CellContext`g}, 
                    Monads`comprehend[Monads`Sets, $CellContext`p, 
                    Monads`generator[
                    Pattern[$CellContext`p, Pattern[$CellContext`g, 
                    Blank[]] -> Blank[]], 
                    $CellContext`globMap[
                    "business"]], $CellContext`g != $CellContext`f$$]]]), 
                    BaseStyle -> Small, Appearance -> Automatic, Evaluator -> 
                    Automatic, Method -> "Preemptive"]}, {"\"\"", 
                    ButtonBox[
                    "\"Remove string\"", 
                    ButtonFunction :> ($CellContext`newMap$$ = 
                    Complement[$CellContext`newMap$$, \
{$CellContext`string$$}]; $CellContext`globMap["business"] = 
                    Union[{$CellContext`f$$ -> $CellContext`newMap$$}, 
                    Block[{$CellContext`p, $CellContext`g}, 
                    Monads`comprehend[Monads`Sets, $CellContext`p, 
                    Monads`generator[
                    Pattern[$CellContext`p, Pattern[$CellContext`g, 
                    Blank[]] -> Blank[]], 
                    $CellContext`globMap[
                    "business"]], $CellContext`g != $CellContext`f$$]]]), 
                    BaseStyle -> Small, Appearance -> Automatic, Evaluator -> 
                    Automatic, Method -> "Preemptive"]}, {"\"\"", 
                    ButtonBox[
                    "\"Print local map\"", ButtonFunction :> 
                    Print[$CellContext`f$$ -> $CellContext`newMap$$], 
                    BaseStyle -> Small, Appearance -> Automatic, Evaluator -> 
                    Automatic, Method -> "Preemptive"]}}, AutoDelete -> False,
                     GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                   "Grid"]], DynamicModuleValues :> {}]}}, 1, 
             ControlPlacement -> {Center, Top}, LabelStyle -> Small]}}, 1, 
         ControlPlacement -> {Center, Top}, LabelStyle -> Small]}, {
      9, "\"Emoluments:\"" -> 
       TabViewBox[{{
          1, "\"Partners Remuneration:\"" -> 
           TabViewBox[{{
              1, "\"Matthew Fairtlough\"" -> 
               DynamicModuleBox[{$CellContext`f$$ = 
                  "Emoluments:Partners Remuneration:Matthew Fairtlough", \
$CellContext`string$$ = "", $CellContext`newMap$$ = {}}, 
                 PanelBox[
                  TagBox[
                   GridBox[{{
                    StyleBox["\"String map\"", Bold, StripOnInput -> False], 
                    "\[SpanFromLeft]"}, {"\"Name:\"", 
                    InputFieldBox[
                    Dynamic[$CellContext`f$$], String, Enabled -> False]}, {
                    "\"String:\"", 
                    InputFieldBox[
                    Dynamic[$CellContext`string$$], String]}, {"\"\"", 
                    ButtonBox[
                    "\"Add string\"", 
                    ButtonFunction :> ($CellContext`newMap$$ = 
                    Union[$CellContext`newMap$$, {$CellContext`string$$}]; \
$CellContext`globMap["business"] = 
                    Union[{$CellContext`f$$ -> $CellContext`newMap$$}, 
                    Block[{$CellContext`p, $CellContext`g}, 
                    Monads`comprehend[Monads`Sets, $CellContext`p, 
                    Monads`generator[
                    Pattern[$CellContext`p, Pattern[$CellContext`g, 
                    Blank[]] -> Blank[]], 
                    $CellContext`globMap[
                    "business"]], $CellContext`g != $CellContext`f$$]]]), 
                    BaseStyle -> Small, Appearance -> Automatic, Evaluator -> 
                    Automatic, Method -> "Preemptive"]}, {"\"\"", 
                    ButtonBox[
                    "\"Remove string\"", 
                    ButtonFunction :> ($CellContext`newMap$$ = 
                    Complement[$CellContext`newMap$$, \
{$CellContext`string$$}]; $CellContext`globMap["business"] = 
                    Union[{$CellContext`f$$ -> $CellContext`newMap$$}, 
                    Block[{$CellContext`p, $CellContext`g}, 
                    Monads`comprehend[Monads`Sets, $CellContext`p, 
                    Monads`generator[
                    Pattern[$CellContext`p, Pattern[$CellContext`g, 
                    Blank[]] -> Blank[]], 
                    $CellContext`globMap[
                    "business"]], $CellContext`g != $CellContext`f$$]]]), 
                    BaseStyle -> Small, Appearance -> Automatic, Evaluator -> 
                    Automatic, Method -> "Preemptive"]}, {"\"\"", 
                    ButtonBox[
                    "\"Print local map\"", ButtonFunction :> 
                    Print[$CellContext`f$$ -> $CellContext`newMap$$], 
                    BaseStyle -> Small, Appearance -> Automatic, Evaluator -> 
                    Automatic, Method -> "Preemptive"]}}, AutoDelete -> False,
                     GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                   "Grid"]], DynamicModuleValues :> {}]}, {
              2, "\"Beth Champion\"" -> 
               DynamicModuleBox[{$CellContext`f$$ = 
                  "Emoluments:Partners Remuneration:Beth Champion", \
$CellContext`string$$ = "", $CellContext`newMap$$ = {}}, 
                 PanelBox[
                  TagBox[
                   GridBox[{{
                    StyleBox["\"String map\"", Bold, StripOnInput -> False], 
                    "\[SpanFromLeft]"}, {"\"Name:\"", 
                    InputFieldBox[
                    Dynamic[$CellContext`f$$], String, Enabled -> False]}, {
                    "\"String:\"", 
                    InputFieldBox[
                    Dynamic[$CellContext`string$$], String]}, {"\"\"", 
                    ButtonBox[
                    "\"Add string\"", 
                    ButtonFunction :> ($CellContext`newMap$$ = 
                    Union[$CellContext`newMap$$, {$CellContext`string$$}]; \
$CellContext`globMap["business"] = 
                    Union[{$CellContext`f$$ -> $CellContext`newMap$$}, 
                    Block[{$CellContext`p, $CellContext`g}, 
                    Monads`comprehend[Monads`Sets, $CellContext`p, 
                    Monads`generator[
                    Pattern[$CellContext`p, Pattern[$CellContext`g, 
                    Blank[]] -> Blank[]], 
                    $CellContext`globMap[
                    "business"]], $CellContext`g != $CellContext`f$$]]]), 
                    BaseStyle -> Small, Appearance -> Automatic, Evaluator -> 
                    Automatic, Method -> "Preemptive"]}, {"\"\"", 
                    ButtonBox[
                    "\"Remove string\"", 
                    ButtonFunction :> ($CellContext`newMap$$ = 
                    Complement[$CellContext`newMap$$, \
{$CellContext`string$$}]; $CellContext`globMap["business"] = 
                    Union[{$CellContext`f$$ -> $CellContext`newMap$$}, 
                    Block[{$CellContext`p, $CellContext`g}, 
                    Monads`comprehend[Monads`Sets, $CellContext`p, 
                    Monads`generator[
                    Pattern[$CellContext`p, Pattern[$CellContext`g, 
                    Blank[]] -> Blank[]], 
                    $CellContext`globMap[
                    "business"]], $CellContext`g != $CellContext`f$$]]]), 
                    BaseStyle -> Small, Appearance -> Automatic, Evaluator -> 
                    Automatic, Method -> "Preemptive"]}, {"\"\"", 
                    ButtonBox[
                    "\"Print local map\"", ButtonFunction :> 
                    Print[$CellContext`f$$ -> $CellContext`newMap$$], 
                    BaseStyle -> Small, Appearance -> Automatic, Evaluator -> 
                    Automatic, Method -> "Preemptive"]}}, AutoDelete -> False,
                     GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                   "Grid"]], DynamicModuleValues :> {}]}, {
              3, "\"Mack Balance\"" -> 
               DynamicModuleBox[{$CellContext`f$$ = 
                  "Emoluments:Partners Remuneration:Mack Balance", \
$CellContext`string$$ = "", $CellContext`newMap$$ = {}}, 
                 PanelBox[
                  TagBox[
                   GridBox[{{
                    StyleBox["\"String map\"", Bold, StripOnInput -> False], 
                    "\[SpanFromLeft]"}, {"\"Name:\"", 
                    InputFieldBox[
                    Dynamic[$CellContext`f$$], String, Enabled -> False]}, {
                    "\"String:\"", 
                    InputFieldBox[
                    Dynamic[$CellContext`string$$], String]}, {"\"\"", 
                    ButtonBox[
                    "\"Add string\"", 
                    ButtonFunction :> ($CellContext`newMap$$ = 
                    Union[$CellContext`newMap$$, {$CellContext`string$$}]; \
$CellContext`globMap["business"] = 
                    Union[{$CellContext`f$$ -> $CellContext`newMap$$}, 
                    Block[{$CellContext`p, $CellContext`g}, 
                    Monads`comprehend[Monads`Sets, $CellContext`p, 
                    Monads`generator[
                    Pattern[$CellContext`p, Pattern[$CellContext`g, 
                    Blank[]] -> Blank[]], 
                    $CellContext`globMap[
                    "business"]], $CellContext`g != $CellContext`f$$]]]), 
                    BaseStyle -> Small, Appearance -> Automatic, Evaluator -> 
                    Automatic, Method -> "Preemptive"]}, {"\"\"", 
                    ButtonBox[
                    "\"Remove string\"", 
                    ButtonFunction :> ($CellContext`newMap$$ = 
                    Complement[$CellContext`newMap$$, \
{$CellContext`string$$}]; $CellContext`globMap["business"] = 
                    Union[{$CellContext`f$$ -> $CellContext`newMap$$}, 
                    Block[{$CellContext`p, $CellContext`g}, 
                    Monads`comprehend[Monads`Sets, $CellContext`p, 
                    Monads`generator[
                    Pattern[$CellContext`p, Pattern[$CellContext`g, 
                    Blank[]] -> Blank[]], 
                    $CellContext`globMap[
                    "business"]], $CellContext`g != $CellContext`f$$]]]), 
                    BaseStyle -> Small, Appearance -> Automatic, Evaluator -> 
                    Automatic, Method -> "Preemptive"]}, {"\"\"", 
                    ButtonBox[
                    "\"Print local map\"", ButtonFunction :> 
                    Print[$CellContext`f$$ -> $CellContext`newMap$$], 
                    BaseStyle -> Small, Appearance -> Automatic, Evaluator -> 
                    Automatic, Method -> "Preemptive"]}}, AutoDelete -> False,
                     GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                   "Grid"]], DynamicModuleValues :> {}]}, {
              4, "\"Agatha Balance\"" -> 
               DynamicModuleBox[{$CellContext`f$$ = 
                  "Emoluments:Partners Remuneration:Agatha Balance", \
$CellContext`string$$ = "", $CellContext`newMap$$ = {}}, 
                 PanelBox[
                  TagBox[
                   GridBox[{{
                    StyleBox["\"String map\"", Bold, StripOnInput -> False], 
                    "\[SpanFromLeft]"}, {"\"Name:\"", 
                    InputFieldBox[
                    Dynamic[$CellContext`f$$], String, Enabled -> False]}, {
                    "\"String:\"", 
                    InputFieldBox[
                    Dynamic[$CellContext`string$$], String]}, {"\"\"", 
                    ButtonBox[
                    "\"Add string\"", 
                    ButtonFunction :> ($CellContext`newMap$$ = 
                    Union[$CellContext`newMap$$, {$CellContext`string$$}]; \
$CellContext`globMap["business"] = 
                    Union[{$CellContext`f$$ -> $CellContext`newMap$$}, 
                    Block[{$CellContext`p, $CellContext`g}, 
                    Monads`comprehend[Monads`Sets, $CellContext`p, 
                    Monads`generator[
                    Pattern[$CellContext`p, Pattern[$CellContext`g, 
                    Blank[]] -> Blank[]], 
                    $CellContext`globMap[
                    "business"]], $CellContext`g != $CellContext`f$$]]]), 
                    BaseStyle -> Small, Appearance -> Automatic, Evaluator -> 
                    Automatic, Method -> "Preemptive"]}, {"\"\"", 
                    ButtonBox[
                    "\"Remove string\"", 
                    ButtonFunction :> ($CellContext`newMap$$ = 
                    Complement[$CellContext`newMap$$, \
{$CellContext`string$$}]; $CellContext`globMap["business"] = 
                    Union[{$CellContext`f$$ -> $CellContext`newMap$$}, 
                    Block[{$CellContext`p, $CellContext`g}, 
                    Monads`comprehend[Monads`Sets, $CellContext`p, 
                    Monads`generator[
                    Pattern[$CellContext`p, Pattern[$CellContext`g, 
                    Blank[]] -> Blank[]], 
                    $CellContext`globMap[
                    "business"]], $CellContext`g != $CellContext`f$$]]]), 
                    BaseStyle -> Small, Appearance -> Automatic, Evaluator -> 
                    Automatic, Method -> "Preemptive"]}, {"\"\"", 
                    ButtonBox[
                    "\"Print local map\"", ButtonFunction :> 
                    Print[$CellContext`f$$ -> $CellContext`newMap$$], 
                    BaseStyle -> Small, Appearance -> Automatic, Evaluator -> 
                    Automatic, Method -> "Preemptive"]}}, AutoDelete -> False,
                     GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                   "Grid"]], DynamicModuleValues :> {}]}}, 1, 
             ControlPlacement -> {Center, Top}, LabelStyle -> Small]}, {
          2, "\"Employees:\"" -> 
           TabViewBox[{{
              1, "\"Gross Salaries\"" -> 
               DynamicModuleBox[{$CellContext`f$$ = 
                  "Emoluments:Employees:Gross Salaries", \
$CellContext`string$$ = "", $CellContext`newMap$$ = {}}, 
                 PanelBox[
                  TagBox[
                   GridBox[{{
                    StyleBox["\"String map\"", Bold, StripOnInput -> False], 
                    "\[SpanFromLeft]"}, {"\"Name:\"", 
                    InputFieldBox[
                    Dynamic[$CellContext`f$$], String, Enabled -> False]}, {
                    "\"String:\"", 
                    InputFieldBox[
                    Dynamic[$CellContext`string$$], String]}, {"\"\"", 
                    ButtonBox[
                    "\"Add string\"", 
                    ButtonFunction :> ($CellContext`newMap$$ = 
                    Union[$CellContext`newMap$$, {$CellContext`string$$}]; \
$CellContext`globMap["business"] = 
                    Union[{$CellContext`f$$ -> $CellContext`newMap$$}, 
                    Block[{$CellContext`p, $CellContext`g}, 
                    Monads`comprehend[Monads`Sets, $CellContext`p, 
                    Monads`generator[
                    Pattern[$CellContext`p, Pattern[$CellContext`g, 
                    Blank[]] -> Blank[]], 
                    $CellContext`globMap[
                    "business"]], $CellContext`g != $CellContext`f$$]]]), 
                    BaseStyle -> Small, Appearance -> Automatic, Evaluator -> 
                    Automatic, Method -> "Preemptive"]}, {"\"\"", 
                    ButtonBox[
                    "\"Remove string\"", 
                    ButtonFunction :> ($CellContext`newMap$$ = 
                    Complement[$CellContext`newMap$$, \
{$CellContext`string$$}]; $CellContext`globMap["business"] = 
                    Union[{$CellContext`f$$ -> $CellContext`newMap$$}, 
                    Block[{$CellContext`p, $CellContext`g}, 
                    Monads`comprehend[Monads`Sets, $CellContext`p, 
                    Monads`generator[
                    Pattern[$CellContext`p, Pattern[$CellContext`g, 
                    Blank[]] -> Blank[]], 
                    $CellContext`globMap[
                    "business"]], $CellContext`g != $CellContext`f$$]]]), 
                    BaseStyle -> Small, Appearance -> Automatic, Evaluator -> 
                    Automatic, Method -> "Preemptive"]}, {"\"\"", 
                    ButtonBox[
                    "\"Print local map\"", ButtonFunction :> 
                    Print[$CellContext`f$$ -> $CellContext`newMap$$], 
                    BaseStyle -> Small, Appearance -> Automatic, Evaluator -> 
                    Automatic, Method -> "Preemptive"]}}, AutoDelete -> False,
                     GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                   "Grid"]], DynamicModuleValues :> {}]}}, 1, 
             ControlPlacement -> {Center, Top}, LabelStyle -> Small]}}, 1, 
         ControlPlacement -> {Center, Top}, LabelStyle -> Small]}, {
      10, "\"VAT:\"" -> 
       TabViewBox[{{
          1, "\"Output:\"" -> 
           TabViewBox[{{
              1, "\"Sales\"" -> 
               DynamicModuleBox[{$CellContext`f$$ = 
                  "VAT:Output:Sales", $CellContext`string$$ = 
                  "", $CellContext`newMap$$ = {}}, 
                 PanelBox[
                  TagBox[
                   GridBox[{{
                    StyleBox["\"String map\"", Bold, StripOnInput -> False], 
                    "\[SpanFromLeft]"}, {"\"Name:\"", 
                    InputFieldBox[
                    Dynamic[$CellContext`f$$], String, Enabled -> False]}, {
                    "\"String:\"", 
                    InputFieldBox[
                    Dynamic[$CellContext`string$$], String]}, {"\"\"", 
                    ButtonBox[
                    "\"Add string\"", 
                    ButtonFunction :> ($CellContext`newMap$$ = 
                    Union[$CellContext`newMap$$, {$CellContext`string$$}]; \
$CellContext`globMap["business"] = 
                    Union[{$CellContext`f$$ -> $CellContext`newMap$$}, 
                    Block[{$CellContext`p, $CellContext`g}, 
                    Monads`comprehend[Monads`Sets, $CellContext`p, 
                    Monads`generator[
                    Pattern[$CellContext`p, Pattern[$CellContext`g, 
                    Blank[]] -> Blank[]], 
                    $CellContext`globMap[
                    "business"]], $CellContext`g != $CellContext`f$$]]]), 
                    BaseStyle -> Small, Appearance -> Automatic, Evaluator -> 
                    Automatic, Method -> "Preemptive"]}, {"\"\"", 
                    ButtonBox[
                    "\"Remove string\"", 
                    ButtonFunction :> ($CellContext`newMap$$ = 
                    Complement[$CellContext`newMap$$, \
{$CellContext`string$$}]; $CellContext`globMap["business"] = 
                    Union[{$CellContext`f$$ -> $CellContext`newMap$$}, 
                    Block[{$CellContext`p, $CellContext`g}, 
                    Monads`comprehend[Monads`Sets, $CellContext`p, 
                    Monads`generator[
                    Pattern[$CellContext`p, Pattern[$CellContext`g, 
                    Blank[]] -> Blank[]], 
                    $CellContext`globMap[
                    "business"]], $CellContext`g != $CellContext`f$$]]]), 
                    BaseStyle -> Small, Appearance -> Automatic, Evaluator -> 
                    Automatic, Method -> "Preemptive"]}, {"\"\"", 
                    ButtonBox[
                    "\"Print local map\"", ButtonFunction :> 
                    Print[$CellContext`f$$ -> $CellContext`newMap$$], 
                    BaseStyle -> Small, Appearance -> Automatic, Evaluator -> 
                    Automatic, Method -> "Preemptive"]}}, AutoDelete -> False,
                     GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                   "Grid"]], DynamicModuleValues :> {}]}}, 1, 
             ControlPlacement -> {Center, Top}, LabelStyle -> Small]}, {
          2, "\"Input\"" -> 
           DynamicModuleBox[{$CellContext`f$$ = 
              "VAT:Input", $CellContext`string$$ = 
              "", $CellContext`newMap$$ = {"HMRC VAT REPAY"}}, 
             PanelBox[
              TagBox[
               GridBox[{{
                  StyleBox["\"String map\"", Bold, StripOnInput -> False], 
                  "\[SpanFromLeft]"}, {"\"Name:\"", 
                  InputFieldBox[
                   Dynamic[$CellContext`f$$], String, Enabled -> False]}, {
                 "\"String:\"", 
                  InputFieldBox[
                   Dynamic[$CellContext`string$$], String]}, {"\"\"", 
                  ButtonBox[
                  "\"Add string\"", 
                   ButtonFunction :> ($CellContext`newMap$$ = 
                    Union[$CellContext`newMap$$, {$CellContext`string$$}]; \
$CellContext`globMap["business"] = 
                    Union[{$CellContext`f$$ -> $CellContext`newMap$$}, 
                    Block[{$CellContext`p, $CellContext`g}, 
                    Monads`comprehend[Monads`Sets, $CellContext`p, 
                    Monads`generator[
                    Pattern[$CellContext`p, Pattern[$CellContext`g, 
                    Blank[]] -> Blank[]], 
                    $CellContext`globMap[
                    "business"]], $CellContext`g != $CellContext`f$$]]]), 
                   BaseStyle -> Small, Appearance -> Automatic, Evaluator -> 
                   Automatic, Method -> "Preemptive"]}, {"\"\"", 
                  ButtonBox[
                  "\"Remove string\"", 
                   ButtonFunction :> ($CellContext`newMap$$ = 
                    Complement[$CellContext`newMap$$, \
{$CellContext`string$$}]; $CellContext`globMap["business"] = 
                    Union[{$CellContext`f$$ -> $CellContext`newMap$$}, 
                    Block[{$CellContext`p, $CellContext`g}, 
                    Monads`comprehend[Monads`Sets, $CellContext`p, 
                    Monads`generator[
                    Pattern[$CellContext`p, Pattern[$CellContext`g, 
                    Blank[]] -> Blank[]], 
                    $CellContext`globMap[
                    "business"]], $CellContext`g != $CellContext`f$$]]]), 
                   BaseStyle -> Small, Appearance -> Automatic, Evaluator -> 
                   Automatic, Method -> "Preemptive"]}, {"\"\"", 
                  ButtonBox[
                  "\"Print local map\"", ButtonFunction :> 
                   Print[$CellContext`f$$ -> $CellContext`newMap$$], 
                   BaseStyle -> Small, Appearance -> Automatic, Evaluator -> 
                   Automatic, Method -> "Preemptive"]}}, AutoDelete -> False, 
                GridBoxItemSize -> {
                 "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
               "Grid"]], DynamicModuleValues :> {}]}}, 1, 
         ControlPlacement -> {Center, Top}, LabelStyle -> Small]}, {
      11, "\"Taxes:\"" -> 
       TabViewBox[{{
          1, "\"Income Tax\"" -> 
           DynamicModuleBox[{$CellContext`f$$ = 
              "Taxes:Income Tax", $CellContext`string$$ = 
              "", $CellContext`newMap$$ = {}}, 
             PanelBox[
              TagBox[
               GridBox[{{
                  StyleBox["\"String map\"", Bold, StripOnInput -> False], 
                  "\[SpanFromLeft]"}, {"\"Name:\"", 
                  InputFieldBox[
                   Dynamic[$CellContext`f$$], String, Enabled -> False]}, {
                 "\"String:\"", 
                  InputFieldBox[
                   Dynamic[$CellContext`string$$], String]}, {"\"\"", 
                  ButtonBox[
                  "\"Add string\"", 
                   ButtonFunction :> ($CellContext`newMap$$ = 
                    Union[$CellContext`newMap$$, {$CellContext`string$$}]; \
$CellContext`globMap["business"] = 
                    Union[{$CellContext`f$$ -> $CellContext`newMap$$}, 
                    Block[{$CellContext`p, $CellContext`g}, 
                    Monads`comprehend[Monads`Sets, $CellContext`p, 
                    Monads`generator[
                    Pattern[$CellContext`p, Pattern[$CellContext`g, 
                    Blank[]] -> Blank[]], 
                    $CellContext`globMap[
                    "business"]], $CellContext`g != $CellContext`f$$]]]), 
                   BaseStyle -> Small, Appearance -> Automatic, Evaluator -> 
                   Automatic, Method -> "Preemptive"]}, {"\"\"", 
                  ButtonBox[
                  "\"Remove string\"", 
                   ButtonFunction :> ($CellContext`newMap$$ = 
                    Complement[$CellContext`newMap$$, \
{$CellContext`string$$}]; $CellContext`globMap["business"] = 
                    Union[{$CellContext`f$$ -> $CellContext`newMap$$}, 
                    Block[{$CellContext`p, $CellContext`g}, 
                    Monads`comprehend[Monads`Sets, $CellContext`p, 
                    Monads`generator[
                    Pattern[$CellContext`p, Pattern[$CellContext`g, 
                    Blank[]] -> Blank[]], 
                    $CellContext`globMap[
                    "business"]], $CellContext`g != $CellContext`f$$]]]), 
                   BaseStyle -> Small, Appearance -> Automatic, Evaluator -> 
                   Automatic, Method -> "Preemptive"]}, {"\"\"", 
                  ButtonBox[
                  "\"Print local map\"", ButtonFunction :> 
                   Print[$CellContext`f$$ -> $CellContext`newMap$$], 
                   BaseStyle -> Small, Appearance -> Automatic, Evaluator -> 
                   Automatic, Method -> "Preemptive"]}}, AutoDelete -> False, 
                GridBoxItemSize -> {
                 "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
               "Grid"]], DynamicModuleValues :> {}]}, {
          2, "\"Corporation Tax\"" -> 
           DynamicModuleBox[{$CellContext`f$$ = 
              "Taxes:Corporation Tax", $CellContext`string$$ = 
              "", $CellContext`newMap$$ = {}}, 
             PanelBox[
              TagBox[
               GridBox[{{
                  StyleBox["\"String map\"", Bold, StripOnInput -> False], 
                  "\[SpanFromLeft]"}, {"\"Name:\"", 
                  InputFieldBox[
                   Dynamic[$CellContext`f$$], String, Enabled -> False]}, {
                 "\"String:\"", 
                  InputFieldBox[
                   Dynamic[$CellContext`string$$], String]}, {"\"\"", 
                  ButtonBox[
                  "\"Add string\"", 
                   ButtonFunction :> ($CellContext`newMap$$ = 
                    Union[$CellContext`newMap$$, {$CellContext`string$$}]; \
$CellContext`globMap["business"] = 
                    Union[{$CellContext`f$$ -> $CellContext`newMap$$}, 
                    Block[{$CellContext`p, $CellContext`g}, 
                    Monads`comprehend[Monads`Sets, $CellContext`p, 
                    Monads`generator[
                    Pattern[$CellContext`p, Pattern[$CellContext`g, 
                    Blank[]] -> Blank[]], 
                    $CellContext`globMap[
                    "business"]], $CellContext`g != $CellContext`f$$]]]), 
                   BaseStyle -> Small, Appearance -> Automatic, Evaluator -> 
                   Automatic, Method -> "Preemptive"]}, {"\"\"", 
                  ButtonBox[
                  "\"Remove string\"", 
                   ButtonFunction :> ($CellContext`newMap$$ = 
                    Complement[$CellContext`newMap$$, \
{$CellContext`string$$}]; $CellContext`globMap["business"] = 
                    Union[{$CellContext`f$$ -> $CellContext`newMap$$}, 
                    Block[{$CellContext`p, $CellContext`g}, 
                    Monads`comprehend[Monads`Sets, $CellContext`p, 
                    Monads`generator[
                    Pattern[$CellContext`p, Pattern[$CellContext`g, 
                    Blank[]] -> Blank[]], 
                    $CellContext`globMap[
                    "business"]], $CellContext`g != $CellContext`f$$]]]), 
                   BaseStyle -> Small, Appearance -> Automatic, Evaluator -> 
                   Automatic, Method -> "Preemptive"]}, {"\"\"", 
                  ButtonBox[
                  "\"Print local map\"", ButtonFunction :> 
                   Print[$CellContext`f$$ -> $CellContext`newMap$$], 
                   BaseStyle -> Small, Appearance -> Automatic, Evaluator -> 
                   Automatic, Method -> "Preemptive"]}}, AutoDelete -> False, 
                GridBoxItemSize -> {
                 "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
               "Grid"]], DynamicModuleValues :> {}]}, {
          3, "\"Other Tax\"" -> 
           DynamicModuleBox[{$CellContext`f$$ = 
              "Taxes:Other Tax", $CellContext`string$$ = 
              "", $CellContext`newMap$$ = {}}, 
             PanelBox[
              TagBox[
               GridBox[{{
                  StyleBox["\"String map\"", Bold, StripOnInput -> False], 
                  "\[SpanFromLeft]"}, {"\"Name:\"", 
                  InputFieldBox[
                   Dynamic[$CellContext`f$$], String, Enabled -> False]}, {
                 "\"String:\"", 
                  InputFieldBox[
                   Dynamic[$CellContext`string$$], String]}, {"\"\"", 
                  ButtonBox[
                  "\"Add string\"", 
                   ButtonFunction :> ($CellContext`newMap$$ = 
                    Union[$CellContext`newMap$$, {$CellContext`string$$}]; \
$CellContext`globMap["business"] = 
                    Union[{$CellContext`f$$ -> $CellContext`newMap$$}, 
                    Block[{$CellContext`p, $CellContext`g}, 
                    Monads`comprehend[Monads`Sets, $CellContext`p, 
                    Monads`generator[
                    Pattern[$CellContext`p, Pattern[$CellContext`g, 
                    Blank[]] -> Blank[]], 
                    $CellContext`globMap[
                    "business"]], $CellContext`g != $CellContext`f$$]]]), 
                   BaseStyle -> Small, Appearance -> Automatic, Evaluator -> 
                   Automatic, Method -> "Preemptive"]}, {"\"\"", 
                  ButtonBox[
                  "\"Remove string\"", 
                   ButtonFunction :> ($CellContext`newMap$$ = 
                    Complement[$CellContext`newMap$$, \
{$CellContext`string$$}]; $CellContext`globMap["business"] = 
                    Union[{$CellContext`f$$ -> $CellContext`newMap$$}, 
                    Block[{$CellContext`p, $CellContext`g}, 
                    Monads`comprehend[Monads`Sets, $CellContext`p, 
                    Monads`generator[
                    Pattern[$CellContext`p, Pattern[$CellContext`g, 
                    Blank[]] -> Blank[]], 
                    $CellContext`globMap[
                    "business"]], $CellContext`g != $CellContext`f$$]]]), 
                   BaseStyle -> Small, Appearance -> Automatic, Evaluator -> 
                   Automatic, Method -> "Preemptive"]}, {"\"\"", 
                  ButtonBox[
                  "\"Print local map\"", ButtonFunction :> 
                   Print[$CellContext`f$$ -> $CellContext`newMap$$], 
                   BaseStyle -> Small, Appearance -> Automatic, Evaluator -> 
                   Automatic, Method -> "Preemptive"]}}, AutoDelete -> False, 
                GridBoxItemSize -> {
                 "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
               "Grid"]], DynamicModuleValues :> {}]}}, 1, 
         ControlPlacement -> {Center, Top}, LabelStyle -> Small]}, {
      12, "\"Junk\"" -> 
       DynamicModuleBox[{$CellContext`f$$ = "Junk", $CellContext`string$$ = 
          "", $CellContext`newMap$$ = {}}, 
         PanelBox[
          TagBox[
           GridBox[{{
              StyleBox["\"String map\"", Bold, StripOnInput -> False], 
              "\[SpanFromLeft]"}, {"\"Name:\"", 
              InputFieldBox[
               Dynamic[$CellContext`f$$], String, Enabled -> False]}, {
             "\"String:\"", 
              InputFieldBox[
               Dynamic[$CellContext`string$$], String]}, {"\"\"", 
              ButtonBox[
              "\"Add string\"", 
               ButtonFunction :> ($CellContext`newMap$$ = 
                 Union[$CellContext`newMap$$, {$CellContext`string$$}]; \
$CellContext`globMap["business"] = 
                 Union[{$CellContext`f$$ -> $CellContext`newMap$$}, 
                   Block[{$CellContext`p, $CellContext`g}, 
                    Monads`comprehend[Monads`Sets, $CellContext`p, 
                    Monads`generator[
                    Pattern[$CellContext`p, Pattern[$CellContext`g, 
                    Blank[]] -> Blank[]], 
                    $CellContext`globMap[
                    "business"]], $CellContext`g != $CellContext`f$$]]]), 
               BaseStyle -> Small, Appearance -> Automatic, Evaluator -> 
               Automatic, Method -> "Preemptive"]}, {"\"\"", 
              ButtonBox[
              "\"Remove string\"", 
               ButtonFunction :> ($CellContext`newMap$$ = 
                 
                 Complement[$CellContext`newMap$$, {$CellContext`string$$}]; \
$CellContext`globMap["business"] = 
                 Union[{$CellContext`f$$ -> $CellContext`newMap$$}, 
                   Block[{$CellContext`p, $CellContext`g}, 
                    Monads`comprehend[Monads`Sets, $CellContext`p, 
                    Monads`generator[
                    Pattern[$CellContext`p, Pattern[$CellContext`g, 
                    Blank[]] -> Blank[]], 
                    $CellContext`globMap[
                    "business"]], $CellContext`g != $CellContext`f$$]]]), 
               BaseStyle -> Small, Appearance -> Automatic, Evaluator -> 
               Automatic, Method -> "Preemptive"]}, {"\"\"", 
              ButtonBox[
              "\"Print local map\"", ButtonFunction :> 
               Print[$CellContext`f$$ -> $CellContext`newMap$$], BaseStyle -> 
               Small, Appearance -> Automatic, Evaluator -> Automatic, Method -> 
               "Preemptive"]}}, AutoDelete -> False, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Grid"]], 
         DynamicModuleValues :> {}]}}, DynamicDump`start$$ = 1, 
     DynamicDump`maxstart$$ = 3, DynamicDump`index$$ = 4}, 
     DynamicBox[TabViewBox[{{Typeset`first, (StyleBox[#, 
           CurrentValue[{"ControlsFontSize", Large}], FontColor -> 
           If[#2 === #3, Gray, Black]]& )[
          "\[FirstPage]", DynamicDump`start$$, 1] -> Null}, {
        Typeset`left, (StyleBox[#, 
           CurrentValue[{"ControlsFontSize", Large}], FontColor -> 
           If[#2 === #3, Gray, Black]]& )[
          "\[LeftPointer]", DynamicDump`start$$, 1] -> Null}, 
        Apply[Sequence, 
         Take[
         DynamicDump`tabdata$$, {
          DynamicDump`start$$, DynamicDump`start$$ + DynamicDump`width$$ - 
           1}]], {Typeset`right, (StyleBox[#, 
           CurrentValue[{"ControlsFontSize", Large}], FontColor -> 
           If[#2 === #3, Gray, Black]]& )[
          "\[RightPointer]", DynamicDump`start$$, DynamicDump`maxstart$$] -> 
         Null}, {Typeset`last, (StyleBox[#, 
           CurrentValue[{"ControlsFontSize", Large}], FontColor -> 
           If[#2 === #3, Gray, Black]]& )[
          "\[LastPage]", DynamicDump`start$$, DynamicDump`maxstart$$] -> 
         Null}}, 
       Dynamic[DynamicDump`index$$ = Quiet[
           Check[
            Part[
             Position[DynamicDump`tabdata$$, {Typeset`var$$, 
               Blank[]}, 1, 1], 1, 1], 0]]; If[
          Inequality[
          0, LessEqual, DynamicDump`index$$ - DynamicDump`start$$, Less, 
           DynamicDump`width$$], None, DynamicDump`start$$ = 
          Clip[Floor[(DynamicDump`index$$ - 1)/DynamicDump`jump$$] 
             DynamicDump`jump$$ + 1, {1, DynamicDump`maxstart$$}]]; 
        Typeset`var$$, 
        Switch[#, Typeset`first, DynamicDump`start$$ = 1; 
         Typeset`var$$ = Part[DynamicDump`tabdata$$, DynamicDump`start$$, 1], 
         Typeset`left, 
         DynamicDump`start$$ = 
          Max[DynamicDump`start$$ - DynamicDump`jump$$, 1]; 
         Typeset`var$$ = Part[DynamicDump`tabdata$$, DynamicDump`start$$, 1], 
         Typeset`right, 
         DynamicDump`start$$ = 
          Min[DynamicDump`start$$ + DynamicDump`jump$$, 
            DynamicDump`maxstart$$]; 
         Typeset`var$$ = 
          Part[DynamicDump`tabdata$$, DynamicDump`start$$ + 
            DynamicDump`width$$ - 1, 1], Typeset`last, 
         DynamicDump`start$$ = DynamicDump`maxstart$$; 
         Typeset`var$$ = 
          Part[DynamicDump`tabdata$$, DynamicDump`start$$ + 
            DynamicDump`width$$ - 1, 1], 
         Blank[], Typeset`var$$ = #]& ], 
       Apply[Sequence, 
        DeleteCases[{ControlPlacement -> {Center, Top}, LabelStyle -> Small}, 
         
         Blank[][Method, 
          Blank[]]]]],
      ImageSizeCache->{1143., {207., 215.}}],
     DynamicModuleValues:>{}],
    TabView[{
     "Bank Accounts:" -> 
      TabView[{"Business Account" -> 
         DynamicModule[{$CellContext`f = 
            "Bank Accounts:Business Account", $CellContext`string = 
            "", $CellContext`newMap = {}}, 
           Panel[
            Grid[{{
               Style["String map", Bold], SpanFromLeft}, {"Name:", 
               InputField[
                Dynamic[$CellContext`f], String, Enabled -> False]}, {
              "String:", 
               InputField[
                Dynamic[$CellContext`string], String]}, {"", 
               Button[
               "Add string", $CellContext`newMap = 
                 Union[$CellContext`newMap, {$CellContext`string}]; \
$CellContext`globMap["business"] = 
                 Union[{$CellContext`f -> $CellContext`newMap}, 
                   Block[{$CellContext`p, $CellContext`g}, 
                    Monads`comprehend[Monads`Sets, $CellContext`p, 
                    Monads`generator[
                    Pattern[$CellContext`p, Pattern[$CellContext`g, 
                    Blank[]] -> Blank[]], 
                    $CellContext`globMap[
                    "business"]], $CellContext`g != $CellContext`f]]], 
                BaseStyle -> Small]}, {"", 
               Button[
               "Remove string", $CellContext`newMap = 
                 Complement[$CellContext`newMap, {$CellContext`string}]; \
$CellContext`globMap["business"] = 
                 Union[{$CellContext`f -> $CellContext`newMap}, 
                   Block[{$CellContext`p, $CellContext`g}, 
                    Monads`comprehend[Monads`Sets, $CellContext`p, 
                    Monads`generator[
                    Pattern[$CellContext`p, Pattern[$CellContext`g, 
                    Blank[]] -> Blank[]], 
                    $CellContext`globMap[
                    "business"]], $CellContext`g != $CellContext`f]]], 
                BaseStyle -> Small]}, {"", 
               Button["Print local map", 
                Print[$CellContext`f -> $CellContext`newMap], BaseStyle -> 
                Small]}}]], DynamicModuleValues :> {}]}, 
        ControlPlacement -> {Center, Top}, LabelStyle -> Small, 
        Appearance -> {"Limited", 10}], "Assets:" -> 
      TabView[{"Capital Equipment:" -> 
         TabView[{
           "Computer Equipment" -> 
            DynamicModule[{$CellContext`f = 
               "Assets:Capital Equipment:Computer Equipment", \
$CellContext`string = "", $CellContext`newMap = {}}, 
              Panel[
               Grid[{{
                  Style["String map", Bold], SpanFromLeft}, {"Name:", 
                  InputField[
                   Dynamic[$CellContext`f], String, Enabled -> False]}, {
                 "String:", 
                  InputField[
                   Dynamic[$CellContext`string], String]}, {"", 
                  Button[
                  "Add string", $CellContext`newMap = 
                    Union[$CellContext`newMap, {$CellContext`string}]; \
$CellContext`globMap["business"] = 
                    Union[{$CellContext`f -> $CellContext`newMap}, 
                    Block[{$CellContext`p, $CellContext`g}, 
                    Monads`comprehend[Monads`Sets, $CellContext`p, 
                    Monads`generator[
                    Pattern[$CellContext`p, Pattern[$CellContext`g, 
                    Blank[]] -> Blank[]], 
                    $CellContext`globMap[
                    "business"]], $CellContext`g != $CellContext`f]]], 
                   BaseStyle -> Small]}, {"", 
                  Button[
                  "Remove string", $CellContext`newMap = 
                    Complement[$CellContext`newMap, {$CellContext`string}]; \
$CellContext`globMap["business"] = 
                    Union[{$CellContext`f -> $CellContext`newMap}, 
                    Block[{$CellContext`p, $CellContext`g}, 
                    Monads`comprehend[Monads`Sets, $CellContext`p, 
                    Monads`generator[
                    Pattern[$CellContext`p, Pattern[$CellContext`g, 
                    Blank[]] -> Blank[]], 
                    $CellContext`globMap[
                    "business"]], $CellContext`g != $CellContext`f]]], 
                   BaseStyle -> Small]}, {"", 
                  Button["Print local map", 
                   Print[$CellContext`f -> $CellContext`newMap], BaseStyle -> 
                   Small]}}]], DynamicModuleValues :> {}], "Machinery" -> 
            DynamicModule[{$CellContext`f = 
               "Assets:Capital Equipment:Machinery", $CellContext`string = 
               "", $CellContext`newMap = {}}, 
              Panel[
               Grid[{{
                  Style["String map", Bold], SpanFromLeft}, {"Name:", 
                  InputField[
                   Dynamic[$CellContext`f], String, Enabled -> False]}, {
                 "String:", 
                  InputField[
                   Dynamic[$CellContext`string], String]}, {"", 
                  Button[
                  "Add string", $CellContext`newMap = 
                    Union[$CellContext`newMap, {$CellContext`string}]; \
$CellContext`globMap["business"] = 
                    Union[{$CellContext`f -> $CellContext`newMap}, 
                    Block[{$CellContext`p, $CellContext`g}, 
                    Monads`comprehend[Monads`Sets, $CellContext`p, 
                    Monads`generator[
                    Pattern[$CellContext`p, Pattern[$CellContext`g, 
                    Blank[]] -> Blank[]], 
                    $CellContext`globMap[
                    "business"]], $CellContext`g != $CellContext`f]]], 
                   BaseStyle -> Small]}, {"", 
                  Button[
                  "Remove string", $CellContext`newMap = 
                    Complement[$CellContext`newMap, {$CellContext`string}]; \
$CellContext`globMap["business"] = 
                    Union[{$CellContext`f -> $CellContext`newMap}, 
                    Block[{$CellContext`p, $CellContext`g}, 
                    Monads`comprehend[Monads`Sets, $CellContext`p, 
                    Monads`generator[
                    Pattern[$CellContext`p, Pattern[$CellContext`g, 
                    Blank[]] -> Blank[]], 
                    $CellContext`globMap[
                    "business"]], $CellContext`g != $CellContext`f]]], 
                   BaseStyle -> Small]}, {"", 
                  Button["Print local map", 
                   Print[$CellContext`f -> $CellContext`newMap], BaseStyle -> 
                   Small]}}]], DynamicModuleValues :> {}]}, 
           ControlPlacement -> {Center, Top}, LabelStyle -> Small, 
           Appearance -> {"Limited", 10}], "Accounts Receivable" -> 
         DynamicModule[{$CellContext`f = 
            "Assets:Accounts Receivable", $CellContext`string = 
            "", $CellContext`newMap = {}}, 
           Panel[
            Grid[{{
               Style["String map", Bold], SpanFromLeft}, {"Name:", 
               InputField[
                Dynamic[$CellContext`f], String, Enabled -> False]}, {
              "String:", 
               InputField[
                Dynamic[$CellContext`string], String]}, {"", 
               Button[
               "Add string", $CellContext`newMap = 
                 Union[$CellContext`newMap, {$CellContext`string}]; \
$CellContext`globMap["business"] = 
                 Union[{$CellContext`f -> $CellContext`newMap}, 
                   Block[{$CellContext`p, $CellContext`g}, 
                    Monads`comprehend[Monads`Sets, $CellContext`p, 
                    Monads`generator[
                    Pattern[$CellContext`p, Pattern[$CellContext`g, 
                    Blank[]] -> Blank[]], 
                    $CellContext`globMap[
                    "business"]], $CellContext`g != $CellContext`f]]], 
                BaseStyle -> Small]}, {"", 
               Button[
               "Remove string", $CellContext`newMap = 
                 Complement[$CellContext`newMap, {$CellContext`string}]; \
$CellContext`globMap["business"] = 
                 Union[{$CellContext`f -> $CellContext`newMap}, 
                   Block[{$CellContext`p, $CellContext`g}, 
                    Monads`comprehend[Monads`Sets, $CellContext`p, 
                    Monads`generator[
                    Pattern[$CellContext`p, Pattern[$CellContext`g, 
                    Blank[]] -> Blank[]], 
                    $CellContext`globMap[
                    "business"]], $CellContext`g != $CellContext`f]]], 
                BaseStyle -> Small]}, {"", 
               Button["Print local map", 
                Print[$CellContext`f -> $CellContext`newMap], BaseStyle -> 
                Small]}}]], DynamicModuleValues :> {}], "Buildings" -> 
         DynamicModule[{$CellContext`f = 
            "Assets:Buildings", $CellContext`string = 
            "", $CellContext`newMap = {}}, 
           Panel[
            Grid[{{
               Style["String map", Bold], SpanFromLeft}, {"Name:", 
               InputField[
                Dynamic[$CellContext`f], String, Enabled -> False]}, {
              "String:", 
               InputField[
                Dynamic[$CellContext`string], String]}, {"", 
               Button[
               "Add string", $CellContext`newMap = 
                 Union[$CellContext`newMap, {$CellContext`string}]; \
$CellContext`globMap["business"] = 
                 Union[{$CellContext`f -> $CellContext`newMap}, 
                   Block[{$CellContext`p, $CellContext`g}, 
                    Monads`comprehend[Monads`Sets, $CellContext`p, 
                    Monads`generator[
                    Pattern[$CellContext`p, Pattern[$CellContext`g, 
                    Blank[]] -> Blank[]], 
                    $CellContext`globMap[
                    "business"]], $CellContext`g != $CellContext`f]]], 
                BaseStyle -> Small]}, {"", 
               Button[
               "Remove string", $CellContext`newMap = 
                 Complement[$CellContext`newMap, {$CellContext`string}]; \
$CellContext`globMap["business"] = 
                 Union[{$CellContext`f -> $CellContext`newMap}, 
                   Block[{$CellContext`p, $CellContext`g}, 
                    Monads`comprehend[Monads`Sets, $CellContext`p, 
                    Monads`generator[
                    Pattern[$CellContext`p, Pattern[$CellContext`g, 
                    Blank[]] -> Blank[]], 
                    $CellContext`globMap[
                    "business"]], $CellContext`g != $CellContext`f]]], 
                BaseStyle -> Small]}, {"", 
               Button["Print local map", 
                Print[$CellContext`f -> $CellContext`newMap], BaseStyle -> 
                Small]}}]], DynamicModuleValues :> {}], "Cash in Hand" -> 
         DynamicModule[{$CellContext`f = 
            "Assets:Cash in Hand", $CellContext`string = 
            "", $CellContext`newMap = {"ATM Debit"}}, 
           Panel[
            Grid[{{
               Style["String map", Bold], SpanFromLeft}, {"Name:", 
               InputField[
                Dynamic[$CellContext`f], String, Enabled -> False]}, {
              "String:", 
               InputField[
                Dynamic[$CellContext`string], String]}, {"", 
               Button[
               "Add string", $CellContext`newMap = 
                 Union[$CellContext`newMap, {$CellContext`string}]; \
$CellContext`globMap["business"] = 
                 Union[{$CellContext`f -> $CellContext`newMap}, 
                   Block[{$CellContext`p, $CellContext`g}, 
                    Monads`comprehend[Monads`Sets, $CellContext`p, 
                    Monads`generator[
                    Pattern[$CellContext`p, Pattern[$CellContext`g, 
                    Blank[]] -> Blank[]], 
                    $CellContext`globMap[
                    "business"]], $CellContext`g != $CellContext`f]]], 
                BaseStyle -> Small]}, {"", 
               Button[
               "Remove string", $CellContext`newMap = 
                 Complement[$CellContext`newMap, {$CellContext`string}]; \
$CellContext`globMap["business"] = 
                 Union[{$CellContext`f -> $CellContext`newMap}, 
                   Block[{$CellContext`p, $CellContext`g}, 
                    Monads`comprehend[Monads`Sets, $CellContext`p, 
                    Monads`generator[
                    Pattern[$CellContext`p, Pattern[$CellContext`g, 
                    Blank[]] -> Blank[]], 
                    $CellContext`globMap[
                    "business"]], $CellContext`g != $CellContext`f]]], 
                BaseStyle -> Small]}, {"", 
               Button["Print local map", 
                Print[$CellContext`f -> $CellContext`newMap], BaseStyle -> 
                Small]}}]], DynamicModuleValues :> {}], "Land" -> 
         DynamicModule[{$CellContext`f = "Assets:Land", $CellContext`string = 
            "", $CellContext`newMap = {}}, 
           Panel[
            Grid[{{
               Style["String map", Bold], SpanFromLeft}, {"Name:", 
               InputField[
                Dynamic[$CellContext`f], String, Enabled -> False]}, {
              "String:", 
               InputField[
                Dynamic[$CellContext`string], String]}, {"", 
               Button[
               "Add string", $CellContext`newMap = 
                 Union[$CellContext`newMap, {$CellContext`string}]; \
$CellContext`globMap["business"] = 
                 Union[{$CellContext`f -> $CellContext`newMap}, 
                   Block[{$CellContext`p, $CellContext`g}, 
                    Monads`comprehend[Monads`Sets, $CellContext`p, 
                    Monads`generator[
                    Pattern[$CellContext`p, Pattern[$CellContext`g, 
                    Blank[]] -> Blank[]], 
                    $CellContext`globMap[
                    "business"]], $CellContext`g != $CellContext`f]]], 
                BaseStyle -> Small]}, {"", 
               Button[
               "Remove string", $CellContext`newMap = 
                 Complement[$CellContext`newMap, {$CellContext`string}]; \
$CellContext`globMap["business"] = 
                 Union[{$CellContext`f -> $CellContext`newMap}, 
                   Block[{$CellContext`p, $CellContext`g}, 
                    Monads`comprehend[Monads`Sets, $CellContext`p, 
                    Monads`generator[
                    Pattern[$CellContext`p, Pattern[$CellContext`g, 
                    Blank[]] -> Blank[]], 
                    $CellContext`globMap[
                    "business"]], $CellContext`g != $CellContext`f]]], 
                BaseStyle -> Small]}, {"", 
               Button["Print local map", 
                Print[$CellContext`f -> $CellContext`newMap], BaseStyle -> 
                Small]}}]], DynamicModuleValues :> {}], "Plantations" -> 
         DynamicModule[{$CellContext`f = 
            "Assets:Plantations", $CellContext`string = 
            "", $CellContext`newMap = {}}, 
           Panel[
            Grid[{{
               Style["String map", Bold], SpanFromLeft}, {"Name:", 
               InputField[
                Dynamic[$CellContext`f], String, Enabled -> False]}, {
              "String:", 
               InputField[
                Dynamic[$CellContext`string], String]}, {"", 
               Button[
               "Add string", $CellContext`newMap = 
                 Union[$CellContext`newMap, {$CellContext`string}]; \
$CellContext`globMap["business"] = 
                 Union[{$CellContext`f -> $CellContext`newMap}, 
                   Block[{$CellContext`p, $CellContext`g}, 
                    Monads`comprehend[Monads`Sets, $CellContext`p, 
                    Monads`generator[
                    Pattern[$CellContext`p, Pattern[$CellContext`g, 
                    Blank[]] -> Blank[]], 
                    $CellContext`globMap[
                    "business"]], $CellContext`g != $CellContext`f]]], 
                BaseStyle -> Small]}, {"", 
               Button[
               "Remove string", $CellContext`newMap = 
                 Complement[$CellContext`newMap, {$CellContext`string}]; \
$CellContext`globMap["business"] = 
                 Union[{$CellContext`f -> $CellContext`newMap}, 
                   Block[{$CellContext`p, $CellContext`g}, 
                    Monads`comprehend[Monads`Sets, $CellContext`p, 
                    Monads`generator[
                    Pattern[$CellContext`p, Pattern[$CellContext`g, 
                    Blank[]] -> Blank[]], 
                    $CellContext`globMap[
                    "business"]], $CellContext`g != $CellContext`f]]], 
                BaseStyle -> Small]}, {"", 
               Button["Print local map", 
                Print[$CellContext`f -> $CellContext`newMap], BaseStyle -> 
                Small]}}]], DynamicModuleValues :> {}]}, 
        ControlPlacement -> {Center, Top}, LabelStyle -> Small, 
        Appearance -> {"Limited", 10}], "Liabilities:" -> 
      TabView[{"Credit Card" -> 
         DynamicModule[{$CellContext`f = 
            "Liabilities:Credit Card", $CellContext`string = 
            "", $CellContext`newMap = {}}, 
           Panel[
            Grid[{{
               Style["String map", Bold], SpanFromLeft}, {"Name:", 
               InputField[
                Dynamic[$CellContext`f], String, Enabled -> False]}, {
              "String:", 
               InputField[
                Dynamic[$CellContext`string], String]}, {"", 
               Button[
               "Add string", $CellContext`newMap = 
                 Union[$CellContext`newMap, {$CellContext`string}]; \
$CellContext`globMap["business"] = 
                 Union[{$CellContext`f -> $CellContext`newMap}, 
                   Block[{$CellContext`p, $CellContext`g}, 
                    Monads`comprehend[Monads`Sets, $CellContext`p, 
                    Monads`generator[
                    Pattern[$CellContext`p, Pattern[$CellContext`g, 
                    Blank[]] -> Blank[]], 
                    $CellContext`globMap[
                    "business"]], $CellContext`g != $CellContext`f]]], 
                BaseStyle -> Small]}, {"", 
               Button[
               "Remove string", $CellContext`newMap = 
                 Complement[$CellContext`newMap, {$CellContext`string}]; \
$CellContext`globMap["business"] = 
                 Union[{$CellContext`f -> $CellContext`newMap}, 
                   Block[{$CellContext`p, $CellContext`g}, 
                    Monads`comprehend[Monads`Sets, $CellContext`p, 
                    Monads`generator[
                    Pattern[$CellContext`p, Pattern[$CellContext`g, 
                    Blank[]] -> Blank[]], 
                    $CellContext`globMap[
                    "business"]], $CellContext`g != $CellContext`f]]], 
                BaseStyle -> Small]}, {"", 
               Button["Print local map", 
                Print[$CellContext`f -> $CellContext`newMap], BaseStyle -> 
                Small]}}]], DynamicModuleValues :> {}], "Accounts Payable" -> 
         DynamicModule[{$CellContext`f = 
            "Liabilities:Accounts Payable", $CellContext`string = 
            "", $CellContext`newMap = {}}, 
           Panel[
            Grid[{{
               Style["String map", Bold], SpanFromLeft}, {"Name:", 
               InputField[
                Dynamic[$CellContext`f], String, Enabled -> False]}, {
              "String:", 
               InputField[
                Dynamic[$CellContext`string], String]}, {"", 
               Button[
               "Add string", $CellContext`newMap = 
                 Union[$CellContext`newMap, {$CellContext`string}]; \
$CellContext`globMap["business"] = 
                 Union[{$CellContext`f -> $CellContext`newMap}, 
                   Block[{$CellContext`p, $CellContext`g}, 
                    Monads`comprehend[Monads`Sets, $CellContext`p, 
                    Monads`generator[
                    Pattern[$CellContext`p, Pattern[$CellContext`g, 
                    Blank[]] -> Blank[]], 
                    $CellContext`globMap[
                    "business"]], $CellContext`g != $CellContext`f]]], 
                BaseStyle -> Small]}, {"", 
               Button[
               "Remove string", $CellContext`newMap = 
                 Complement[$CellContext`newMap, {$CellContext`string}]; \
$CellContext`globMap["business"] = 
                 Union[{$CellContext`f -> $CellContext`newMap}, 
                   Block[{$CellContext`p, $CellContext`g}, 
                    Monads`comprehend[Monads`Sets, $CellContext`p, 
                    Monads`generator[
                    Pattern[$CellContext`p, Pattern[$CellContext`g, 
                    Blank[]] -> Blank[]], 
                    $CellContext`globMap[
                    "business"]], $CellContext`g != $CellContext`f]]], 
                BaseStyle -> Small]}, {"", 
               Button["Print local map", 
                Print[$CellContext`f -> $CellContext`newMap], BaseStyle -> 
                Small]}}]], DynamicModuleValues :> {}]}, 
        ControlPlacement -> {Center, Top}, LabelStyle -> Small, 
        Appearance -> {"Limited", 10}], "Equity:" -> 
      TabView[{"Partners Loan:" -> 
         TabView[{
           "Matthew loan" -> 
            DynamicModule[{$CellContext`f = 
               "Equity:Partners Loan:Matthew loan", $CellContext`string = 
               "", $CellContext`newMap = {}}, 
              Panel[
               Grid[{{
                  Style["String map", Bold], SpanFromLeft}, {"Name:", 
                  InputField[
                   Dynamic[$CellContext`f], String, Enabled -> False]}, {
                 "String:", 
                  InputField[
                   Dynamic[$CellContext`string], String]}, {"", 
                  Button[
                  "Add string", $CellContext`newMap = 
                    Union[$CellContext`newMap, {$CellContext`string}]; \
$CellContext`globMap["business"] = 
                    Union[{$CellContext`f -> $CellContext`newMap}, 
                    Block[{$CellContext`p, $CellContext`g}, 
                    Monads`comprehend[Monads`Sets, $CellContext`p, 
                    Monads`generator[
                    Pattern[$CellContext`p, Pattern[$CellContext`g, 
                    Blank[]] -> Blank[]], 
                    $CellContext`globMap[
                    "business"]], $CellContext`g != $CellContext`f]]], 
                   BaseStyle -> Small]}, {"", 
                  Button[
                  "Remove string", $CellContext`newMap = 
                    Complement[$CellContext`newMap, {$CellContext`string}]; \
$CellContext`globMap["business"] = 
                    Union[{$CellContext`f -> $CellContext`newMap}, 
                    Block[{$CellContext`p, $CellContext`g}, 
                    Monads`comprehend[Monads`Sets, $CellContext`p, 
                    Monads`generator[
                    Pattern[$CellContext`p, Pattern[$CellContext`g, 
                    Blank[]] -> Blank[]], 
                    $CellContext`globMap[
                    "business"]], $CellContext`g != $CellContext`f]]], 
                   BaseStyle -> Small]}, {"", 
                  Button["Print local map", 
                   Print[$CellContext`f -> $CellContext`newMap], BaseStyle -> 
                   Small]}}]], DynamicModuleValues :> {}], "Beth loan" -> 
            DynamicModule[{$CellContext`f = 
               "Equity:Partners Loan:Beth loan", $CellContext`string = 
               "", $CellContext`newMap = {}}, 
              Panel[
               Grid[{{
                  Style["String map", Bold], SpanFromLeft}, {"Name:", 
                  InputField[
                   Dynamic[$CellContext`f], String, Enabled -> False]}, {
                 "String:", 
                  InputField[
                   Dynamic[$CellContext`string], String]}, {"", 
                  Button[
                  "Add string", $CellContext`newMap = 
                    Union[$CellContext`newMap, {$CellContext`string}]; \
$CellContext`globMap["business"] = 
                    Union[{$CellContext`f -> $CellContext`newMap}, 
                    Block[{$CellContext`p, $CellContext`g}, 
                    Monads`comprehend[Monads`Sets, $CellContext`p, 
                    Monads`generator[
                    Pattern[$CellContext`p, Pattern[$CellContext`g, 
                    Blank[]] -> Blank[]], 
                    $CellContext`globMap[
                    "business"]], $CellContext`g != $CellContext`f]]], 
                   BaseStyle -> Small]}, {"", 
                  Button[
                  "Remove string", $CellContext`newMap = 
                    Complement[$CellContext`newMap, {$CellContext`string}]; \
$CellContext`globMap["business"] = 
                    Union[{$CellContext`f -> $CellContext`newMap}, 
                    Block[{$CellContext`p, $CellContext`g}, 
                    Monads`comprehend[Monads`Sets, $CellContext`p, 
                    Monads`generator[
                    Pattern[$CellContext`p, Pattern[$CellContext`g, 
                    Blank[]] -> Blank[]], 
                    $CellContext`globMap[
                    "business"]], $CellContext`g != $CellContext`f]]], 
                   BaseStyle -> Small]}, {"", 
                  Button["Print local map", 
                   Print[$CellContext`f -> $CellContext`newMap], BaseStyle -> 
                   Small]}}]], DynamicModuleValues :> {}], "Connor loan" -> 
            DynamicModule[{$CellContext`f = 
               "Equity:Partners Loan:Connor loan", $CellContext`string = 
               "", $CellContext`newMap = {}}, 
              Panel[
               Grid[{{
                  Style["String map", Bold], SpanFromLeft}, {"Name:", 
                  InputField[
                   Dynamic[$CellContext`f], String, Enabled -> False]}, {
                 "String:", 
                  InputField[
                   Dynamic[$CellContext`string], String]}, {"", 
                  Button[
                  "Add string", $CellContext`newMap = 
                    Union[$CellContext`newMap, {$CellContext`string}]; \
$CellContext`globMap["business"] = 
                    Union[{$CellContext`f -> $CellContext`newMap}, 
                    Block[{$CellContext`p, $CellContext`g}, 
                    Monads`comprehend[Monads`Sets, $CellContext`p, 
                    Monads`generator[
                    Pattern[$CellContext`p, Pattern[$CellContext`g, 
                    Blank[]] -> Blank[]], 
                    $CellContext`globMap[
                    "business"]], $CellContext`g != $CellContext`f]]], 
                   BaseStyle -> Small]}, {"", 
                  Button[
                  "Remove string", $CellContext`newMap = 
                    Complement[$CellContext`newMap, {$CellContext`string}]; \
$CellContext`globMap["business"] = 
                    Union[{$CellContext`f -> $CellContext`newMap}, 
                    Block[{$CellContext`p, $CellContext`g}, 
                    Monads`comprehend[Monads`Sets, $CellContext`p, 
                    Monads`generator[
                    Pattern[$CellContext`p, Pattern[$CellContext`g, 
                    Blank[]] -> Blank[]], 
                    $CellContext`globMap[
                    "business"]], $CellContext`g != $CellContext`f]]], 
                   BaseStyle -> Small]}, {"", 
                  Button["Print local map", 
                   Print[$CellContext`f -> $CellContext`newMap], BaseStyle -> 
                   Small]}}]], DynamicModuleValues :> {}], "Mack loan" -> 
            DynamicModule[{$CellContext`f = 
               "Equity:Partners Loan:Mack loan", $CellContext`string = 
               "", $CellContext`newMap = {}}, 
              Panel[
               Grid[{{
                  Style["String map", Bold], SpanFromLeft}, {"Name:", 
                  InputField[
                   Dynamic[$CellContext`f], String, Enabled -> False]}, {
                 "String:", 
                  InputField[
                   Dynamic[$CellContext`string], String]}, {"", 
                  Button[
                  "Add string", $CellContext`newMap = 
                    Union[$CellContext`newMap, {$CellContext`string}]; \
$CellContext`globMap["business"] = 
                    Union[{$CellContext`f -> $CellContext`newMap}, 
                    Block[{$CellContext`p, $CellContext`g}, 
                    Monads`comprehend[Monads`Sets, $CellContext`p, 
                    Monads`generator[
                    Pattern[$CellContext`p, Pattern[$CellContext`g, 
                    Blank[]] -> Blank[]], 
                    $CellContext`globMap[
                    "business"]], $CellContext`g != $CellContext`f]]], 
                   BaseStyle -> Small]}, {"", 
                  Button[
                  "Remove string", $CellContext`newMap = 
                    Complement[$CellContext`newMap, {$CellContext`string}]; \
$CellContext`globMap["business"] = 
                    Union[{$CellContext`f -> $CellContext`newMap}, 
                    Block[{$CellContext`p, $CellContext`g}, 
                    Monads`comprehend[Monads`Sets, $CellContext`p, 
                    Monads`generator[
                    Pattern[$CellContext`p, Pattern[$CellContext`g, 
                    Blank[]] -> Blank[]], 
                    $CellContext`globMap[
                    "business"]], $CellContext`g != $CellContext`f]]], 
                   BaseStyle -> Small]}, {"", 
                  Button["Print local map", 
                   Print[$CellContext`f -> $CellContext`newMap], BaseStyle -> 
                   Small]}}]], DynamicModuleValues :> {}], "Agatha loan" -> 
            DynamicModule[{$CellContext`f = 
               "Equity:Partners Loan:Agatha loan", $CellContext`string = 
               "", $CellContext`newMap = {}}, 
              Panel[
               Grid[{{
                  Style["String map", Bold], SpanFromLeft}, {"Name:", 
                  InputField[
                   Dynamic[$CellContext`f], String, Enabled -> False]}, {
                 "String:", 
                  InputField[
                   Dynamic[$CellContext`string], String]}, {"", 
                  Button[
                  "Add string", $CellContext`newMap = 
                    Union[$CellContext`newMap, {$CellContext`string}]; \
$CellContext`globMap["business"] = 
                    Union[{$CellContext`f -> $CellContext`newMap}, 
                    Block[{$CellContext`p, $CellContext`g}, 
                    Monads`comprehend[Monads`Sets, $CellContext`p, 
                    Monads`generator[
                    Pattern[$CellContext`p, Pattern[$CellContext`g, 
                    Blank[]] -> Blank[]], 
                    $CellContext`globMap[
                    "business"]], $CellContext`g != $CellContext`f]]], 
                   BaseStyle -> Small]}, {"", 
                  Button[
                  "Remove string", $CellContext`newMap = 
                    Complement[$CellContext`newMap, {$CellContext`string}]; \
$CellContext`globMap["business"] = 
                    Union[{$CellContext`f -> $CellContext`newMap}, 
                    Block[{$CellContext`p, $CellContext`g}, 
                    Monads`comprehend[Monads`Sets, $CellContext`p, 
                    Monads`generator[
                    Pattern[$CellContext`p, Pattern[$CellContext`g, 
                    Blank[]] -> Blank[]], 
                    $CellContext`globMap[
                    "business"]], $CellContext`g != $CellContext`f]]], 
                   BaseStyle -> Small]}, {"", 
                  Button["Print local map", 
                   Print[$CellContext`f -> $CellContext`newMap], BaseStyle -> 
                   Small]}}]], DynamicModuleValues :> {}]}, 
           ControlPlacement -> {Center, Top}, LabelStyle -> Small, 
           Appearance -> {"Limited", 10}], "Capital:" -> 
         TabView[{
           "Matthew capital" -> 
            DynamicModule[{$CellContext`f = 
               "Equity:Capital:Matthew capital", $CellContext`string = 
               "", $CellContext`newMap = {}}, 
              Panel[
               Grid[{{
                  Style["String map", Bold], SpanFromLeft}, {"Name:", 
                  InputField[
                   Dynamic[$CellContext`f], String, Enabled -> False]}, {
                 "String:", 
                  InputField[
                   Dynamic[$CellContext`string], String]}, {"", 
                  Button[
                  "Add string", $CellContext`newMap = 
                    Union[$CellContext`newMap, {$CellContext`string}]; \
$CellContext`globMap["business"] = 
                    Union[{$CellContext`f -> $CellContext`newMap}, 
                    Block[{$CellContext`p, $CellContext`g}, 
                    Monads`comprehend[Monads`Sets, $CellContext`p, 
                    Monads`generator[
                    Pattern[$CellContext`p, Pattern[$CellContext`g, 
                    Blank[]] -> Blank[]], 
                    $CellContext`globMap[
                    "business"]], $CellContext`g != $CellContext`f]]], 
                   BaseStyle -> Small]}, {"", 
                  Button[
                  "Remove string", $CellContext`newMap = 
                    Complement[$CellContext`newMap, {$CellContext`string}]; \
$CellContext`globMap["business"] = 
                    Union[{$CellContext`f -> $CellContext`newMap}, 
                    Block[{$CellContext`p, $CellContext`g}, 
                    Monads`comprehend[Monads`Sets, $CellContext`p, 
                    Monads`generator[
                    Pattern[$CellContext`p, Pattern[$CellContext`g, 
                    Blank[]] -> Blank[]], 
                    $CellContext`globMap[
                    "business"]], $CellContext`g != $CellContext`f]]], 
                   BaseStyle -> Small]}, {"", 
                  Button["Print local map", 
                   Print[$CellContext`f -> $CellContext`newMap], BaseStyle -> 
                   Small]}}]], DynamicModuleValues :> {}], "Beth capital" -> 
            DynamicModule[{$CellContext`f = 
               "Equity:Capital:Beth capital", $CellContext`string = 
               "", $CellContext`newMap = {}}, 
              Panel[
               Grid[{{
                  Style["String map", Bold], SpanFromLeft}, {"Name:", 
                  InputField[
                   Dynamic[$CellContext`f], String, Enabled -> False]}, {
                 "String:", 
                  InputField[
                   Dynamic[$CellContext`string], String]}, {"", 
                  Button[
                  "Add string", $CellContext`newMap = 
                    Union[$CellContext`newMap, {$CellContext`string}]; \
$CellContext`globMap["business"] = 
                    Union[{$CellContext`f -> $CellContext`newMap}, 
                    Block[{$CellContext`p, $CellContext`g}, 
                    Monads`comprehend[Monads`Sets, $CellContext`p, 
                    Monads`generator[
                    Pattern[$CellContext`p, Pattern[$CellContext`g, 
                    Blank[]] -> Blank[]], 
                    $CellContext`globMap[
                    "business"]], $CellContext`g != $CellContext`f]]], 
                   BaseStyle -> Small]}, {"", 
                  Button[
                  "Remove string", $CellContext`newMap = 
                    Complement[$CellContext`newMap, {$CellContext`string}]; \
$CellContext`globMap["business"] = 
                    Union[{$CellContext`f -> $CellContext`newMap}, 
                    Block[{$CellContext`p, $CellContext`g}, 
                    Monads`comprehend[Monads`Sets, $CellContext`p, 
                    Monads`generator[
                    Pattern[$CellContext`p, Pattern[$CellContext`g, 
                    Blank[]] -> Blank[]], 
                    $CellContext`globMap[
                    "business"]], $CellContext`g != $CellContext`f]]], 
                   BaseStyle -> Small]}, {"", 
                  Button["Print local map", 
                   Print[$CellContext`f -> $CellContext`newMap], BaseStyle -> 
                   Small]}}]], DynamicModuleValues :> {}], "Connor capital" -> 
            DynamicModule[{$CellContext`f = 
               "Equity:Capital:Connor capital", $CellContext`string = 
               "", $CellContext`newMap = {}}, 
              Panel[
               Grid[{{
                  Style["String map", Bold], SpanFromLeft}, {"Name:", 
                  InputField[
                   Dynamic[$CellContext`f], String, Enabled -> False]}, {
                 "String:", 
                  InputField[
                   Dynamic[$CellContext`string], String]}, {"", 
                  Button[
                  "Add string", $CellContext`newMap = 
                    Union[$CellContext`newMap, {$CellContext`string}]; \
$CellContext`globMap["business"] = 
                    Union[{$CellContext`f -> $CellContext`newMap}, 
                    Block[{$CellContext`p, $CellContext`g}, 
                    Monads`comprehend[Monads`Sets, $CellContext`p, 
                    Monads`generator[
                    Pattern[$CellContext`p, Pattern[$CellContext`g, 
                    Blank[]] -> Blank[]], 
                    $CellContext`globMap[
                    "business"]], $CellContext`g != $CellContext`f]]], 
                   BaseStyle -> Small]}, {"", 
                  Button[
                  "Remove string", $CellContext`newMap = 
                    Complement[$CellContext`newMap, {$CellContext`string}]; \
$CellContext`globMap["business"] = 
                    Union[{$CellContext`f -> $CellContext`newMap}, 
                    Block[{$CellContext`p, $CellContext`g}, 
                    Monads`comprehend[Monads`Sets, $CellContext`p, 
                    Monads`generator[
                    Pattern[$CellContext`p, Pattern[$CellContext`g, 
                    Blank[]] -> Blank[]], 
                    $CellContext`globMap[
                    "business"]], $CellContext`g != $CellContext`f]]], 
                   BaseStyle -> Small]}, {"", 
                  Button["Print local map", 
                   Print[$CellContext`f -> $CellContext`newMap], BaseStyle -> 
                   Small]}}]], DynamicModuleValues :> {}], "Mack capital" -> 
            DynamicModule[{$CellContext`f = 
               "Equity:Capital:Mack capital", $CellContext`string = 
               "", $CellContext`newMap = {}}, 
              Panel[
               Grid[{{
                  Style["String map", Bold], SpanFromLeft}, {"Name:", 
                  InputField[
                   Dynamic[$CellContext`f], String, Enabled -> False]}, {
                 "String:", 
                  InputField[
                   Dynamic[$CellContext`string], String]}, {"", 
                  Button[
                  "Add string", $CellContext`newMap = 
                    Union[$CellContext`newMap, {$CellContext`string}]; \
$CellContext`globMap["business"] = 
                    Union[{$CellContext`f -> $CellContext`newMap}, 
                    Block[{$CellContext`p, $CellContext`g}, 
                    Monads`comprehend[Monads`Sets, $CellContext`p, 
                    Monads`generator[
                    Pattern[$CellContext`p, Pattern[$CellContext`g, 
                    Blank[]] -> Blank[]], 
                    $CellContext`globMap[
                    "business"]], $CellContext`g != $CellContext`f]]], 
                   BaseStyle -> Small]}, {"", 
                  Button[
                  "Remove string", $CellContext`newMap = 
                    Complement[$CellContext`newMap, {$CellContext`string}]; \
$CellContext`globMap["business"] = 
                    Union[{$CellContext`f -> $CellContext`newMap}, 
                    Block[{$CellContext`p, $CellContext`g}, 
                    Monads`comprehend[Monads`Sets, $CellContext`p, 
                    Monads`generator[
                    Pattern[$CellContext`p, Pattern[$CellContext`g, 
                    Blank[]] -> Blank[]], 
                    $CellContext`globMap[
                    "business"]], $CellContext`g != $CellContext`f]]], 
                   BaseStyle -> Small]}, {"", 
                  Button["Print local map", 
                   Print[$CellContext`f -> $CellContext`newMap], BaseStyle -> 
                   Small]}}]], DynamicModuleValues :> {}], "Agata capital" -> 
            DynamicModule[{$CellContext`f = 
               "Equity:Capital:Agata capital", $CellContext`string = 
               "", $CellContext`newMap = {}}, 
              Panel[
               Grid[{{
                  Style["String map", Bold], SpanFromLeft}, {"Name:", 
                  InputField[
                   Dynamic[$CellContext`f], String, Enabled -> False]}, {
                 "String:", 
                  InputField[
                   Dynamic[$CellContext`string], String]}, {"", 
                  Button[
                  "Add string", $CellContext`newMap = 
                    Union[$CellContext`newMap, {$CellContext`string}]; \
$CellContext`globMap["business"] = 
                    Union[{$CellContext`f -> $CellContext`newMap}, 
                    Block[{$CellContext`p, $CellContext`g}, 
                    Monads`comprehend[Monads`Sets, $CellContext`p, 
                    Monads`generator[
                    Pattern[$CellContext`p, Pattern[$CellContext`g, 
                    Blank[]] -> Blank[]], 
                    $CellContext`globMap[
                    "business"]], $CellContext`g != $CellContext`f]]], 
                   BaseStyle -> Small]}, {"", 
                  Button[
                  "Remove string", $CellContext`newMap = 
                    
                    Complement[$CellContext`newMap, {$CellContext`string}]; \
$CellContext`globMap["business"] = 
                    Union[{$CellContext`f -> $CellContext`newMap}, 
                    Block[{$CellContext`p, $CellContext`g}, 
                    Monads`comprehend[Monads`Sets, $CellContext`p, 
                    Monads`generator[
                    Pattern[$CellContext`p, Pattern[$CellContext`g, 
                    Blank[]] -> Blank[]], 
                    $CellContext`globMap[
                    "business"]], $CellContext`g != $CellContext`f]]], 
                   BaseStyle -> Small]}, {"", 
                  Button["Print local map", 
                   Print[$CellContext`f -> $CellContext`newMap], BaseStyle -> 
                   Small]}}]], DynamicModuleValues :> {}]}, 
           ControlPlacement -> {Center, Top}, LabelStyle -> Small, 
           Appearance -> {"Limited", 10}], "Opening Balances" -> 
         DynamicModule[{$CellContext`f = 
            "Equity:Opening Balances", $CellContext`string = 
            "", $CellContext`newMap = {}}, 
           Panel[
            Grid[{{
               Style["String map", Bold], SpanFromLeft}, {"Name:", 
               InputField[
                Dynamic[$CellContext`f], String, Enabled -> False]}, {
              "String:", 
               InputField[
                Dynamic[$CellContext`string], String]}, {"", 
               Button[
               "Add string", $CellContext`newMap = 
                 Union[$CellContext`newMap, {$CellContext`string}]; \
$CellContext`globMap["business"] = 
                 Union[{$CellContext`f -> $CellContext`newMap}, 
                   Block[{$CellContext`p, $CellContext`g}, 
                    Monads`comprehend[Monads`Sets, $CellContext`p, 
                    Monads`generator[
                    Pattern[$CellContext`p, Pattern[$CellContext`g, 
                    Blank[]] -> Blank[]], 
                    $CellContext`globMap[
                    "business"]], $CellContext`g != $CellContext`f]]], 
                BaseStyle -> Small]}, {"", 
               Button[
               "Remove string", $CellContext`newMap = 
                 
                 Complement[$CellContext`newMap, {$CellContext`string}]; \
$CellContext`globMap["business"] = 
                 Union[{$CellContext`f -> $CellContext`newMap}, 
                   Block[{$CellContext`p, $CellContext`g}, 
                    Monads`comprehend[Monads`Sets, $CellContext`p, 
                    Monads`generator[
                    Pattern[$CellContext`p, Pattern[$CellContext`g, 
                    Blank[]] -> Blank[]], 
                    $CellContext`globMap[
                    "business"]], $CellContext`g != $CellContext`f]]], 
                BaseStyle -> Small]}, {"", 
               Button["Print local map", 
                Print[$CellContext`f -> $CellContext`newMap], BaseStyle -> 
                Small]}}]], DynamicModuleValues :> {}]}, 
        ControlPlacement -> {Center, Top}, LabelStyle -> Small, 
        Appearance -> {"Limited", 10}], "Income:" -> 
      TabView[{"Interest" -> 
         DynamicModule[{$CellContext`f = 
            "Income:Interest", $CellContext`string = 
            "", $CellContext`newMap = {"Bank Credit Interest"}}, 
           Panel[
            Grid[{{
               Style["String map", Bold], SpanFromLeft}, {"Name:", 
               InputField[
                Dynamic[$CellContext`f], String, Enabled -> False]}, {
              "String:", 
               InputField[
                Dynamic[$CellContext`string], String]}, {"", 
               Button[
               "Add string", $CellContext`newMap = 
                 Union[$CellContext`newMap, {$CellContext`string}]; \
$CellContext`globMap["business"] = 
                 Union[{$CellContext`f -> $CellContext`newMap}, 
                   Block[{$CellContext`p, $CellContext`g}, 
                    Monads`comprehend[Monads`Sets, $CellContext`p, 
                    Monads`generator[
                    Pattern[$CellContext`p, Pattern[$CellContext`g, 
                    Blank[]] -> Blank[]], 
                    $CellContext`globMap[
                    "business"]], $CellContext`g != $CellContext`f]]], 
                BaseStyle -> Small]}, {"", 
               Button[
               "Remove string", $CellContext`newMap = 
                 Complement[$CellContext`newMap, {$CellContext`string}]; \
$CellContext`globMap["business"] = 
                 Union[{$CellContext`f -> $CellContext`newMap}, 
                   Block[{$CellContext`p, $CellContext`g}, 
                    Monads`comprehend[Monads`Sets, $CellContext`p, 
                    Monads`generator[
                    Pattern[$CellContext`p, Pattern[$CellContext`g, 
                    Blank[]] -> Blank[]], 
                    $CellContext`globMap[
                    "business"]], $CellContext`g != $CellContext`f]]], 
                BaseStyle -> Small]}, {"", 
               Button["Print local map", 
                Print[$CellContext`f -> $CellContext`newMap], BaseStyle -> 
                Small]}}]], DynamicModuleValues :> {}], "Sales:" -> 
         TabView[{
           "Food:" -> TabView[{
              "Eggs and meat" -> 
               DynamicModule[{$CellContext`f = 
                  "Income:Sales:Food:Eggs and meat", $CellContext`string = 
                  "", $CellContext`newMap = {}}, 
                 Panel[
                  Grid[{{
                    Style["String map", Bold], SpanFromLeft}, {"Name:", 
                    InputField[
                    Dynamic[$CellContext`f], String, Enabled -> False]}, {
                    "String:", 
                    InputField[
                    Dynamic[$CellContext`string], String]}, {"", 
                    Button[
                    "Add string", $CellContext`newMap = 
                    Union[$CellContext`newMap, {$CellContext`string}]; \
$CellContext`globMap["business"] = 
                    Union[{$CellContext`f -> $CellContext`newMap}, 
                    Block[{$CellContext`p, $CellContext`g}, 
                    Monads`comprehend[Monads`Sets, $CellContext`p, 
                    Monads`generator[
                    Pattern[$CellContext`p, Pattern[$CellContext`g, 
                    Blank[]] -> Blank[]], 
                    $CellContext`globMap[
                    "business"]], $CellContext`g != $CellContext`f]]], 
                    BaseStyle -> Small]}, {"", 
                    Button[
                    "Remove string", $CellContext`newMap = 
                    Complement[$CellContext`newMap, {$CellContext`string}]; \
$CellContext`globMap["business"] = 
                    Union[{$CellContext`f -> $CellContext`newMap}, 
                    Block[{$CellContext`p, $CellContext`g}, 
                    Monads`comprehend[Monads`Sets, $CellContext`p, 
                    Monads`generator[
                    Pattern[$CellContext`p, Pattern[$CellContext`g, 
                    Blank[]] -> Blank[]], 
                    $CellContext`globMap[
                    "business"]], $CellContext`g != $CellContext`f]]], 
                    BaseStyle -> Small]}, {"", 
                    Button["Print local map", 
                    Print[$CellContext`f -> $CellContext`newMap], BaseStyle -> 
                    Small]}}]], DynamicModuleValues :> {}], "Fruit and veg" -> 
               DynamicModule[{$CellContext`f = 
                  "Income:Sales:Food:Fruit and veg", $CellContext`string = 
                  "", $CellContext`newMap = {
                   "DETOX RETREATS LTD", "Faster Payment SOMEONE F & C", 
                    "Faster Payment B Person", 
                    "Faster Payment THRIVE CAFE RETAIL", 
                    "National Giro Credit"}}, 
                 Panel[
                  Grid[{{
                    Style["String map", Bold], SpanFromLeft}, {"Name:", 
                    InputField[
                    Dynamic[$CellContext`f], String, Enabled -> False]}, {
                    "String:", 
                    InputField[
                    Dynamic[$CellContext`string], String]}, {"", 
                    Button[
                    "Add string", $CellContext`newMap = 
                    Union[$CellContext`newMap, {$CellContext`string}]; \
$CellContext`globMap["business"] = 
                    Union[{$CellContext`f -> $CellContext`newMap}, 
                    Block[{$CellContext`p, $CellContext`g}, 
                    Monads`comprehend[Monads`Sets, $CellContext`p, 
                    Monads`generator[
                    Pattern[$CellContext`p, Pattern[$CellContext`g, 
                    Blank[]] -> Blank[]], 
                    $CellContext`globMap[
                    "business"]], $CellContext`g != $CellContext`f]]], 
                    BaseStyle -> Small]}, {"", 
                    Button[
                    "Remove string", $CellContext`newMap = 
                    Complement[$CellContext`newMap, {$CellContext`string}]; \
$CellContext`globMap["business"] = 
                    Union[{$CellContext`f -> $CellContext`newMap}, 
                    Block[{$CellContext`p, $CellContext`g}, 
                    Monads`comprehend[Monads`Sets, $CellContext`p, 
                    Monads`generator[
                    Pattern[$CellContext`p, Pattern[$CellContext`g, 
                    Blank[]] -> Blank[]], 
                    $CellContext`globMap[
                    "business"]], $CellContext`g != $CellContext`f]]], 
                    BaseStyle -> Small]}, {"", 
                    Button["Print local map", 
                    Print[$CellContext`f -> $CellContext`newMap], BaseStyle -> 
                    Small]}}]], DynamicModuleValues :> {}]}, 
              ControlPlacement -> {Center, Top}, LabelStyle -> Small, 
              Appearance -> {"Limited", 10}], "Services" -> 
            DynamicModule[{$CellContext`f = 
               "Income:Sales:Services", $CellContext`string = 
               "", $CellContext`newMap = {}}, 
              Panel[
               Grid[{{
                  Style["String map", Bold], SpanFromLeft}, {"Name:", 
                  InputField[
                   Dynamic[$CellContext`f], String, Enabled -> False]}, {
                 "String:", 
                  InputField[
                   Dynamic[$CellContext`string], String]}, {"", 
                  Button[
                  "Add string", $CellContext`newMap = 
                    Union[$CellContext`newMap, {$CellContext`string}]; \
$CellContext`globMap["business"] = 
                    Union[{$CellContext`f -> $CellContext`newMap}, 
                    Block[{$CellContext`p, $CellContext`g}, 
                    Monads`comprehend[Monads`Sets, $CellContext`p, 
                    Monads`generator[
                    Pattern[$CellContext`p, Pattern[$CellContext`g, 
                    Blank[]] -> Blank[]], 
                    $CellContext`globMap[
                    "business"]], $CellContext`g != $CellContext`f]]], 
                   BaseStyle -> Small]}, {"", 
                  Button[
                  "Remove string", $CellContext`newMap = 
                    Complement[$CellContext`newMap, {$CellContext`string}]; \
$CellContext`globMap["business"] = 
                    Union[{$CellContext`f -> $CellContext`newMap}, 
                    Block[{$CellContext`p, $CellContext`g}, 
                    Monads`comprehend[Monads`Sets, $CellContext`p, 
                    Monads`generator[
                    Pattern[$CellContext`p, Pattern[$CellContext`g, 
                    Blank[]] -> Blank[]], 
                    $CellContext`globMap[
                    "business"]], $CellContext`g != $CellContext`f]]], 
                   BaseStyle -> Small]}, {"", 
                  Button["Print local map", 
                   Print[$CellContext`f -> $CellContext`newMap], BaseStyle -> 
                   Small]}}]], DynamicModuleValues :> {}], "Grazing" -> 
            DynamicModule[{$CellContext`f = 
               "Income:Sales:Grazing", $CellContext`string = 
               "", $CellContext`newMap = {}}, 
              Panel[
               Grid[{{
                  Style["String map", Bold], SpanFromLeft}, {"Name:", 
                  InputField[
                   Dynamic[$CellContext`f], String, Enabled -> False]}, {
                 "String:", 
                  InputField[
                   Dynamic[$CellContext`string], String]}, {"", 
                  Button[
                  "Add string", $CellContext`newMap = 
                    Union[$CellContext`newMap, {$CellContext`string}]; \
$CellContext`globMap["business"] = 
                    Union[{$CellContext`f -> $CellContext`newMap}, 
                    Block[{$CellContext`p, $CellContext`g}, 
                    Monads`comprehend[Monads`Sets, $CellContext`p, 
                    Monads`generator[
                    Pattern[$CellContext`p, Pattern[$CellContext`g, 
                    Blank[]] -> Blank[]], 
                    $CellContext`globMap[
                    "business"]], $CellContext`g != $CellContext`f]]], 
                   BaseStyle -> Small]}, {"", 
                  Button[
                  "Remove string", $CellContext`newMap = 
                    Complement[$CellContext`newMap, {$CellContext`string}]; \
$CellContext`globMap["business"] = 
                    Union[{$CellContext`f -> $CellContext`newMap}, 
                    Block[{$CellContext`p, $CellContext`g}, 
                    Monads`comprehend[Monads`Sets, $CellContext`p, 
                    Monads`generator[
                    Pattern[$CellContext`p, Pattern[$CellContext`g, 
                    Blank[]] -> Blank[]], 
                    $CellContext`globMap[
                    "business"]], $CellContext`g != $CellContext`f]]], 
                   BaseStyle -> Small]}, {"", 
                  Button["Print local map", 
                   Print[$CellContext`f -> $CellContext`newMap], BaseStyle -> 
                   Small]}}]], DynamicModuleValues :> {}]}, 
           ControlPlacement -> {Center, Top}, LabelStyle -> Small, 
           Appearance -> {"Limited", 10}], "Other Income" -> 
         DynamicModule[{$CellContext`f = 
            "Income:Other Income", $CellContext`string = 
            "", $CellContext`newMap = {
             "ANNUAL BONUS", "National Giro Credit"}}, 
           Panel[
            Grid[{{
               Style["String map", Bold], SpanFromLeft}, {"Name:", 
               InputField[
                Dynamic[$CellContext`f], String, Enabled -> False]}, {
              "String:", 
               InputField[
                Dynamic[$CellContext`string], String]}, {"", 
               Button[
               "Add string", $CellContext`newMap = 
                 Union[$CellContext`newMap, {$CellContext`string}]; \
$CellContext`globMap["business"] = 
                 Union[{$CellContext`f -> $CellContext`newMap}, 
                   Block[{$CellContext`p, $CellContext`g}, 
                    Monads`comprehend[Monads`Sets, $CellContext`p, 
                    Monads`generator[
                    Pattern[$CellContext`p, Pattern[$CellContext`g, 
                    Blank[]] -> Blank[]], 
                    $CellContext`globMap[
                    "business"]], $CellContext`g != $CellContext`f]]], 
                BaseStyle -> Small]}, {"", 
               Button[
               "Remove string", $CellContext`newMap = 
                 Complement[$CellContext`newMap, {$CellContext`string}]; \
$CellContext`globMap["business"] = 
                 Union[{$CellContext`f -> $CellContext`newMap}, 
                   Block[{$CellContext`p, $CellContext`g}, 
                    Monads`comprehend[Monads`Sets, $CellContext`p, 
                    Monads`generator[
                    Pattern[$CellContext`p, Pattern[$CellContext`g, 
                    Blank[]] -> Blank[]], 
                    $CellContext`globMap[
                    "business"]], $CellContext`g != $CellContext`f]]], 
                BaseStyle -> Small]}, {"", 
               Button["Print local map", 
                Print[$CellContext`f -> $CellContext`newMap], BaseStyle -> 
                Small]}}]], DynamicModuleValues :> {}]}, 
        ControlPlacement -> {Center, Top}, LabelStyle -> Small, 
        Appearance -> {"Limited", 10}], "Expenses in VAT:" -> 
      TabView[{"Bank Service Charge" -> 
         DynamicModule[{$CellContext`f = 
            "Expenses in VAT:Bank Service Charge", $CellContext`string = 
            "", $CellContext`newMap = {}}, 
           Panel[
            Grid[{{
               Style["String map", Bold], SpanFromLeft}, {"Name:", 
               InputField[
                Dynamic[$CellContext`f], String, Enabled -> False]}, {
              "String:", 
               InputField[
                Dynamic[$CellContext`string], String]}, {"", 
               Button[
               "Add string", $CellContext`newMap = 
                 Union[$CellContext`newMap, {$CellContext`string}]; \
$CellContext`globMap["business"] = 
                 Union[{$CellContext`f -> $CellContext`newMap}, 
                   Block[{$CellContext`p, $CellContext`g}, 
                    Monads`comprehend[Monads`Sets, $CellContext`p, 
                    Monads`generator[
                    Pattern[$CellContext`p, Pattern[$CellContext`g, 
                    Blank[]] -> Blank[]], 
                    $CellContext`globMap[
                    "business"]], $CellContext`g != $CellContext`f]]], 
                BaseStyle -> Small]}, {"", 
               Button[
               "Remove string", $CellContext`newMap = 
                 Complement[$CellContext`newMap, {$CellContext`string}]; \
$CellContext`globMap["business"] = 
                 Union[{$CellContext`f -> $CellContext`newMap}, 
                   Block[{$CellContext`p, $CellContext`g}, 
                    Monads`comprehend[Monads`Sets, $CellContext`p, 
                    Monads`generator[
                    Pattern[$CellContext`p, Pattern[$CellContext`g, 
                    Blank[]] -> Blank[]], 
                    $CellContext`globMap[
                    "business"]], $CellContext`g != $CellContext`f]]], 
                BaseStyle -> Small]}, {"", 
               Button["Print local map", 
                Print[$CellContext`f -> $CellContext`newMap], BaseStyle -> 
                Small]}}]], DynamicModuleValues :> {}], 
         "Dues and Subscriptions" -> 
         DynamicModule[{$CellContext`f = 
            "Expenses in VAT:Dues and Subscriptions", $CellContext`string = 
            "", $CellContext`newMap = {"COMPANIES HSE", "FWAG"}}, 
           Panel[
            Grid[{{
               Style["String map", Bold], SpanFromLeft}, {"Name:", 
               InputField[
                Dynamic[$CellContext`f], String, Enabled -> False]}, {
              "String:", 
               InputField[
                Dynamic[$CellContext`string], String]}, {"", 
               Button[
               "Add string", $CellContext`newMap = 
                 Union[$CellContext`newMap, {$CellContext`string}]; \
$CellContext`globMap["business"] = 
                 Union[{$CellContext`f -> $CellContext`newMap}, 
                   Block[{$CellContext`p, $CellContext`g}, 
                    Monads`comprehend[Monads`Sets, $CellContext`p, 
                    Monads`generator[
                    Pattern[$CellContext`p, Pattern[$CellContext`g, 
                    Blank[]] -> Blank[]], 
                    $CellContext`globMap[
                    "business"]], $CellContext`g != $CellContext`f]]], 
                BaseStyle -> Small]}, {"", 
               Button[
               "Remove string", $CellContext`newMap = 
                 Complement[$CellContext`newMap, {$CellContext`string}]; \
$CellContext`globMap["business"] = 
                 Union[{$CellContext`f -> $CellContext`newMap}, 
                   Block[{$CellContext`p, $CellContext`g}, 
                    Monads`comprehend[Monads`Sets, $CellContext`p, 
                    Monads`generator[
                    Pattern[$CellContext`p, Pattern[$CellContext`g, 
                    Blank[]] -> Blank[]], 
                    $CellContext`globMap[
                    "business"]], $CellContext`g != $CellContext`f]]], 
                BaseStyle -> Small]}, {"", 
               Button["Print local map", 
                Print[$CellContext`f -> $CellContext`newMap], BaseStyle -> 
                Small]}}]], DynamicModuleValues :> {}], "Miscellaneous" -> 
         DynamicModule[{$CellContext`f = 
            "Expenses in VAT:Miscellaneous", $CellContext`string = 
            "", $CellContext`newMap = {}}, 
           Panel[
            Grid[{{
               Style["String map", Bold], SpanFromLeft}, {"Name:", 
               InputField[
                Dynamic[$CellContext`f], String, Enabled -> False]}, {
              "String:", 
               InputField[
                Dynamic[$CellContext`string], String]}, {"", 
               Button[
               "Add string", $CellContext`newMap = 
                 Union[$CellContext`newMap, {$CellContext`string}]; \
$CellContext`globMap["business"] = 
                 Union[{$CellContext`f -> $CellContext`newMap}, 
                   Block[{$CellContext`p, $CellContext`g}, 
                    Monads`comprehend[Monads`Sets, $CellContext`p, 
                    Monads`generator[
                    Pattern[$CellContext`p, Pattern[$CellContext`g, 
                    Blank[]] -> Blank[]], 
                    $CellContext`globMap[
                    "business"]], $CellContext`g != $CellContext`f]]], 
                BaseStyle -> Small]}, {"", 
               Button[
               "Remove string", $CellContext`newMap = 
                 Complement[$CellContext`newMap, {$CellContext`string}]; \
$CellContext`globMap["business"] = 
                 Union[{$CellContext`f -> $CellContext`newMap}, 
                   Block[{$CellContext`p, $CellContext`g}, 
                    Monads`comprehend[Monads`Sets, $CellContext`p, 
                    Monads`generator[
                    Pattern[$CellContext`p, Pattern[$CellContext`g, 
                    Blank[]] -> Blank[]], 
                    $CellContext`globMap[
                    "business"]], $CellContext`g != $CellContext`f]]], 
                BaseStyle -> Small]}, {"", 
               Button["Print local map", 
                Print[$CellContext`f -> $CellContext`newMap], BaseStyle -> 
                Small]}}]], DynamicModuleValues :> {}], "Office Supplies" -> 
         DynamicModule[{$CellContext`f = 
            "Expenses in VAT:Office Supplies", $CellContext`string = 
            "", $CellContext`newMap = {}}, 
           Panel[
            Grid[{{
               Style["String map", Bold], SpanFromLeft}, {"Name:", 
               InputField[
                Dynamic[$CellContext`f], String, Enabled -> False]}, {
              "String:", 
               InputField[
                Dynamic[$CellContext`string], String]}, {"", 
               Button[
               "Add string", $CellContext`newMap = 
                 Union[$CellContext`newMap, {$CellContext`string}]; \
$CellContext`globMap["business"] = 
                 Union[{$CellContext`f -> $CellContext`newMap}, 
                   Block[{$CellContext`p, $CellContext`g}, 
                    Monads`comprehend[Monads`Sets, $CellContext`p, 
                    Monads`generator[
                    Pattern[$CellContext`p, Pattern[$CellContext`g, 
                    Blank[]] -> Blank[]], 
                    $CellContext`globMap[
                    "business"]], $CellContext`g != $CellContext`f]]], 
                BaseStyle -> Small]}, {"", 
               Button[
               "Remove string", $CellContext`newMap = 
                 
                 Complement[$CellContext`newMap, {$CellContext`string}]; \
$CellContext`globMap["business"] = 
                 Union[{$CellContext`f -> $CellContext`newMap}, 
                   Block[{$CellContext`p, $CellContext`g}, 
                    Monads`comprehend[Monads`Sets, $CellContext`p, 
                    Monads`generator[
                    Pattern[$CellContext`p, Pattern[$CellContext`g, 
                    Blank[]] -> Blank[]], 
                    $CellContext`globMap[
                    "business"]], $CellContext`g != $CellContext`f]]], 
                BaseStyle -> Small]}, {"", 
               Button["Print local map", 
                Print[$CellContext`f -> $CellContext`newMap], BaseStyle -> 
                Small]}}]], DynamicModuleValues :> {}], "Production" -> 
         DynamicModule[{$CellContext`f = 
            "Expenses in VAT:Production", $CellContext`string = 
            "", $CellContext`newMap = {"CORNWALL FARM"}}, 
           Panel[
            Grid[{{
               Style["String map", Bold], SpanFromLeft}, {"Name:", 
               InputField[
                Dynamic[$CellContext`f], String, Enabled -> False]}, {
              "String:", 
               InputField[
                Dynamic[$CellContext`string], String]}, {"", 
               Button[
               "Add string", $CellContext`newMap = 
                 Union[$CellContext`newMap, {$CellContext`string}]; \
$CellContext`globMap["business"] = 
                 Union[{$CellContext`f -> $CellContext`newMap}, 
                   Block[{$CellContext`p, $CellContext`g}, 
                    Monads`comprehend[Monads`Sets, $CellContext`p, 
                    Monads`generator[
                    Pattern[$CellContext`p, Pattern[$CellContext`g, 
                    Blank[]] -> Blank[]], 
                    $CellContext`globMap[
                    "business"]], $CellContext`g != $CellContext`f]]], 
                BaseStyle -> Small]}, {"", 
               Button[
               "Remove string", $CellContext`newMap = 
                 Complement[$CellContext`newMap, {$CellContext`string}]; \
$CellContext`globMap["business"] = 
                 Union[{$CellContext`f -> $CellContext`newMap}, 
                   Block[{$CellContext`p, $CellContext`g}, 
                    Monads`comprehend[Monads`Sets, $CellContext`p, 
                    Monads`generator[
                    Pattern[$CellContext`p, Pattern[$CellContext`g, 
                    Blank[]] -> Blank[]], 
                    $CellContext`globMap[
                    "business"]], $CellContext`g != $CellContext`f]]], 
                BaseStyle -> Small]}, {"", 
               Button["Print local map", 
                Print[$CellContext`f -> $CellContext`newMap], BaseStyle -> 
                Small]}}]], DynamicModuleValues :> {}], 
         "Postage and Delivery" -> 
         DynamicModule[{$CellContext`f = 
            "Expenses in VAT:Postage and Delivery", $CellContext`string = 
            "", $CellContext`newMap = {}}, 
           Panel[
            Grid[{{
               Style["String map", Bold], SpanFromLeft}, {"Name:", 
               InputField[
                Dynamic[$CellContext`f], String, Enabled -> False]}, {
              "String:", 
               InputField[
                Dynamic[$CellContext`string], String]}, {"", 
               Button[
               "Add string", $CellContext`newMap = 
                 Union[$CellContext`newMap, {$CellContext`string}]; \
$CellContext`globMap["business"] = 
                 Union[{$CellContext`f -> $CellContext`newMap}, 
                   Block[{$CellContext`p, $CellContext`g}, 
                    Monads`comprehend[Monads`Sets, $CellContext`p, 
                    Monads`generator[
                    Pattern[$CellContext`p, Pattern[$CellContext`g, 
                    Blank[]] -> Blank[]], 
                    $CellContext`globMap[
                    "business"]], $CellContext`g != $CellContext`f]]], 
                BaseStyle -> Small]}, {"", 
               Button[
               "Remove string", $CellContext`newMap = 
                 Complement[$CellContext`newMap, {$CellContext`string}]; \
$CellContext`globMap["business"] = 
                 Union[{$CellContext`f -> $CellContext`newMap}, 
                   Block[{$CellContext`p, $CellContext`g}, 
                    Monads`comprehend[Monads`Sets, $CellContext`p, 
                    Monads`generator[
                    Pattern[$CellContext`p, Pattern[$CellContext`g, 
                    Blank[]] -> Blank[]], 
                    $CellContext`globMap[
                    "business"]], $CellContext`g != $CellContext`f]]], 
                BaseStyle -> Small]}, {"", 
               Button["Print local map", 
                Print[$CellContext`f -> $CellContext`newMap], BaseStyle -> 
                Small]}}]], DynamicModuleValues :> {}], "Professional Fees:" -> 
         TabView[{
           "Accounting" -> 
            DynamicModule[{$CellContext`f = 
               "Expenses in VAT:Professional Fees:Accounting", \
$CellContext`string = "", $CellContext`newMap = {}}, 
              Panel[
               Grid[{{
                  Style["String map", Bold], SpanFromLeft}, {"Name:", 
                  InputField[
                   Dynamic[$CellContext`f], String, Enabled -> False]}, {
                 "String:", 
                  InputField[
                   Dynamic[$CellContext`string], String]}, {"", 
                  Button[
                  "Add string", $CellContext`newMap = 
                    Union[$CellContext`newMap, {$CellContext`string}]; \
$CellContext`globMap["business"] = 
                    Union[{$CellContext`f -> $CellContext`newMap}, 
                    Block[{$CellContext`p, $CellContext`g}, 
                    Monads`comprehend[Monads`Sets, $CellContext`p, 
                    Monads`generator[
                    Pattern[$CellContext`p, Pattern[$CellContext`g, 
                    Blank[]] -> Blank[]], 
                    $CellContext`globMap[
                    "business"]], $CellContext`g != $CellContext`f]]], 
                   BaseStyle -> Small]}, {"", 
                  Button[
                  "Remove string", $CellContext`newMap = 
                    Complement[$CellContext`newMap, {$CellContext`string}]; \
$CellContext`globMap["business"] = 
                    Union[{$CellContext`f -> $CellContext`newMap}, 
                    Block[{$CellContext`p, $CellContext`g}, 
                    Monads`comprehend[Monads`Sets, $CellContext`p, 
                    Monads`generator[
                    Pattern[$CellContext`p, Pattern[$CellContext`g, 
                    Blank[]] -> Blank[]], 
                    $CellContext`globMap[
                    "business"]], $CellContext`g != $CellContext`f]]], 
                   BaseStyle -> Small]}, {"", 
                  Button["Print local map", 
                   Print[$CellContext`f -> $CellContext`newMap], BaseStyle -> 
                   Small]}}]], DynamicModuleValues :> {}], "Legal Fees" -> 
            DynamicModule[{$CellContext`f = 
               "Expenses in VAT:Professional Fees:Legal Fees", \
$CellContext`string = "", $CellContext`newMap = {}}, 
              Panel[
               Grid[{{
                  Style["String map", Bold], SpanFromLeft}, {"Name:", 
                  InputField[
                   Dynamic[$CellContext`f], String, Enabled -> False]}, {
                 "String:", 
                  InputField[
                   Dynamic[$CellContext`string], String]}, {"", 
                  Button[
                  "Add string", $CellContext`newMap = 
                    Union[$CellContext`newMap, {$CellContext`string}]; \
$CellContext`globMap["business"] = 
                    Union[{$CellContext`f -> $CellContext`newMap}, 
                    Block[{$CellContext`p, $CellContext`g}, 
                    Monads`comprehend[Monads`Sets, $CellContext`p, 
                    Monads`generator[
                    Pattern[$CellContext`p, Pattern[$CellContext`g, 
                    Blank[]] -> Blank[]], 
                    $CellContext`globMap[
                    "business"]], $CellContext`g != $CellContext`f]]], 
                   BaseStyle -> Small]}, {"", 
                  Button[
                  "Remove string", $CellContext`newMap = 
                    Complement[$CellContext`newMap, {$CellContext`string}]; \
$CellContext`globMap["business"] = 
                    Union[{$CellContext`f -> $CellContext`newMap}, 
                    Block[{$CellContext`p, $CellContext`g}, 
                    Monads`comprehend[Monads`Sets, $CellContext`p, 
                    Monads`generator[
                    Pattern[$CellContext`p, Pattern[$CellContext`g, 
                    Blank[]] -> Blank[]], 
                    $CellContext`globMap[
                    "business"]], $CellContext`g != $CellContext`f]]], 
                   BaseStyle -> Small]}, {"", 
                  Button["Print local map", 
                   Print[$CellContext`f -> $CellContext`newMap], BaseStyle -> 
                   Small]}}]], DynamicModuleValues :> {}]}, 
           ControlPlacement -> {Center, Top}, LabelStyle -> Small, 
           Appearance -> {"Limited", 10}], "Services:" -> 
         TabView[{
           "Phone" -> DynamicModule[{$CellContext`f = 
               "Expenses in VAT:Services:Phone", $CellContext`string = 
               "", $CellContext`newMap = {}}, 
              Panel[
               Grid[{{
                  Style["String map", Bold], SpanFromLeft}, {"Name:", 
                  InputField[
                   Dynamic[$CellContext`f], String, Enabled -> False]}, {
                 "String:", 
                  InputField[
                   Dynamic[$CellContext`string], String]}, {"", 
                  Button[
                  "Add string", $CellContext`newMap = 
                    Union[$CellContext`newMap, {$CellContext`string}]; \
$CellContext`globMap["business"] = 
                    Union[{$CellContext`f -> $CellContext`newMap}, 
                    Block[{$CellContext`p, $CellContext`g}, 
                    Monads`comprehend[Monads`Sets, $CellContext`p, 
                    Monads`generator[
                    Pattern[$CellContext`p, Pattern[$CellContext`g, 
                    Blank[]] -> Blank[]], 
                    $CellContext`globMap[
                    "business"]], $CellContext`g != $CellContext`f]]], 
                   BaseStyle -> Small]}, {"", 
                  Button[
                  "Remove string", $CellContext`newMap = 
                    Complement[$CellContext`newMap, {$CellContext`string}]; \
$CellContext`globMap["business"] = 
                    Union[{$CellContext`f -> $CellContext`newMap}, 
                    Block[{$CellContext`p, $CellContext`g}, 
                    Monads`comprehend[Monads`Sets, $CellContext`p, 
                    Monads`generator[
                    Pattern[$CellContext`p, Pattern[$CellContext`g, 
                    Blank[]] -> Blank[]], 
                    $CellContext`globMap[
                    "business"]], $CellContext`g != $CellContext`f]]], 
                   BaseStyle -> Small]}, {"", 
                  Button["Print local map", 
                   Print[$CellContext`f -> $CellContext`newMap], BaseStyle -> 
                   Small]}}]], DynamicModuleValues :> {}], "Internet" -> 
            DynamicModule[{$CellContext`f = 
               "Expenses in VAT:Services:Internet", $CellContext`string = 
               "", $CellContext`newMap = {}}, 
              Panel[
               Grid[{{
                  Style["String map", Bold], SpanFromLeft}, {"Name:", 
                  InputField[
                   Dynamic[$CellContext`f], String, Enabled -> False]}, {
                 "String:", 
                  InputField[
                   Dynamic[$CellContext`string], String]}, {"", 
                  Button[
                  "Add string", $CellContext`newMap = 
                    Union[$CellContext`newMap, {$CellContext`string}]; \
$CellContext`globMap["business"] = 
                    Union[{$CellContext`f -> $CellContext`newMap}, 
                    Block[{$CellContext`p, $CellContext`g}, 
                    Monads`comprehend[Monads`Sets, $CellContext`p, 
                    Monads`generator[
                    Pattern[$CellContext`p, Pattern[$CellContext`g, 
                    Blank[]] -> Blank[]], 
                    $CellContext`globMap[
                    "business"]], $CellContext`g != $CellContext`f]]], 
                   BaseStyle -> Small]}, {"", 
                  Button[
                  "Remove string", $CellContext`newMap = 
                    Complement[$CellContext`newMap, {$CellContext`string}]; \
$CellContext`globMap["business"] = 
                    Union[{$CellContext`f -> $CellContext`newMap}, 
                    Block[{$CellContext`p, $CellContext`g}, 
                    Monads`comprehend[Monads`Sets, $CellContext`p, 
                    Monads`generator[
                    Pattern[$CellContext`p, Pattern[$CellContext`g, 
                    Blank[]] -> Blank[]], 
                    $CellContext`globMap[
                    "business"]], $CellContext`g != $CellContext`f]]], 
                   BaseStyle -> Small]}, {"", 
                  Button["Print local map", 
                   Print[$CellContext`f -> $CellContext`newMap], BaseStyle -> 
                   Small]}}]], DynamicModuleValues :> {}]}, 
           ControlPlacement -> {Center, Top}, LabelStyle -> Small, 
           Appearance -> {"Limited", 10}], "Rent" -> 
         DynamicModule[{$CellContext`f = 
            "Expenses in VAT:Rent", $CellContext`string = 
            "", $CellContext`newMap = {}}, 
           Panel[
            Grid[{{
               Style["String map", Bold], SpanFromLeft}, {"Name:", 
               InputField[
                Dynamic[$CellContext`f], String, Enabled -> False]}, {
              "String:", 
               InputField[
                Dynamic[$CellContext`string], String]}, {"", 
               Button[
               "Add string", $CellContext`newMap = 
                 Union[$CellContext`newMap, {$CellContext`string}]; \
$CellContext`globMap["business"] = 
                 Union[{$CellContext`f -> $CellContext`newMap}, 
                   Block[{$CellContext`p, $CellContext`g}, 
                    Monads`comprehend[Monads`Sets, $CellContext`p, 
                    Monads`generator[
                    Pattern[$CellContext`p, Pattern[$CellContext`g, 
                    Blank[]] -> Blank[]], 
                    $CellContext`globMap[
                    "business"]], $CellContext`g != $CellContext`f]]], 
                BaseStyle -> Small]}, {"", 
               Button[
               "Remove string", $CellContext`newMap = 
                 Complement[$CellContext`newMap, {$CellContext`string}]; \
$CellContext`globMap["business"] = 
                 Union[{$CellContext`f -> $CellContext`newMap}, 
                   Block[{$CellContext`p, $CellContext`g}, 
                    Monads`comprehend[Monads`Sets, $CellContext`p, 
                    Monads`generator[
                    Pattern[$CellContext`p, Pattern[$CellContext`g, 
                    Blank[]] -> Blank[]], 
                    $CellContext`globMap[
                    "business"]], $CellContext`g != $CellContext`f]]], 
                BaseStyle -> Small]}, {"", 
               Button["Print local map", 
                Print[$CellContext`f -> $CellContext`newMap], BaseStyle -> 
                Small]}}]], DynamicModuleValues :> {}], "Books" -> 
         DynamicModule[{$CellContext`f = 
            "Expenses in VAT:Books", $CellContext`string = 
            "", $CellContext`newMap = {}}, 
           Panel[
            Grid[{{
               Style["String map", Bold], SpanFromLeft}, {"Name:", 
               InputField[
                Dynamic[$CellContext`f], String, Enabled -> False]}, {
              "String:", 
               InputField[
                Dynamic[$CellContext`string], String]}, {"", 
               Button[
               "Add string", $CellContext`newMap = 
                 Union[$CellContext`newMap, {$CellContext`string}]; \
$CellContext`globMap["business"] = 
                 Union[{$CellContext`f -> $CellContext`newMap}, 
                   Block[{$CellContext`p, $CellContext`g}, 
                    Monads`comprehend[Monads`Sets, $CellContext`p, 
                    Monads`generator[
                    Pattern[$CellContext`p, Pattern[$CellContext`g, 
                    Blank[]] -> Blank[]], 
                    $CellContext`globMap[
                    "business"]], $CellContext`g != $CellContext`f]]], 
                BaseStyle -> Small]}, {"", 
               Button[
               "Remove string", $CellContext`newMap = 
                 Complement[$CellContext`newMap, {$CellContext`string}]; \
$CellContext`globMap["business"] = 
                 Union[{$CellContext`f -> $CellContext`newMap}, 
                   Block[{$CellContext`p, $CellContext`g}, 
                    Monads`comprehend[Monads`Sets, $CellContext`p, 
                    Monads`generator[
                    Pattern[$CellContext`p, Pattern[$CellContext`g, 
                    Blank[]] -> Blank[]], 
                    $CellContext`globMap[
                    "business"]], $CellContext`g != $CellContext`f]]], 
                BaseStyle -> Small]}, {"", 
               Button["Print local map", 
                Print[$CellContext`f -> $CellContext`newMap], BaseStyle -> 
                Small]}}]], DynamicModuleValues :> {}], "Software" -> 
         DynamicModule[{$CellContext`f = 
            "Expenses in VAT:Software", $CellContext`string = 
            "", $CellContext`newMap = {
             "WEB HOSTING", "WWW.ANDIC", "WWW.ANDICA", "WWW.TAXSH", 
              "WWW.TAXSHIELD"}}, 
           Panel[
            Grid[{{
               Style["String map", Bold], SpanFromLeft}, {"Name:", 
               InputField[
                Dynamic[$CellContext`f], String, Enabled -> False]}, {
              "String:", 
               InputField[
                Dynamic[$CellContext`string], String]}, {"", 
               Button[
               "Add string", $CellContext`newMap = 
                 Union[$CellContext`newMap, {$CellContext`string}]; \
$CellContext`globMap["business"] = 
                 Union[{$CellContext`f -> $CellContext`newMap}, 
                   Block[{$CellContext`p, $CellContext`g}, 
                    Monads`comprehend[Monads`Sets, $CellContext`p, 
                    Monads`generator[
                    Pattern[$CellContext`p, Pattern[$CellContext`g, 
                    Blank[]] -> Blank[]], 
                    $CellContext`globMap[
                    "business"]], $CellContext`g != $CellContext`f]]], 
                BaseStyle -> Small]}, {"", 
               Button[
               "Remove string", $CellContext`newMap = 
                 Complement[$CellContext`newMap, {$CellContext`string}]; \
$CellContext`globMap["business"] = 
                 Union[{$CellContext`f -> $CellContext`newMap}, 
                   Block[{$CellContext`p, $CellContext`g}, 
                    Monads`comprehend[Monads`Sets, $CellContext`p, 
                    Monads`generator[
                    Pattern[$CellContext`p, Pattern[$CellContext`g, 
                    Blank[]] -> Blank[]], 
                    $CellContext`globMap[
                    "business"]], $CellContext`g != $CellContext`f]]], 
                BaseStyle -> Small]}, {"", 
               Button["Print local map", 
                Print[$CellContext`f -> $CellContext`newMap], BaseStyle -> 
                Small]}}]], DynamicModuleValues :> {}], "Travel" -> 
         DynamicModule[{$CellContext`f = 
            "Expenses in VAT:Travel", $CellContext`string = 
            "", $CellContext`newMap = {}}, 
           Panel[
            Grid[{{
               Style["String map", Bold], SpanFromLeft}, {"Name:", 
               InputField[
                Dynamic[$CellContext`f], String, Enabled -> False]}, {
              "String:", 
               InputField[
                Dynamic[$CellContext`string], String]}, {"", 
               Button[
               "Add string", $CellContext`newMap = 
                 Union[$CellContext`newMap, {$CellContext`string}]; \
$CellContext`globMap["business"] = 
                 Union[{$CellContext`f -> $CellContext`newMap}, 
                   Block[{$CellContext`p, $CellContext`g}, 
                    Monads`comprehend[Monads`Sets, $CellContext`p, 
                    Monads`generator[
                    Pattern[$CellContext`p, Pattern[$CellContext`g, 
                    Blank[]] -> Blank[]], 
                    $CellContext`globMap[
                    "business"]], $CellContext`g != $CellContext`f]]], 
                BaseStyle -> Small]}, {"", 
               Button[
               "Remove string", $CellContext`newMap = 
                 Complement[$CellContext`newMap, {$CellContext`string}]; \
$CellContext`globMap["business"] = 
                 Union[{$CellContext`f -> $CellContext`newMap}, 
                   Block[{$CellContext`p, $CellContext`g}, 
                    Monads`comprehend[Monads`Sets, $CellContext`p, 
                    Monads`generator[
                    Pattern[$CellContext`p, Pattern[$CellContext`g, 
                    Blank[]] -> Blank[]], 
                    $CellContext`globMap[
                    "business"]], $CellContext`g != $CellContext`f]]], 
                BaseStyle -> Small]}, {"", 
               Button["Print local map", 
                Print[$CellContext`f -> $CellContext`newMap], BaseStyle -> 
                Small]}}]], DynamicModuleValues :> {}], "Marketing" -> 
         DynamicModule[{$CellContext`f = 
            "Expenses in VAT:Marketing", $CellContext`string = 
            "", $CellContext`newMap = {}}, 
           Panel[
            Grid[{{
               Style["String map", Bold], SpanFromLeft}, {"Name:", 
               InputField[
                Dynamic[$CellContext`f], String, Enabled -> False]}, {
              "String:", 
               InputField[
                Dynamic[$CellContext`string], String]}, {"", 
               Button[
               "Add string", $CellContext`newMap = 
                 Union[$CellContext`newMap, {$CellContext`string}]; \
$CellContext`globMap["business"] = 
                 Union[{$CellContext`f -> $CellContext`newMap}, 
                   Block[{$CellContext`p, $CellContext`g}, 
                    Monads`comprehend[Monads`Sets, $CellContext`p, 
                    Monads`generator[
                    Pattern[$CellContext`p, Pattern[$CellContext`g, 
                    Blank[]] -> Blank[]], 
                    $CellContext`globMap[
                    "business"]], $CellContext`g != $CellContext`f]]], 
                BaseStyle -> Small]}, {"", 
               Button[
               "Remove string", $CellContext`newMap = 
                 Complement[$CellContext`newMap, {$CellContext`string}]; \
$CellContext`globMap["business"] = 
                 Union[{$CellContext`f -> $CellContext`newMap}, 
                   Block[{$CellContext`p, $CellContext`g}, 
                    Monads`comprehend[Monads`Sets, $CellContext`p, 
                    Monads`generator[
                    Pattern[$CellContext`p, Pattern[$CellContext`g, 
                    Blank[]] -> Blank[]], 
                    $CellContext`globMap[
                    "business"]], $CellContext`g != $CellContext`f]]], 
                BaseStyle -> Small]}, {"", 
               Button["Print local map", 
                Print[$CellContext`f -> $CellContext`newMap], BaseStyle -> 
                Small]}}]], DynamicModuleValues :> {}], "Fuel" -> 
         DynamicModule[{$CellContext`f = 
            "Expenses in VAT:Fuel", $CellContext`string = 
            "", $CellContext`newMap = {"TEXSHINNERSBR", "W M MORRISON"}}, 
           Panel[
            Grid[{{
               Style["String map", Bold], SpanFromLeft}, {"Name:", 
               InputField[
                Dynamic[$CellContext`f], String, Enabled -> False]}, {
              "String:", 
               InputField[
                Dynamic[$CellContext`string], String]}, {"", 
               Button[
               "Add string", $CellContext`newMap = 
                 Union[$CellContext`newMap, {$CellContext`string}]; \
$CellContext`globMap["business"] = 
                 Union[{$CellContext`f -> $CellContext`newMap}, 
                   Block[{$CellContext`p, $CellContext`g}, 
                    Monads`comprehend[Monads`Sets, $CellContext`p, 
                    Monads`generator[
                    Pattern[$CellContext`p, Pattern[$CellContext`g, 
                    Blank[]] -> Blank[]], 
                    $CellContext`globMap[
                    "business"]], $CellContext`g != $CellContext`f]]], 
                BaseStyle -> Small]}, {"", 
               Button[
               "Remove string", $CellContext`newMap = 
                 Complement[$CellContext`newMap, {$CellContext`string}]; \
$CellContext`globMap["business"] = 
                 Union[{$CellContext`f -> $CellContext`newMap}, 
                   Block[{$CellContext`p, $CellContext`g}, 
                    Monads`comprehend[Monads`Sets, $CellContext`p, 
                    Monads`generator[
                    Pattern[$CellContext`p, Pattern[$CellContext`g, 
                    Blank[]] -> Blank[]], 
                    $CellContext`globMap[
                    "business"]], $CellContext`g != $CellContext`f]]], 
                BaseStyle -> Small]}, {"", 
               Button["Print local map", 
                Print[$CellContext`f -> $CellContext`newMap], BaseStyle -> 
                Small]}}]], DynamicModuleValues :> {}], "Equipment" -> 
         DynamicModule[{$CellContext`f = 
            "Expenses in VAT:Equipment", $CellContext`string = 
            "", $CellContext`newMap = {
             "ENDSLEIGH GAR", "HARRIS & SON", "MACHINE MART", "MAPLIN EXETER",
               "MOLE AVON", "MP HARDWARE"}}, 
           Panel[
            Grid[{{
               Style["String map", Bold], SpanFromLeft}, {"Name:", 
               InputField[
                Dynamic[$CellContext`f], String, Enabled -> False]}, {
              "String:", 
               InputField[
                Dynamic[$CellContext`string], String]}, {"", 
               Button[
               "Add string", $CellContext`newMap = 
                 Union[$CellContext`newMap, {$CellContext`string}]; \
$CellContext`globMap["business"] = 
                 Union[{$CellContext`f -> $CellContext`newMap}, 
                   Block[{$CellContext`p, $CellContext`g}, 
                    Monads`comprehend[Monads`Sets, $CellContext`p, 
                    Monads`generator[
                    Pattern[$CellContext`p, Pattern[$CellContext`g, 
                    Blank[]] -> Blank[]], 
                    $CellContext`globMap[
                    "business"]], $CellContext`g != $CellContext`f]]], 
                BaseStyle -> Small]}, {"", 
               Button[
               "Remove string", $CellContext`newMap = 
                 Complement[$CellContext`newMap, {$CellContext`string}]; \
$CellContext`globMap["business"] = 
                 Union[{$CellContext`f -> $CellContext`newMap}, 
                   Block[{$CellContext`p, $CellContext`g}, 
                    Monads`comprehend[Monads`Sets, $CellContext`p, 
                    Monads`generator[
                    Pattern[$CellContext`p, Pattern[$CellContext`g, 
                    Blank[]] -> Blank[]], 
                    $CellContext`globMap[
                    "business"]], $CellContext`g != $CellContext`f]]], 
                BaseStyle -> Small]}, {"", 
               Button["Print local map", 
                Print[$CellContext`f -> $CellContext`newMap], BaseStyle -> 
                Small]}}]], DynamicModuleValues :> {}], "Materials" -> 
         DynamicModule[{$CellContext`f = 
            "Expenses in VAT:Materials", $CellContext`string = 
            "", $CellContext`newMap = {
             "B & Q", "CORNWALL FARM", "CREATIVE CRAF", "FERMOYS", 
              "FIRST TUNNELS", "INTER-LINE", "PIPE STOCK", "RAINWATERPROD", 
              "SOUTHERN TIMB", "TRAGO NEWTON", "UNITED ROOFIN", "WP-ALLPLAS", 
              "WWW.KIOWA"}}, 
           Panel[
            Grid[{{
               Style["String map", Bold], SpanFromLeft}, {"Name:", 
               InputField[
                Dynamic[$CellContext`f], String, Enabled -> False]}, {
              "String:", 
               InputField[
                Dynamic[$CellContext`string], String]}, {"", 
               Button[
               "Add string", $CellContext`newMap = 
                 Union[$CellContext`newMap, {$CellContext`string}]; \
$CellContext`globMap["business"] = 
                 Union[{$CellContext`f -> $CellContext`newMap}, 
                   Block[{$CellContext`p, $CellContext`g}, 
                    Monads`comprehend[Monads`Sets, $CellContext`p, 
                    Monads`generator[
                    Pattern[$CellContext`p, Pattern[$CellContext`g, 
                    Blank[]] -> Blank[]], 
                    $CellContext`globMap[
                    "business"]], $CellContext`g != $CellContext`f]]], 
                BaseStyle -> Small]}, {"", 
               Button[
               "Remove string", $CellContext`newMap = 
                 Complement[$CellContext`newMap, {$CellContext`string}]; \
$CellContext`globMap["business"] = 
                 Union[{$CellContext`f -> $CellContext`newMap}, 
                   Block[{$CellContext`p, $CellContext`g}, 
                    Monads`comprehend[Monads`Sets, $CellContext`p, 
                    Monads`generator[
                    Pattern[$CellContext`p, Pattern[$CellContext`g, 
                    Blank[]] -> Blank[]], 
                    $CellContext`globMap[
                    "business"]], $CellContext`g != $CellContext`f]]], 
                BaseStyle -> Small]}, {"", 
               Button["Print local map", 
                Print[$CellContext`f -> $CellContext`newMap], BaseStyle -> 
                Small]}}]], DynamicModuleValues :> {}], "Plants and Trees" -> 
         DynamicModule[{$CellContext`f = 
            "Expenses in VAT:Plants and Trees", $CellContext`string = 
            "", $CellContext`newMap = {
             "MOLES SEEDS", "ORGANICCATALO", "TAMAR ORGANIC", "THE REAL SEED",
               "WOODLAND TRUST", "WWW.SOWSEEDS", "WWW.SUTTONS-S"}}, 
           Panel[
            Grid[{{
               Style["String map", Bold], SpanFromLeft}, {"Name:", 
               InputField[
                Dynamic[$CellContext`f], String, Enabled -> False]}, {
              "String:", 
               InputField[
                Dynamic[$CellContext`string], String]}, {"", 
               Button[
               "Add string", $CellContext`newMap = 
                 Union[$CellContext`newMap, {$CellContext`string}]; \
$CellContext`globMap["business"] = 
                 Union[{$CellContext`f -> $CellContext`newMap}, 
                   Block[{$CellContext`p, $CellContext`g}, 
                    Monads`comprehend[Monads`Sets, $CellContext`p, 
                    Monads`generator[
                    Pattern[$CellContext`p, Pattern[$CellContext`g, 
                    Blank[]] -> Blank[]], 
                    $CellContext`globMap[
                    "business"]], $CellContext`g != $CellContext`f]]], 
                BaseStyle -> Small]}, {"", 
               Button[
               "Remove string", $CellContext`newMap = 
                 Complement[$CellContext`newMap, {$CellContext`string}]; \
$CellContext`globMap["business"] = 
                 Union[{$CellContext`f -> $CellContext`newMap}, 
                   Block[{$CellContext`p, $CellContext`g}, 
                    Monads`comprehend[Monads`Sets, $CellContext`p, 
                    Monads`generator[
                    Pattern[$CellContext`p, Pattern[$CellContext`g, 
                    Blank[]] -> Blank[]], 
                    $CellContext`globMap[
                    "business"]], $CellContext`g != $CellContext`f]]], 
                BaseStyle -> Small]}, {"", 
               Button["Print local map", 
                Print[$CellContext`f -> $CellContext`newMap], BaseStyle -> 
                Small]}}]], DynamicModuleValues :> {}], "Auto:" -> 
         TabView[{
           "Auto Tax" -> 
            DynamicModule[{$CellContext`f = 
               "Expenses in VAT:Auto:Auto Tax", $CellContext`string = 
               "", $CellContext`newMap = {}}, 
              Panel[
               Grid[{{
                  Style["String map", Bold], SpanFromLeft}, {"Name:", 
                  InputField[
                   Dynamic[$CellContext`f], String, Enabled -> False]}, {
                 "String:", 
                  InputField[
                   Dynamic[$CellContext`string], String]}, {"", 
                  Button[
                  "Add string", $CellContext`newMap = 
                    Union[$CellContext`newMap, {$CellContext`string}]; \
$CellContext`globMap["business"] = 
                    Union[{$CellContext`f -> $CellContext`newMap}, 
                    Block[{$CellContext`p, $CellContext`g}, 
                    Monads`comprehend[Monads`Sets, $CellContext`p, 
                    Monads`generator[
                    Pattern[$CellContext`p, Pattern[$CellContext`g, 
                    Blank[]] -> Blank[]], 
                    $CellContext`globMap[
                    "business"]], $CellContext`g != $CellContext`f]]], 
                   BaseStyle -> Small]}, {"", 
                  Button[
                  "Remove string", $CellContext`newMap = 
                    Complement[$CellContext`newMap, {$CellContext`string}]; \
$CellContext`globMap["business"] = 
                    Union[{$CellContext`f -> $CellContext`newMap}, 
                    Block[{$CellContext`p, $CellContext`g}, 
                    Monads`comprehend[Monads`Sets, $CellContext`p, 
                    Monads`generator[
                    Pattern[$CellContext`p, Pattern[$CellContext`g, 
                    Blank[]] -> Blank[]], 
                    $CellContext`globMap[
                    "business"]], $CellContext`g != $CellContext`f]]], 
                   BaseStyle -> Small]}, {"", 
                  Button["Print local map", 
                   Print[$CellContext`f -> $CellContext`newMap], BaseStyle -> 
                   Small]}}]], DynamicModuleValues :> {}], "Auto Fuel" -> 
            DynamicModule[{$CellContext`f = 
               "Expenses in VAT:Auto:Auto Fuel", $CellContext`string = 
               "", $CellContext`newMap = {}}, 
              Panel[
               Grid[{{
                  Style["String map", Bold], SpanFromLeft}, {"Name:", 
                  InputField[
                   Dynamic[$CellContext`f], String, Enabled -> False]}, {
                 "String:", 
                  InputField[
                   Dynamic[$CellContext`string], String]}, {"", 
                  Button[
                  "Add string", $CellContext`newMap = 
                    Union[$CellContext`newMap, {$CellContext`string}]; \
$CellContext`globMap["business"] = 
                    Union[{$CellContext`f -> $CellContext`newMap}, 
                    Block[{$CellContext`p, $CellContext`g}, 
                    Monads`comprehend[Monads`Sets, $CellContext`p, 
                    Monads`generator[
                    Pattern[$CellContext`p, Pattern[$CellContext`g, 
                    Blank[]] -> Blank[]], 
                    $CellContext`globMap[
                    "business"]], $CellContext`g != $CellContext`f]]], 
                   BaseStyle -> Small]}, {"", 
                  Button[
                  "Remove string", $CellContext`newMap = 
                    Complement[$CellContext`newMap, {$CellContext`string}]; \
$CellContext`globMap["business"] = 
                    Union[{$CellContext`f -> $CellContext`newMap}, 
                    Block[{$CellContext`p, $CellContext`g}, 
                    Monads`comprehend[Monads`Sets, $CellContext`p, 
                    Monads`generator[
                    Pattern[$CellContext`p, Pattern[$CellContext`g, 
                    Blank[]] -> Blank[]], 
                    $CellContext`globMap[
                    "business"]], $CellContext`g != $CellContext`f]]], 
                   BaseStyle -> Small]}, {"", 
                  Button["Print local map", 
                   Print[$CellContext`f -> $CellContext`newMap], BaseStyle -> 
                   Small]}}]], DynamicModuleValues :> {}], "Auto Maintenance" -> 
            DynamicModule[{$CellContext`f = 
               "Expenses in VAT:Auto:Auto Maintenance", $CellContext`string = 
               "", $CellContext`newMap = {}}, 
              Panel[
               Grid[{{
                  Style["String map", Bold], SpanFromLeft}, {"Name:", 
                  InputField[
                   Dynamic[$CellContext`f], String, Enabled -> False]}, {
                 "String:", 
                  InputField[
                   Dynamic[$CellContext`string], String]}, {"", 
                  Button[
                  "Add string", $CellContext`newMap = 
                    Union[$CellContext`newMap, {$CellContext`string}]; \
$CellContext`globMap["business"] = 
                    Union[{$CellContext`f -> $CellContext`newMap}, 
                    Block[{$CellContext`p, $CellContext`g}, 
                    Monads`comprehend[Monads`Sets, $CellContext`p, 
                    Monads`generator[
                    Pattern[$CellContext`p, Pattern[$CellContext`g, 
                    Blank[]] -> Blank[]], 
                    $CellContext`globMap[
                    "business"]], $CellContext`g != $CellContext`f]]], 
                   BaseStyle -> Small]}, {"", 
                  Button[
                  "Remove string", $CellContext`newMap = 
                    Complement[$CellContext`newMap, {$CellContext`string}]; \
$CellContext`globMap["business"] = 
                    Union[{$CellContext`f -> $CellContext`newMap}, 
                    Block[{$CellContext`p, $CellContext`g}, 
                    Monads`comprehend[Monads`Sets, $CellContext`p, 
                    Monads`generator[
                    Pattern[$CellContext`p, Pattern[$CellContext`g, 
                    Blank[]] -> Blank[]], 
                    $CellContext`globMap[
                    "business"]], $CellContext`g != $CellContext`f]]], 
                   BaseStyle -> Small]}, {"", 
                  Button["Print local map", 
                   Print[$CellContext`f -> $CellContext`newMap], BaseStyle -> 
                   Small]}}]], DynamicModuleValues :> {}]}, 
           ControlPlacement -> {Center, Top}, LabelStyle -> Small, 
           Appearance -> {"Limited", 10}], "Contractors" -> 
         DynamicModule[{$CellContext`f = 
            "Expenses in VAT:Contractors", $CellContext`string = 
            "", $CellContext`newMap = {}}, 
           Panel[
            Grid[{{
               Style["String map", Bold], SpanFromLeft}, {"Name:", 
               InputField[
                Dynamic[$CellContext`f], String, Enabled -> False]}, {
              "String:", 
               InputField[
                Dynamic[$CellContext`string], String]}, {"", 
               Button[
               "Add string", $CellContext`newMap = 
                 Union[$CellContext`newMap, {$CellContext`string}]; \
$CellContext`globMap["business"] = 
                 Union[{$CellContext`f -> $CellContext`newMap}, 
                   Block[{$CellContext`p, $CellContext`g}, 
                    Monads`comprehend[Monads`Sets, $CellContext`p, 
                    Monads`generator[
                    Pattern[$CellContext`p, Pattern[$CellContext`g, 
                    Blank[]] -> Blank[]], 
                    $CellContext`globMap[
                    "business"]], $CellContext`g != $CellContext`f]]], 
                BaseStyle -> Small]}, {"", 
               Button[
               "Remove string", $CellContext`newMap = 
                 Complement[$CellContext`newMap, {$CellContext`string}]; \
$CellContext`globMap["business"] = 
                 Union[{$CellContext`f -> $CellContext`newMap}, 
                   Block[{$CellContext`p, $CellContext`g}, 
                    Monads`comprehend[Monads`Sets, $CellContext`p, 
                    Monads`generator[
                    Pattern[$CellContext`p, Pattern[$CellContext`g, 
                    Blank[]] -> Blank[]], 
                    $CellContext`globMap[
                    "business"]], $CellContext`g != $CellContext`f]]], 
                BaseStyle -> Small]}, {"", 
               Button["Print local map", 
                Print[$CellContext`f -> $CellContext`newMap], BaseStyle -> 
                Small]}}]], DynamicModuleValues :> {}]}, 
        ControlPlacement -> {Center, Top}, LabelStyle -> Small, 
        Appearance -> {"Limited", 10}], "Unspecified" -> 
      DynamicModule[{$CellContext`f = "Unspecified", $CellContext`string = 
         "", $CellContext`newMap = {}}, 
        Panel[
         Grid[{{
            Style["String map", Bold], SpanFromLeft}, {"Name:", 
            InputField[
             Dynamic[$CellContext`f], String, Enabled -> False]}, {
           "String:", 
            InputField[
             Dynamic[$CellContext`string], String]}, {"", 
            Button[
            "Add string", $CellContext`newMap = 
              Union[$CellContext`newMap, {$CellContext`string}]; \
$CellContext`globMap["business"] = 
              Union[{$CellContext`f -> $CellContext`newMap}, 
                Block[{$CellContext`p, $CellContext`g}, 
                 Monads`comprehend[Monads`Sets, $CellContext`p, 
                  Monads`generator[
                   Pattern[$CellContext`p, Pattern[$CellContext`g, 
                    Blank[]] -> Blank[]], 
                   $CellContext`globMap[
                   "business"]], $CellContext`g != $CellContext`f]]], 
             BaseStyle -> Small]}, {"", 
            Button[
            "Remove string", $CellContext`newMap = 
              Complement[$CellContext`newMap, {$CellContext`string}]; \
$CellContext`globMap["business"] = 
              Union[{$CellContext`f -> $CellContext`newMap}, 
                Block[{$CellContext`p, $CellContext`g}, 
                 Monads`comprehend[Monads`Sets, $CellContext`p, 
                  Monads`generator[
                   Pattern[$CellContext`p, Pattern[$CellContext`g, 
                    Blank[]] -> Blank[]], 
                   $CellContext`globMap[
                   "business"]], $CellContext`g != $CellContext`f]]], 
             BaseStyle -> Small]}, {"", 
            Button["Print local map", 
             Print[$CellContext`f -> $CellContext`newMap], BaseStyle -> 
             Small]}}]], DynamicModuleValues :> {}], "Expenses outside VAT:" -> 
      TabView[{
        "Insurance:" -> 
         TabView[{
           "Liability Insurance" -> 
            DynamicModule[{$CellContext`f = 
               "Expenses outside VAT:Insurance:Liability Insurance", \
$CellContext`string = "", $CellContext`newMap = {}}, 
              Panel[
               Grid[{{
                  Style["String map", Bold], SpanFromLeft}, {"Name:", 
                  InputField[
                   Dynamic[$CellContext`f], String, Enabled -> False]}, {
                 "String:", 
                  InputField[
                   Dynamic[$CellContext`string], String]}, {"", 
                  Button[
                  "Add string", $CellContext`newMap = 
                    Union[$CellContext`newMap, {$CellContext`string}]; \
$CellContext`globMap["business"] = 
                    Union[{$CellContext`f -> $CellContext`newMap}, 
                    Block[{$CellContext`p, $CellContext`g}, 
                    Monads`comprehend[Monads`Sets, $CellContext`p, 
                    Monads`generator[
                    Pattern[$CellContext`p, Pattern[$CellContext`g, 
                    Blank[]] -> Blank[]], 
                    $CellContext`globMap[
                    "business"]], $CellContext`g != $CellContext`f]]], 
                   BaseStyle -> Small]}, {"", 
                  Button[
                  "Remove string", $CellContext`newMap = 
                    Complement[$CellContext`newMap, {$CellContext`string}]; \
$CellContext`globMap["business"] = 
                    Union[{$CellContext`f -> $CellContext`newMap}, 
                    Block[{$CellContext`p, $CellContext`g}, 
                    Monads`comprehend[Monads`Sets, $CellContext`p, 
                    Monads`generator[
                    Pattern[$CellContext`p, Pattern[$CellContext`g, 
                    Blank[]] -> Blank[]], 
                    $CellContext`globMap[
                    "business"]], $CellContext`g != $CellContext`f]]], 
                   BaseStyle -> Small]}, {"", 
                  Button["Print local map", 
                   Print[$CellContext`f -> $CellContext`newMap], BaseStyle -> 
                   Small]}}]], DynamicModuleValues :> {}], "Auto Insurance" -> 
            DynamicModule[{$CellContext`f = 
               "Expenses outside VAT:Insurance:Auto Insurance", \
$CellContext`string = "", $CellContext`newMap = {}}, 
              Panel[
               Grid[{{
                  Style["String map", Bold], SpanFromLeft}, {"Name:", 
                  InputField[
                   Dynamic[$CellContext`f], String, Enabled -> False]}, {
                 "String:", 
                  InputField[
                   Dynamic[$CellContext`string], String]}, {"", 
                  Button[
                  "Add string", $CellContext`newMap = 
                    Union[$CellContext`newMap, {$CellContext`string}]; \
$CellContext`globMap["business"] = 
                    Union[{$CellContext`f -> $CellContext`newMap}, 
                    Block[{$CellContext`p, $CellContext`g}, 
                    Monads`comprehend[Monads`Sets, $CellContext`p, 
                    Monads`generator[
                    Pattern[$CellContext`p, Pattern[$CellContext`g, 
                    Blank[]] -> Blank[]], 
                    $CellContext`globMap[
                    "business"]], $CellContext`g != $CellContext`f]]], 
                   BaseStyle -> Small]}, {"", 
                  Button[
                  "Remove string", $CellContext`newMap = 
                    Complement[$CellContext`newMap, {$CellContext`string}]; \
$CellContext`globMap["business"] = 
                    Union[{$CellContext`f -> $CellContext`newMap}, 
                    Block[{$CellContext`p, $CellContext`g}, 
                    Monads`comprehend[Monads`Sets, $CellContext`p, 
                    Monads`generator[
                    Pattern[$CellContext`p, Pattern[$CellContext`g, 
                    Blank[]] -> Blank[]], 
                    $CellContext`globMap[
                    "business"]], $CellContext`g != $CellContext`f]]], 
                   BaseStyle -> Small]}, {"", 
                  Button["Print local map", 
                   Print[$CellContext`f -> $CellContext`newMap], BaseStyle -> 
                   Small]}}]], DynamicModuleValues :> {}]}, 
           ControlPlacement -> {Center, Top}, LabelStyle -> Small, 
           Appearance -> {"Limited", 10}]}, ControlPlacement -> {Center, Top},
         LabelStyle -> Small, Appearance -> {"Limited", 10}], "Emoluments:" -> 
      TabView[{"Partners Remuneration:" -> 
         TabView[{
           "Matthew Fairtlough" -> 
            DynamicModule[{$CellContext`f = 
               "Emoluments:Partners Remuneration:Matthew Fairtlough", \
$CellContext`string = "", $CellContext`newMap = {}}, 
              Panel[
               Grid[{{
                  Style["String map", Bold], SpanFromLeft}, {"Name:", 
                  InputField[
                   Dynamic[$CellContext`f], String, Enabled -> False]}, {
                 "String:", 
                  InputField[
                   Dynamic[$CellContext`string], String]}, {"", 
                  Button[
                  "Add string", $CellContext`newMap = 
                    Union[$CellContext`newMap, {$CellContext`string}]; \
$CellContext`globMap["business"] = 
                    Union[{$CellContext`f -> $CellContext`newMap}, 
                    Block[{$CellContext`p, $CellContext`g}, 
                    Monads`comprehend[Monads`Sets, $CellContext`p, 
                    Monads`generator[
                    Pattern[$CellContext`p, Pattern[$CellContext`g, 
                    Blank[]] -> Blank[]], 
                    $CellContext`globMap[
                    "business"]], $CellContext`g != $CellContext`f]]], 
                   BaseStyle -> Small]}, {"", 
                  Button[
                  "Remove string", $CellContext`newMap = 
                    Complement[$CellContext`newMap, {$CellContext`string}]; \
$CellContext`globMap["business"] = 
                    Union[{$CellContext`f -> $CellContext`newMap}, 
                    Block[{$CellContext`p, $CellContext`g}, 
                    Monads`comprehend[Monads`Sets, $CellContext`p, 
                    Monads`generator[
                    Pattern[$CellContext`p, Pattern[$CellContext`g, 
                    Blank[]] -> Blank[]], 
                    $CellContext`globMap[
                    "business"]], $CellContext`g != $CellContext`f]]], 
                   BaseStyle -> Small]}, {"", 
                  Button["Print local map", 
                   Print[$CellContext`f -> $CellContext`newMap], BaseStyle -> 
                   Small]}}]], DynamicModuleValues :> {}], "Beth Champion" -> 
            DynamicModule[{$CellContext`f = 
               "Emoluments:Partners Remuneration:Beth Champion", \
$CellContext`string = "", $CellContext`newMap = {}}, 
              Panel[
               Grid[{{
                  Style["String map", Bold], SpanFromLeft}, {"Name:", 
                  InputField[
                   Dynamic[$CellContext`f], String, Enabled -> False]}, {
                 "String:", 
                  InputField[
                   Dynamic[$CellContext`string], String]}, {"", 
                  Button[
                  "Add string", $CellContext`newMap = 
                    Union[$CellContext`newMap, {$CellContext`string}]; \
$CellContext`globMap["business"] = 
                    Union[{$CellContext`f -> $CellContext`newMap}, 
                    Block[{$CellContext`p, $CellContext`g}, 
                    Monads`comprehend[Monads`Sets, $CellContext`p, 
                    Monads`generator[
                    Pattern[$CellContext`p, Pattern[$CellContext`g, 
                    Blank[]] -> Blank[]], 
                    $CellContext`globMap[
                    "business"]], $CellContext`g != $CellContext`f]]], 
                   BaseStyle -> Small]}, {"", 
                  Button[
                  "Remove string", $CellContext`newMap = 
                    Complement[$CellContext`newMap, {$CellContext`string}]; \
$CellContext`globMap["business"] = 
                    Union[{$CellContext`f -> $CellContext`newMap}, 
                    Block[{$CellContext`p, $CellContext`g}, 
                    Monads`comprehend[Monads`Sets, $CellContext`p, 
                    Monads`generator[
                    Pattern[$CellContext`p, Pattern[$CellContext`g, 
                    Blank[]] -> Blank[]], 
                    $CellContext`globMap[
                    "business"]], $CellContext`g != $CellContext`f]]], 
                   BaseStyle -> Small]}, {"", 
                  Button["Print local map", 
                   Print[$CellContext`f -> $CellContext`newMap], BaseStyle -> 
                   Small]}}]], DynamicModuleValues :> {}], "Mack Balance" -> 
            DynamicModule[{$CellContext`f = 
               "Emoluments:Partners Remuneration:Mack Balance", \
$CellContext`string = "", $CellContext`newMap = {}}, 
              Panel[
               Grid[{{
                  Style["String map", Bold], SpanFromLeft}, {"Name:", 
                  InputField[
                   Dynamic[$CellContext`f], String, Enabled -> False]}, {
                 "String:", 
                  InputField[
                   Dynamic[$CellContext`string], String]}, {"", 
                  Button[
                  "Add string", $CellContext`newMap = 
                    Union[$CellContext`newMap, {$CellContext`string}]; \
$CellContext`globMap["business"] = 
                    Union[{$CellContext`f -> $CellContext`newMap}, 
                    Block[{$CellContext`p, $CellContext`g}, 
                    Monads`comprehend[Monads`Sets, $CellContext`p, 
                    Monads`generator[
                    Pattern[$CellContext`p, Pattern[$CellContext`g, 
                    Blank[]] -> Blank[]], 
                    $CellContext`globMap[
                    "business"]], $CellContext`g != $CellContext`f]]], 
                   BaseStyle -> Small]}, {"", 
                  Button[
                  "Remove string", $CellContext`newMap = 
                    Complement[$CellContext`newMap, {$CellContext`string}]; \
$CellContext`globMap["business"] = 
                    Union[{$CellContext`f -> $CellContext`newMap}, 
                    Block[{$CellContext`p, $CellContext`g}, 
                    Monads`comprehend[Monads`Sets, $CellContext`p, 
                    Monads`generator[
                    Pattern[$CellContext`p, Pattern[$CellContext`g, 
                    Blank[]] -> Blank[]], 
                    $CellContext`globMap[
                    "business"]], $CellContext`g != $CellContext`f]]], 
                   BaseStyle -> Small]}, {"", 
                  Button["Print local map", 
                   Print[$CellContext`f -> $CellContext`newMap], BaseStyle -> 
                   Small]}}]], DynamicModuleValues :> {}], "Agatha Balance" -> 
            DynamicModule[{$CellContext`f = 
               "Emoluments:Partners Remuneration:Agatha Balance", \
$CellContext`string = "", $CellContext`newMap = {}}, 
              Panel[
               Grid[{{
                  Style["String map", Bold], SpanFromLeft}, {"Name:", 
                  InputField[
                   Dynamic[$CellContext`f], String, Enabled -> False]}, {
                 "String:", 
                  InputField[
                   Dynamic[$CellContext`string], String]}, {"", 
                  Button[
                  "Add string", $CellContext`newMap = 
                    Union[$CellContext`newMap, {$CellContext`string}]; \
$CellContext`globMap["business"] = 
                    Union[{$CellContext`f -> $CellContext`newMap}, 
                    Block[{$CellContext`p, $CellContext`g}, 
                    Monads`comprehend[Monads`Sets, $CellContext`p, 
                    Monads`generator[
                    Pattern[$CellContext`p, Pattern[$CellContext`g, 
                    Blank[]] -> Blank[]], 
                    $CellContext`globMap[
                    "business"]], $CellContext`g != $CellContext`f]]], 
                   BaseStyle -> Small]}, {"", 
                  Button[
                  "Remove string", $CellContext`newMap = 
                    Complement[$CellContext`newMap, {$CellContext`string}]; \
$CellContext`globMap["business"] = 
                    Union[{$CellContext`f -> $CellContext`newMap}, 
                    Block[{$CellContext`p, $CellContext`g}, 
                    Monads`comprehend[Monads`Sets, $CellContext`p, 
                    Monads`generator[
                    Pattern[$CellContext`p, Pattern[$CellContext`g, 
                    Blank[]] -> Blank[]], 
                    $CellContext`globMap[
                    "business"]], $CellContext`g != $CellContext`f]]], 
                   BaseStyle -> Small]}, {"", 
                  Button["Print local map", 
                   Print[$CellContext`f -> $CellContext`newMap], BaseStyle -> 
                   Small]}}]], DynamicModuleValues :> {}]}, 
           ControlPlacement -> {Center, Top}, LabelStyle -> Small, 
           Appearance -> {"Limited", 10}], "Employees:" -> 
         TabView[{
           "Gross Salaries" -> 
            DynamicModule[{$CellContext`f = 
               "Emoluments:Employees:Gross Salaries", $CellContext`string = 
               "", $CellContext`newMap = {}}, 
              Panel[
               Grid[{{
                  Style["String map", Bold], SpanFromLeft}, {"Name:", 
                  InputField[
                   Dynamic[$CellContext`f], String, Enabled -> False]}, {
                 "String:", 
                  InputField[
                   Dynamic[$CellContext`string], String]}, {"", 
                  Button[
                  "Add string", $CellContext`newMap = 
                    Union[$CellContext`newMap, {$CellContext`string}]; \
$CellContext`globMap["business"] = 
                    Union[{$CellContext`f -> $CellContext`newMap}, 
                    Block[{$CellContext`p, $CellContext`g}, 
                    Monads`comprehend[Monads`Sets, $CellContext`p, 
                    Monads`generator[
                    Pattern[$CellContext`p, Pattern[$CellContext`g, 
                    Blank[]] -> Blank[]], 
                    $CellContext`globMap[
                    "business"]], $CellContext`g != $CellContext`f]]], 
                   BaseStyle -> Small]}, {"", 
                  Button[
                  "Remove string", $CellContext`newMap = 
                    Complement[$CellContext`newMap, {$CellContext`string}]; \
$CellContext`globMap["business"] = 
                    Union[{$CellContext`f -> $CellContext`newMap}, 
                    Block[{$CellContext`p, $CellContext`g}, 
                    Monads`comprehend[Monads`Sets, $CellContext`p, 
                    Monads`generator[
                    Pattern[$CellContext`p, Pattern[$CellContext`g, 
                    Blank[]] -> Blank[]], 
                    $CellContext`globMap[
                    "business"]], $CellContext`g != $CellContext`f]]], 
                   BaseStyle -> Small]}, {"", 
                  Button["Print local map", 
                   Print[$CellContext`f -> $CellContext`newMap], BaseStyle -> 
                   Small]}}]], DynamicModuleValues :> {}]}, 
           ControlPlacement -> {Center, Top}, LabelStyle -> Small, 
           Appearance -> {"Limited", 10}]}, ControlPlacement -> {Center, Top},
         LabelStyle -> Small, Appearance -> {"Limited", 10}], "VAT:" -> 
      TabView[{"Output:" -> 
         TabView[{
           "Sales" -> DynamicModule[{$CellContext`f = 
               "VAT:Output:Sales", $CellContext`string = 
               "", $CellContext`newMap = {}}, 
              Panel[
               Grid[{{
                  Style["String map", Bold], SpanFromLeft}, {"Name:", 
                  InputField[
                   Dynamic[$CellContext`f], String, Enabled -> False]}, {
                 "String:", 
                  InputField[
                   Dynamic[$CellContext`string], String]}, {"", 
                  Button[
                  "Add string", $CellContext`newMap = 
                    Union[$CellContext`newMap, {$CellContext`string}]; \
$CellContext`globMap["business"] = 
                    Union[{$CellContext`f -> $CellContext`newMap}, 
                    Block[{$CellContext`p, $CellContext`g}, 
                    Monads`comprehend[Monads`Sets, $CellContext`p, 
                    Monads`generator[
                    Pattern[$CellContext`p, Pattern[$CellContext`g, 
                    Blank[]] -> Blank[]], 
                    $CellContext`globMap[
                    "business"]], $CellContext`g != $CellContext`f]]], 
                   BaseStyle -> Small]}, {"", 
                  Button[
                  "Remove string", $CellContext`newMap = 
                    Complement[$CellContext`newMap, {$CellContext`string}]; \
$CellContext`globMap["business"] = 
                    Union[{$CellContext`f -> $CellContext`newMap}, 
                    Block[{$CellContext`p, $CellContext`g}, 
                    Monads`comprehend[Monads`Sets, $CellContext`p, 
                    Monads`generator[
                    Pattern[$CellContext`p, Pattern[$CellContext`g, 
                    Blank[]] -> Blank[]], 
                    $CellContext`globMap[
                    "business"]], $CellContext`g != $CellContext`f]]], 
                   BaseStyle -> Small]}, {"", 
                  Button["Print local map", 
                   Print[$CellContext`f -> $CellContext`newMap], BaseStyle -> 
                   Small]}}]], DynamicModuleValues :> {}]}, 
           ControlPlacement -> {Center, Top}, LabelStyle -> Small, 
           Appearance -> {"Limited", 10}], "Input" -> 
         DynamicModule[{$CellContext`f = "VAT:Input", $CellContext`string = 
            "", $CellContext`newMap = {"HMRC VAT REPAY"}}, 
           Panel[
            Grid[{{
               Style["String map", Bold], SpanFromLeft}, {"Name:", 
               InputField[
                Dynamic[$CellContext`f], String, Enabled -> False]}, {
              "String:", 
               InputField[
                Dynamic[$CellContext`string], String]}, {"", 
               Button[
               "Add string", $CellContext`newMap = 
                 Union[$CellContext`newMap, {$CellContext`string}]; \
$CellContext`globMap["business"] = 
                 Union[{$CellContext`f -> $CellContext`newMap}, 
                   Block[{$CellContext`p, $CellContext`g}, 
                    Monads`comprehend[Monads`Sets, $CellContext`p, 
                    Monads`generator[
                    Pattern[$CellContext`p, Pattern[$CellContext`g, 
                    Blank[]] -> Blank[]], 
                    $CellContext`globMap[
                    "business"]], $CellContext`g != $CellContext`f]]], 
                BaseStyle -> Small]}, {"", 
               Button[
               "Remove string", $CellContext`newMap = 
                 Complement[$CellContext`newMap, {$CellContext`string}]; \
$CellContext`globMap["business"] = 
                 Union[{$CellContext`f -> $CellContext`newMap}, 
                   Block[{$CellContext`p, $CellContext`g}, 
                    Monads`comprehend[Monads`Sets, $CellContext`p, 
                    Monads`generator[
                    Pattern[$CellContext`p, Pattern[$CellContext`g, 
                    Blank[]] -> Blank[]], 
                    $CellContext`globMap[
                    "business"]], $CellContext`g != $CellContext`f]]], 
                BaseStyle -> Small]}, {"", 
               Button["Print local map", 
                Print[$CellContext`f -> $CellContext`newMap], BaseStyle -> 
                Small]}}]], DynamicModuleValues :> {}]}, 
        ControlPlacement -> {Center, Top}, LabelStyle -> Small, 
        Appearance -> {"Limited", 10}], "Taxes:" -> 
      TabView[{"Income Tax" -> 
         DynamicModule[{$CellContext`f = 
            "Taxes:Income Tax", $CellContext`string = 
            "", $CellContext`newMap = {}}, 
           Panel[
            Grid[{{
               Style["String map", Bold], SpanFromLeft}, {"Name:", 
               InputField[
                Dynamic[$CellContext`f], String, Enabled -> False]}, {
              "String:", 
               InputField[
                Dynamic[$CellContext`string], String]}, {"", 
               Button[
               "Add string", $CellContext`newMap = 
                 Union[$CellContext`newMap, {$CellContext`string}]; \
$CellContext`globMap["business"] = 
                 Union[{$CellContext`f -> $CellContext`newMap}, 
                   Block[{$CellContext`p, $CellContext`g}, 
                    Monads`comprehend[Monads`Sets, $CellContext`p, 
                    Monads`generator[
                    Pattern[$CellContext`p, Pattern[$CellContext`g, 
                    Blank[]] -> Blank[]], 
                    $CellContext`globMap[
                    "business"]], $CellContext`g != $CellContext`f]]], 
                BaseStyle -> Small]}, {"", 
               Button[
               "Remove string", $CellContext`newMap = 
                 Complement[$CellContext`newMap, {$CellContext`string}]; \
$CellContext`globMap["business"] = 
                 Union[{$CellContext`f -> $CellContext`newMap}, 
                   Block[{$CellContext`p, $CellContext`g}, 
                    Monads`comprehend[Monads`Sets, $CellContext`p, 
                    Monads`generator[
                    Pattern[$CellContext`p, Pattern[$CellContext`g, 
                    Blank[]] -> Blank[]], 
                    $CellContext`globMap[
                    "business"]], $CellContext`g != $CellContext`f]]], 
                BaseStyle -> Small]}, {"", 
               Button["Print local map", 
                Print[$CellContext`f -> $CellContext`newMap], BaseStyle -> 
                Small]}}]], DynamicModuleValues :> {}], "Corporation Tax" -> 
         DynamicModule[{$CellContext`f = 
            "Taxes:Corporation Tax", $CellContext`string = 
            "", $CellContext`newMap = {}}, 
           Panel[
            Grid[{{
               Style["String map", Bold], SpanFromLeft}, {"Name:", 
               InputField[
                Dynamic[$CellContext`f], String, Enabled -> False]}, {
              "String:", 
               InputField[
                Dynamic[$CellContext`string], String]}, {"", 
               Button[
               "Add string", $CellContext`newMap = 
                 Union[$CellContext`newMap, {$CellContext`string}]; \
$CellContext`globMap["business"] = 
                 Union[{$CellContext`f -> $CellContext`newMap}, 
                   Block[{$CellContext`p, $CellContext`g}, 
                    Monads`comprehend[Monads`Sets, $CellContext`p, 
                    Monads`generator[
                    Pattern[$CellContext`p, Pattern[$CellContext`g, 
                    Blank[]] -> Blank[]], 
                    $CellContext`globMap[
                    "business"]], $CellContext`g != $CellContext`f]]], 
                BaseStyle -> Small]}, {"", 
               Button[
               "Remove string", $CellContext`newMap = 
                 Complement[$CellContext`newMap, {$CellContext`string}]; \
$CellContext`globMap["business"] = 
                 Union[{$CellContext`f -> $CellContext`newMap}, 
                   Block[{$CellContext`p, $CellContext`g}, 
                    Monads`comprehend[Monads`Sets, $CellContext`p, 
                    Monads`generator[
                    Pattern[$CellContext`p, Pattern[$CellContext`g, 
                    Blank[]] -> Blank[]], 
                    $CellContext`globMap[
                    "business"]], $CellContext`g != $CellContext`f]]], 
                BaseStyle -> Small]}, {"", 
               Button["Print local map", 
                Print[$CellContext`f -> $CellContext`newMap], BaseStyle -> 
                Small]}}]], DynamicModuleValues :> {}], "Other Tax" -> 
         DynamicModule[{$CellContext`f = 
            "Taxes:Other Tax", $CellContext`string = 
            "", $CellContext`newMap = {}}, 
           Panel[
            Grid[{{
               Style["String map", Bold], SpanFromLeft}, {"Name:", 
               InputField[
                Dynamic[$CellContext`f], String, Enabled -> False]}, {
              "String:", 
               InputField[
                Dynamic[$CellContext`string], String]}, {"", 
               Button[
               "Add string", $CellContext`newMap = 
                 Union[$CellContext`newMap, {$CellContext`string}]; \
$CellContext`globMap["business"] = 
                 Union[{$CellContext`f -> $CellContext`newMap}, 
                   Block[{$CellContext`p, $CellContext`g}, 
                    Monads`comprehend[Monads`Sets, $CellContext`p, 
                    Monads`generator[
                    Pattern[$CellContext`p, Pattern[$CellContext`g, 
                    Blank[]] -> Blank[]], 
                    $CellContext`globMap[
                    "business"]], $CellContext`g != $CellContext`f]]], 
                BaseStyle -> Small]}, {"", 
               Button[
               "Remove string", $CellContext`newMap = 
                 Complement[$CellContext`newMap, {$CellContext`string}]; \
$CellContext`globMap["business"] = 
                 Union[{$CellContext`f -> $CellContext`newMap}, 
                   Block[{$CellContext`p, $CellContext`g}, 
                    Monads`comprehend[Monads`Sets, $CellContext`p, 
                    Monads`generator[
                    Pattern[$CellContext`p, Pattern[$CellContext`g, 
                    Blank[]] -> Blank[]], 
                    $CellContext`globMap[
                    "business"]], $CellContext`g != $CellContext`f]]], 
                BaseStyle -> Small]}, {"", 
               Button["Print local map", 
                Print[$CellContext`f -> $CellContext`newMap], BaseStyle -> 
                Small]}}]], DynamicModuleValues :> {}]}, 
        ControlPlacement -> {Center, Top}, LabelStyle -> Small, 
        Appearance -> {"Limited", 10}], "Junk" -> 
      DynamicModule[{$CellContext`f = "Junk", $CellContext`string = 
         "", $CellContext`newMap = {}}, 
        Panel[
         Grid[{{
            Style["String map", Bold], SpanFromLeft}, {"Name:", 
            InputField[
             Dynamic[$CellContext`f], String, Enabled -> False]}, {
           "String:", 
            InputField[
             Dynamic[$CellContext`string], String]}, {"", 
            Button[
            "Add string", $CellContext`newMap = 
              Union[$CellContext`newMap, {$CellContext`string}]; \
$CellContext`globMap["business"] = 
              Union[{$CellContext`f -> $CellContext`newMap}, 
                Block[{$CellContext`p, $CellContext`g}, 
                 Monads`comprehend[Monads`Sets, $CellContext`p, 
                  Monads`generator[
                   Pattern[$CellContext`p, Pattern[$CellContext`g, 
                    Blank[]] -> Blank[]], 
                   $CellContext`globMap[
                   "business"]], $CellContext`g != $CellContext`f]]], 
             BaseStyle -> Small]}, {"", 
            Button[
            "Remove string", $CellContext`newMap = 
              Complement[$CellContext`newMap, {$CellContext`string}]; \
$CellContext`globMap["business"] = 
              Union[{$CellContext`f -> $CellContext`newMap}, 
                Block[{$CellContext`p, $CellContext`g}, 
                 Monads`comprehend[Monads`Sets, $CellContext`p, 
                  Monads`generator[
                   Pattern[$CellContext`p, Pattern[$CellContext`g, 
                    Blank[]] -> Blank[]], 
                   $CellContext`globMap[
                   "business"]], $CellContext`g != $CellContext`f]]], 
             BaseStyle -> Small]}, {"", 
            Button["Print local map", 
             Print[$CellContext`f -> $CellContext`newMap], BaseStyle -> 
             Small]}}]], DynamicModuleValues :> {}]}, Typeset`var$$, 
     ControlPlacement -> {Center, Top}, LabelStyle -> Small, 
     Appearance -> {"Limited", 10}]],
   DynamicModuleValues:>{}],
  Setting[#, {0}]& ]], "Output"],

Cell[BoxData[
 RowBox[{"\<\"Expenses in VAT:Materials\"\>", "\[Rule]", 
  RowBox[{"{", 
   RowBox[{"\<\"B & Q\"\>", ",", "\<\"CORNWALL FARM\"\>", 
    ",", "\<\"CREATIVE CRAF\"\>", ",", "\<\"FERMOYS\"\>", 
    ",", "\<\"FIRST TUNNELS\"\>", ",", "\<\"INTER-LINE\"\>", 
    ",", "\<\"PIPE STOCK\"\>", ",", "\<\"RAINWATERPROD\"\>", 
    ",", "\<\"SOUTHERN TIMB\"\>", ",", "\<\"TRAGO NEWTON\"\>", 
    ",", "\<\"UNITED ROOFIN\"\>", ",", "\<\"WP-ALLPLAS\"\>", 
    ",", "\<\"WWW.KIOWA\"\>"}], "}"}]}]], "Print"]
}, Open  ]],

Cell["\<\
For export purposes, these maps need to be \[OpenCurlyDoubleQuote]expanded\
\[CloseCurlyDoubleQuote] (and also reversed) so that each string is mapped to \
the associated account. The expansion could be done \[OpenCurlyDoubleQuote]on \
the fly\[CloseCurlyDoubleQuote] but here the entire map is massaged into the \
correct form:\
\>", "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{"expandMap", "[", "map_", "]"}], ":=", 
  RowBox[{"Block", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"x", ",", "y", ",", "z"}], "}"}], ",", 
    RowBox[{"\[LeftBracketingBar]", 
     RowBox[{
      RowBox[{"z", "\[Rule]", "x"}], ",", 
      RowBox[{
       RowBox[{"(", 
        RowBox[{"x_", "\[Rule]", "y_"}], ")"}], "\[LeftTriangle]", "map"}], 
      ",", 
      RowBox[{"z_", "\[LeftTriangle]", "y"}]}], "\[RightBracketingBar]"}]}], 
   "]"}]}]], "Input",
 InitializationGroup->True,
 CellChangeTimes->{{3.547323486932034*^9, 3.547323642912445*^9}, {
   3.547364454368484*^9, 3.547364455817918*^9}, 3.566704871048023*^9}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"expandMap", "@", 
  RowBox[{"globMap", "[", "\"\<business\>\"", "]"}]}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"\<\"ATM Debit\"\>", "\[Rule]", "\<\"Assets:Cash in Hand\"\>"}], 
   ",", 
   RowBox[{"\<\"TFR xxxxzzz\"\>", "\[Rule]", "\<\"Equity:Partners Loan\"\>"}],
    ",", 
   RowBox[{"\<\"TFR xxxxyyy\"\>", "\[Rule]", "\<\"Equity:Partners Loan\"\>"}],
    ",", 
   RowBox[{"\<\"COMPANIES HSE\"\>", 
    "\[Rule]", "\<\"Expenses in VAT:Dues and Subscriptions\"\>"}], ",", 
   RowBox[{"\<\"FWAG\"\>", 
    "\[Rule]", "\<\"Expenses in VAT:Dues and Subscriptions\"\>"}], ",", 
   RowBox[{"\<\"ENDSLEIGH GAR\"\>", 
    "\[Rule]", "\<\"Expenses in VAT:Equipment\"\>"}], ",", 
   RowBox[{"\<\"HARRIS & SON\"\>", 
    "\[Rule]", "\<\"Expenses in VAT:Equipment\"\>"}], ",", 
   RowBox[{"\<\"MACHINE MART\"\>", 
    "\[Rule]", "\<\"Expenses in VAT:Equipment\"\>"}], ",", 
   RowBox[{"\<\"MAPLIN EXETER\"\>", 
    "\[Rule]", "\<\"Expenses in VAT:Equipment\"\>"}], ",", 
   RowBox[{"\<\"MOLE AVON\"\>", 
    "\[Rule]", "\<\"Expenses in VAT:Equipment\"\>"}], ",", 
   RowBox[{"\<\"MP HARDWARE\"\>", 
    "\[Rule]", "\<\"Expenses in VAT:Equipment\"\>"}], ",", 
   RowBox[{"\<\"TEXSHINNERSBR\"\>", 
    "\[Rule]", "\<\"Expenses in VAT:Fuel\"\>"}], ",", 
   RowBox[{"\<\"W M MORRISON\"\>", 
    "\[Rule]", "\<\"Expenses in VAT:Fuel\"\>"}], ",", 
   RowBox[{"\<\"B & Q\"\>", "\[Rule]", "\<\"Expenses in VAT:Materials\"\>"}], 
   ",", 
   RowBox[{"\<\"CORNWALL FARM\"\>", 
    "\[Rule]", "\<\"Expenses in VAT:Materials\"\>"}], ",", 
   RowBox[{"\<\"CREATIVE CRAF\"\>", 
    "\[Rule]", "\<\"Expenses in VAT:Materials\"\>"}], ",", 
   RowBox[{"\<\"FERMOYS\"\>", 
    "\[Rule]", "\<\"Expenses in VAT:Materials\"\>"}], ",", 
   RowBox[{"\<\"FIRST TUNNELS\"\>", 
    "\[Rule]", "\<\"Expenses in VAT:Materials\"\>"}], ",", 
   RowBox[{"\<\"INTER-LINE\"\>", 
    "\[Rule]", "\<\"Expenses in VAT:Materials\"\>"}], ",", 
   RowBox[{"\<\"PIPE STOCK\"\>", 
    "\[Rule]", "\<\"Expenses in VAT:Materials\"\>"}], ",", 
   RowBox[{"\<\"RAINWATERPROD\"\>", 
    "\[Rule]", "\<\"Expenses in VAT:Materials\"\>"}], ",", 
   RowBox[{"\<\"SOUTHERN TIMB\"\>", 
    "\[Rule]", "\<\"Expenses in VAT:Materials\"\>"}], ",", 
   RowBox[{"\<\"TRAGO NEWTON\"\>", 
    "\[Rule]", "\<\"Expenses in VAT:Materials\"\>"}], ",", 
   RowBox[{"\<\"UNITED ROOFIN\"\>", 
    "\[Rule]", "\<\"Expenses in VAT:Materials\"\>"}], ",", 
   RowBox[{"\<\"WP-ALLPLAS\"\>", 
    "\[Rule]", "\<\"Expenses in VAT:Materials\"\>"}], ",", 
   RowBox[{"\<\"WWW.KIOWA\"\>", 
    "\[Rule]", "\<\"Expenses in VAT:Materials\"\>"}], ",", 
   RowBox[{"\<\"MOLES SEEDS\"\>", 
    "\[Rule]", "\<\"Expenses in VAT:Plants and Trees\"\>"}], ",", 
   RowBox[{"\<\"ORGANICCATALO\"\>", 
    "\[Rule]", "\<\"Expenses in VAT:Plants and Trees\"\>"}], ",", 
   RowBox[{"\<\"TAMAR ORGANIC\"\>", 
    "\[Rule]", "\<\"Expenses in VAT:Plants and Trees\"\>"}], ",", 
   RowBox[{"\<\"THE REAL SEED\"\>", 
    "\[Rule]", "\<\"Expenses in VAT:Plants and Trees\"\>"}], ",", 
   RowBox[{"\<\"WOODLAND TRUST\"\>", 
    "\[Rule]", "\<\"Expenses in VAT:Plants and Trees\"\>"}], ",", 
   RowBox[{"\<\"WWW.SOWSEEDS\"\>", 
    "\[Rule]", "\<\"Expenses in VAT:Plants and Trees\"\>"}], ",", 
   RowBox[{"\<\"WWW.SUTTONS-S\"\>", 
    "\[Rule]", "\<\"Expenses in VAT:Plants and Trees\"\>"}], ",", 
   RowBox[{"\<\"CORNWALL FARM\"\>", 
    "\[Rule]", "\<\"Expenses in VAT:Production\"\>"}], ",", 
   RowBox[{"\<\"WEB HOSTING\"\>", 
    "\[Rule]", "\<\"Expenses in VAT:Software\"\>"}], ",", 
   RowBox[{"\<\"WWW.ANDIC\"\>", 
    "\[Rule]", "\<\"Expenses in VAT:Software\"\>"}], ",", 
   RowBox[{"\<\"WWW.ANDICA\"\>", 
    "\[Rule]", "\<\"Expenses in VAT:Software\"\>"}], ",", 
   RowBox[{"\<\"WWW.TAXSH\"\>", 
    "\[Rule]", "\<\"Expenses in VAT:Software\"\>"}], ",", 
   RowBox[{"\<\"WWW.TAXSHIELD\"\>", 
    "\[Rule]", "\<\"Expenses in VAT:Software\"\>"}], ",", 
   RowBox[{"\<\"Bank Credit Interest\"\>", 
    "\[Rule]", "\<\"Income:Interest\"\>"}], ",", 
   RowBox[{"\<\"ANNUAL BONUS\"\>", "\[Rule]", "\<\"Income:Other Income\"\>"}],
    ",", 
   RowBox[{"\<\"National Giro Credit\"\>", 
    "\[Rule]", "\<\"Income:Other Income\"\>"}], ",", 
   RowBox[{"\<\"DETOX RETREATS LTD\"\>", 
    "\[Rule]", "\<\"Income:Sales:Food:Fruit and veg\"\>"}], ",", 
   RowBox[{"\<\"Faster Payment SOMEONE F & C\"\>", 
    "\[Rule]", "\<\"Income:Sales:Food:Fruit and veg\"\>"}], ",", 
   RowBox[{"\<\"Faster Payment B Person\"\>", 
    "\[Rule]", "\<\"Income:Sales:Food:Fruit and veg\"\>"}], ",", 
   RowBox[{"\<\"Faster Payment THRIVE CAFE RETAIL\"\>", 
    "\[Rule]", "\<\"Income:Sales:Food:Fruit and veg\"\>"}], ",", 
   RowBox[{"\<\"National Giro Credit\"\>", 
    "\[Rule]", "\<\"Income:Sales:Food:Fruit and veg\"\>"}], ",", 
   RowBox[{"\<\"HMRC VAT REPAY\"\>", "\[Rule]", "\<\"VAT:Input\"\>"}]}], 
  "}"}]], "Output"]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Initial experiments with editable transactions", "Subsection"],

Cell[BoxData[{
 RowBox[{"ClearAll", "[", "autoNumber", "]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"autoNumber", "[", 
   RowBox[{
    RowBox[{"Dynamic", "[", "data_", "]"}], ",", 
    RowBox[{"fieldName_String:", "\"\<number\>\""}], ",", 
    RowBox[{"offset_Integer:", "0"}]}], "]"}], ":=", "\[IndentingNewLine]", 
  RowBox[{"Do", "[", 
   RowBox[{
    RowBox[{"(", 
     RowBox[{
      RowBox[{"data", "[", 
       RowBox[{"[", 
        RowBox[{"i", ",", "fieldName"}], "]"}], "]"}], "=", 
      RowBox[{"offset", "+", "i"}]}], ")"}], ",", 
    RowBox[{"{", 
     RowBox[{"i", ",", "1", ",", 
      RowBox[{"Length", "[", "data", "]"}]}], "}"}]}], "]"}]}]}], "Input",
 InitializationGroup->True],

Cell["Sample credit card data", "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{"ccDataShort", "=", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"\"\<29/04/2013\>\"", ",", "\"\<CASHBACK\>\"", ",", 
       RowBox[{"-", "0.13`"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
      "\"\<02/05/2013\>\"", ",", "\"\<PAYMENT RECEIVED - THANK YOU\>\"", ",", 
       
       RowBox[{"-", "55.53`"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
      "\"\<05/05/2013\>\"", ",", "\"\<'T KOFFIEBOONTJE AALTER\>\"", ",", 
       "151.3`"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
      "\"\<\>\"", ",", "\"\<## 00000000179.10 EUR @ 1.183741\>\"", ",", "0"}],
       "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
      "\"\<05/05/2013\>\"", ",", "\"\<NON STERLING TRANSACTION FEE\>\"", ",", 
       "4.16`"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
      "\"\<\>\"", ",", "\"\<## 00000000179.10 EUR @ 0.000000\>\"", ",", "0"}],
       "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
      "\"\<18/05/2013\>\"", ",", "\"\<MAPLIN EXETER EX2 EXETER\>\"", ",", 
       "69.99`"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\"\<28/05/2013\>\"", ",", "\"\<CASHBACK\>\"", ",", 
       RowBox[{"-", "0.55`"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
      "\"\<27/05/2013\>\"", ",", "\"\<THE ROYAL SEVEN STARS DEVON\>\"", ",", 
       "27.6`"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
      "\"\<10/06/2013\>\"", ",", "\"\<WWW.TAYNA.CO.UK INTERNET\>\"", ",", 
       "232.98`"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
      "\"\<10/06/2013\>\"", ",", "\"\<PAYPAL *ELECTRONCWW 35314369001\>\"", 
       ",", "80.`"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
      "\"\<11/06/2013\>\"", ",", "\"\<WWW.TAYNA.CO.UK INTERNET\>\"", ",", 
       RowBox[{"-", "6.8`"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
      "\"\<19/06/2013\>\"", ",", "\"\<PAYMENT RECEIVED - THANK YOU\>\"", ",", 
       
       RowBox[{"-", "225.32`"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
      "\"\<21/06/2013\>\"", ",", "\"\<DIRECT DEBIT PAYMENT THANK YOU\>\"", 
       ",", 
       RowBox[{"-", "5.`"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
      "\"\<24/06/2013\>\"", ",", "\"\<WP-ALLPLAS.CO.UK ONLNE HITCHIN\>\"", 
       ",", "168.6`"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
      "\"\<24/06/2013\>\"", ",", "\"\<WP-SCOACH ETICKET STOCKPORT\>\"", ",", 
       "38.5`"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\"\<28/06/2013\>\"", ",", "\"\<CASHBACK\>\"", ",", 
       RowBox[{"-", "1.35`"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
      "\"\<01/07/2013\>\"", ",", "\"\<PAYPAL *ELECTRONCWW 35314369001\>\"", 
       ",", 
       RowBox[{"-", "7.95`"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
      "\"\<08/07/2013\>\"", ",", "\"\<THE MILL ON THE EXE EXETER\>\"", ",", 
       "33.5`"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
      "\"\<08/07/2013\>\"", ",", "\"\<B & Q EXETER EXR166\>\"", ",", 
       "73.86`"}], "}"}]}], "}"}]}], ";"}]], "Input",
 InitializationCell->True],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Dynamic", "[", 
  RowBox[{"ccDataShort", "[", 
   RowBox[{"[", 
    RowBox[{"1", ",", "3"}], "]"}], "]"}], "]"}]], "Input"],

Cell[BoxData[
 DynamicBox[ToBoxes[
   Part[$CellContext`ccDataShort, 1, 3], StandardForm],
  ImageSizeCache->{60., {1., 13.}}]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Editable display of data", "Subsubsection"],

Cell[TextData[{
 "Why are some but not all of the ",
 StyleBox["BaseStyle", "Input"],
 " directives ignored in the ",
 StyleBox["InputField", "Input"],
 "s below? In particular the ",
 StyleBox["Alignment", "Input"],
 " directive has no effect."
}], "Text"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"ClearAll", "[", "makeRow", "]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"makeRow", "[", 
   RowBox[{"data_", ",", "rowIndex_"}], "]"}], ":=", "\[IndentingNewLine]", 
  RowBox[{"Map", "[", 
   RowBox[{
    RowBox[{"Function", "[", 
     RowBox[{
      RowBox[{"{", "colIndex", "}"}], ",", 
      RowBox[{"InputField", "[", 
       RowBox[{
        RowBox[{"Dynamic", "[", 
         RowBox[{"data", "[", 
          RowBox[{"[", 
           RowBox[{"rowIndex", ",", "colIndex"}], "]"}], "]"}], "]"}], ",", 
        RowBox[{"Switch", "[", 
         RowBox[{
         "colIndex", ",", "1", ",", " ", "String", ",", "2", ",", "String", 
          ",", "3", ",", "Number"}], "]"}], ",", 
        RowBox[{"FieldSize", "\[Rule]", 
         RowBox[{"Switch", "[", 
          RowBox[{
          "colIndex", ",", "1", ",", " ", "10", ",", "2", ",", "30", ",", "3",
            ",", "10"}], "]"}]}], ",", 
        RowBox[{"BaseStyle", "\[Rule]", 
         RowBox[{"{", 
          RowBox[{"(*", 
           RowBox[{
            RowBox[{"SignPadding", "\[Rule]", "True"}], ","}], "*)"}], 
          RowBox[{"(*", "Text", "*)"}], 
          RowBox[{
           RowBox[{"Alignment", "\[Rule]", "Right"}], ",", 
           RowBox[{"NumberPadding", "\[Rule]", 
            RowBox[{"{", 
             RowBox[{"\"\<\\t\>\"", ",", "\"\<\>\""}], "}"}]}], ",", 
           RowBox[{"NumberPoint", "\[Rule]", "\"\<.\>\""}], ",", 
           RowBox[{"NumberSeparator", "\[Rule]", "\"\<,\>\""}]}], "}"}]}]}], 
       "]"}]}], "]"}], ",", 
    RowBox[{"Range", "[", "3", "]"}]}], "]"}]}], "\[IndentingNewLine]", 
 RowBox[{"SetAttributes", "[", 
  RowBox[{"makeRow", ",", "HoldAll"}], "]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"AssociationThread", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
       "\"\<date\>\"", ",", "\"\<description\>\"", ",", "\"\<value\>\""}], 
       "}"}], "\[Rule]", "#"}], "]"}], "&"}], "/@", 
   RowBox[{"Map", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"makeRow", "[", 
       RowBox[{"ccDataShort", ",", "#"}], "]"}], "&"}], ",", 
     RowBox[{"Range", "[", "20", "]"}]}], "]"}]}], "//", 
  "Dataset"}]}], "Input",
 InitializationGroup->True,
 CellTags->{"tofix", "todo"}],

Cell[BoxData[
 InterpretationBox[
  TagBox[
   StyleBox[
    PaneSelectorBox[{False->GridBox[{
       {
        StyleBox["\<\"date\"\>",
         LineColor->GrayLevel[0.3],
         FrontFaceColor->GrayLevel[0.3],
         BackFaceColor->GrayLevel[0.3],
         GraphicsColor->GrayLevel[0.3],
         FontColor->GrayLevel[0.3]], 
        StyleBox["\<\"description\"\>",
         LineColor->GrayLevel[0.3],
         FrontFaceColor->GrayLevel[0.3],
         BackFaceColor->GrayLevel[0.3],
         GraphicsColor->GrayLevel[0.3],
         FontColor->GrayLevel[0.3]], 
        StyleBox["\<\"value\"\>",
         LineColor->GrayLevel[0.3],
         FrontFaceColor->GrayLevel[0.3],
         BackFaceColor->GrayLevel[0.3],
         GraphicsColor->GrayLevel[0.3],
         FontColor->GrayLevel[0.3]]},
       {
        InterpretationBox[
         TagBox[
          InputFieldBox[Dynamic[
            Part[$CellContext`ccDataShort, 1, 1]], String,
           
           BaseStyle->{
            Alignment -> Right, NumberPadding -> {"\t", ""}, NumberPoint -> 
             ".", NumberSeparator -> ","},
           FieldSize->10],
          Short[#, 0.5]& ],
         InputField[
          Dynamic[
           Part[$CellContext`ccDataShort, 1, 1]], String, FieldSize -> 10, 
          BaseStyle -> {
           Alignment -> Right, NumberPadding -> {"\t", ""}, NumberPoint -> 
            ".", NumberSeparator -> ","}]], 
        InterpretationBox[
         TagBox[
          InputFieldBox[Dynamic[
            Part[$CellContext`ccDataShort, 1, 2]], String,
           
           BaseStyle->{
            Alignment -> Right, NumberPadding -> {"\t", ""}, NumberPoint -> 
             ".", NumberSeparator -> ","},
           FieldSize->30],
          Short[#, 0.5]& ],
         InputField[
          Dynamic[
           Part[$CellContext`ccDataShort, 1, 2]], String, FieldSize -> 30, 
          BaseStyle -> {
           Alignment -> Right, NumberPadding -> {"\t", ""}, NumberPoint -> 
            ".", NumberSeparator -> ","}]], 
        InterpretationBox[
         TagBox[
          InputFieldBox[Dynamic[
            Part[$CellContext`ccDataShort, 1, 3]], Number,
           
           BaseStyle->{
            Alignment -> Right, NumberPadding -> {"\t", ""}, NumberPoint -> 
             ".", NumberSeparator -> ","},
           FieldSize->10],
          Short[#, 0.5]& ],
         InputField[
          Dynamic[
           Part[$CellContext`ccDataShort, 1, 3]], Number, FieldSize -> 10, 
          BaseStyle -> {
           Alignment -> Right, NumberPadding -> {"\t", ""}, NumberPoint -> 
            ".", NumberSeparator -> ","}]]},
       {
        InterpretationBox[
         TagBox[
          InputFieldBox[Dynamic[
            Part[$CellContext`ccDataShort, 2, 1]], String,
           
           BaseStyle->{
            Alignment -> Right, NumberPadding -> {"\t", ""}, NumberPoint -> 
             ".", NumberSeparator -> ","},
           FieldSize->10],
          Short[#, 0.5]& ],
         InputField[
          Dynamic[
           Part[$CellContext`ccDataShort, 2, 1]], String, FieldSize -> 10, 
          BaseStyle -> {
           Alignment -> Right, NumberPadding -> {"\t", ""}, NumberPoint -> 
            ".", NumberSeparator -> ","}]], 
        InterpretationBox[
         TagBox[
          InputFieldBox[Dynamic[
            Part[$CellContext`ccDataShort, 2, 2]], String,
           
           BaseStyle->{
            Alignment -> Right, NumberPadding -> {"\t", ""}, NumberPoint -> 
             ".", NumberSeparator -> ","},
           FieldSize->30],
          Short[#, 0.5]& ],
         InputField[
          Dynamic[
           Part[$CellContext`ccDataShort, 2, 2]], String, FieldSize -> 30, 
          BaseStyle -> {
           Alignment -> Right, NumberPadding -> {"\t", ""}, NumberPoint -> 
            ".", NumberSeparator -> ","}]], 
        InterpretationBox[
         TagBox[
          InputFieldBox[Dynamic[
            Part[$CellContext`ccDataShort, 2, 3]], Number,
           
           BaseStyle->{
            Alignment -> Right, NumberPadding -> {"\t", ""}, NumberPoint -> 
             ".", NumberSeparator -> ","},
           FieldSize->10],
          Short[#, 0.5]& ],
         InputField[
          Dynamic[
           Part[$CellContext`ccDataShort, 2, 3]], Number, FieldSize -> 10, 
          BaseStyle -> {
           Alignment -> Right, NumberPadding -> {"\t", ""}, NumberPoint -> 
            ".", NumberSeparator -> ","}]]},
       {
        InterpretationBox[
         TagBox[
          InputFieldBox[Dynamic[
            Part[$CellContext`ccDataShort, 3, 1]], String,
           
           BaseStyle->{
            Alignment -> Right, NumberPadding -> {"\t", ""}, NumberPoint -> 
             ".", NumberSeparator -> ","},
           FieldSize->10],
          Short[#, 0.5]& ],
         InputField[
          Dynamic[
           Part[$CellContext`ccDataShort, 3, 1]], String, FieldSize -> 10, 
          BaseStyle -> {
           Alignment -> Right, NumberPadding -> {"\t", ""}, NumberPoint -> 
            ".", NumberSeparator -> ","}]], 
        InterpretationBox[
         TagBox[
          InputFieldBox[Dynamic[
            Part[$CellContext`ccDataShort, 3, 2]], String,
           
           BaseStyle->{
            Alignment -> Right, NumberPadding -> {"\t", ""}, NumberPoint -> 
             ".", NumberSeparator -> ","},
           FieldSize->30],
          Short[#, 0.5]& ],
         InputField[
          Dynamic[
           Part[$CellContext`ccDataShort, 3, 2]], String, FieldSize -> 30, 
          BaseStyle -> {
           Alignment -> Right, NumberPadding -> {"\t", ""}, NumberPoint -> 
            ".", NumberSeparator -> ","}]], 
        InterpretationBox[
         TagBox[
          InputFieldBox[Dynamic[
            Part[$CellContext`ccDataShort, 3, 3]], Number,
           
           BaseStyle->{
            Alignment -> Right, NumberPadding -> {"\t", ""}, NumberPoint -> 
             ".", NumberSeparator -> ","},
           FieldSize->10],
          Short[#, 0.5]& ],
         InputField[
          Dynamic[
           Part[$CellContext`ccDataShort, 3, 3]], Number, FieldSize -> 10, 
          BaseStyle -> {
           Alignment -> Right, NumberPadding -> {"\t", ""}, NumberPoint -> 
            ".", NumberSeparator -> ","}]]},
       {
        InterpretationBox[
         TagBox[
          InputFieldBox[Dynamic[
            Part[$CellContext`ccDataShort, 4, 1]], String,
           
           BaseStyle->{
            Alignment -> Right, NumberPadding -> {"\t", ""}, NumberPoint -> 
             ".", NumberSeparator -> ","},
           FieldSize->10],
          Short[#, 0.5]& ],
         InputField[
          Dynamic[
           Part[$CellContext`ccDataShort, 4, 1]], String, FieldSize -> 10, 
          BaseStyle -> {
           Alignment -> Right, NumberPadding -> {"\t", ""}, NumberPoint -> 
            ".", NumberSeparator -> ","}]], 
        InterpretationBox[
         TagBox[
          InputFieldBox[Dynamic[
            Part[$CellContext`ccDataShort, 4, 2]], String,
           
           BaseStyle->{
            Alignment -> Right, NumberPadding -> {"\t", ""}, NumberPoint -> 
             ".", NumberSeparator -> ","},
           FieldSize->30],
          Short[#, 0.5]& ],
         InputField[
          Dynamic[
           Part[$CellContext`ccDataShort, 4, 2]], String, FieldSize -> 30, 
          BaseStyle -> {
           Alignment -> Right, NumberPadding -> {"\t", ""}, NumberPoint -> 
            ".", NumberSeparator -> ","}]], 
        InterpretationBox[
         TagBox[
          InputFieldBox[Dynamic[
            Part[$CellContext`ccDataShort, 4, 3]], Number,
           
           BaseStyle->{
            Alignment -> Right, NumberPadding -> {"\t", ""}, NumberPoint -> 
             ".", NumberSeparator -> ","},
           FieldSize->10],
          Short[#, 0.5]& ],
         InputField[
          Dynamic[
           Part[$CellContext`ccDataShort, 4, 3]], Number, FieldSize -> 10, 
          BaseStyle -> {
           Alignment -> Right, NumberPadding -> {"\t", ""}, NumberPoint -> 
            ".", NumberSeparator -> ","}]]},
       {
        InterpretationBox[
         TagBox[
          InputFieldBox[Dynamic[
            Part[$CellContext`ccDataShort, 5, 1]], String,
           
           BaseStyle->{
            Alignment -> Right, NumberPadding -> {"\t", ""}, NumberPoint -> 
             ".", NumberSeparator -> ","},
           FieldSize->10],
          Short[#, 0.5]& ],
         InputField[
          Dynamic[
           Part[$CellContext`ccDataShort, 5, 1]], String, FieldSize -> 10, 
          BaseStyle -> {
           Alignment -> Right, NumberPadding -> {"\t", ""}, NumberPoint -> 
            ".", NumberSeparator -> ","}]], 
        InterpretationBox[
         TagBox[
          InputFieldBox[Dynamic[
            Part[$CellContext`ccDataShort, 5, 2]], String,
           
           BaseStyle->{
            Alignment -> Right, NumberPadding -> {"\t", ""}, NumberPoint -> 
             ".", NumberSeparator -> ","},
           FieldSize->30],
          Short[#, 0.5]& ],
         InputField[
          Dynamic[
           Part[$CellContext`ccDataShort, 5, 2]], String, FieldSize -> 30, 
          BaseStyle -> {
           Alignment -> Right, NumberPadding -> {"\t", ""}, NumberPoint -> 
            ".", NumberSeparator -> ","}]], 
        InterpretationBox[
         TagBox[
          InputFieldBox[Dynamic[
            Part[$CellContext`ccDataShort, 5, 3]], Number,
           
           BaseStyle->{
            Alignment -> Right, NumberPadding -> {"\t", ""}, NumberPoint -> 
             ".", NumberSeparator -> ","},
           FieldSize->10],
          Short[#, 0.5]& ],
         InputField[
          Dynamic[
           Part[$CellContext`ccDataShort, 5, 3]], Number, FieldSize -> 10, 
          BaseStyle -> {
           Alignment -> Right, NumberPadding -> {"\t", ""}, NumberPoint -> 
            ".", NumberSeparator -> ","}]]},
       {
        InterpretationBox[
         TagBox[
          InputFieldBox[Dynamic[
            Part[$CellContext`ccDataShort, 6, 1]], String,
           
           BaseStyle->{
            Alignment -> Right, NumberPadding -> {"\t", ""}, NumberPoint -> 
             ".", NumberSeparator -> ","},
           FieldSize->10],
          Short[#, 0.5]& ],
         InputField[
          Dynamic[
           Part[$CellContext`ccDataShort, 6, 1]], String, FieldSize -> 10, 
          BaseStyle -> {
           Alignment -> Right, NumberPadding -> {"\t", ""}, NumberPoint -> 
            ".", NumberSeparator -> ","}]], 
        InterpretationBox[
         TagBox[
          InputFieldBox[Dynamic[
            Part[$CellContext`ccDataShort, 6, 2]], String,
           
           BaseStyle->{
            Alignment -> Right, NumberPadding -> {"\t", ""}, NumberPoint -> 
             ".", NumberSeparator -> ","},
           FieldSize->30],
          Short[#, 0.5]& ],
         InputField[
          Dynamic[
           Part[$CellContext`ccDataShort, 6, 2]], String, FieldSize -> 30, 
          BaseStyle -> {
           Alignment -> Right, NumberPadding -> {"\t", ""}, NumberPoint -> 
            ".", NumberSeparator -> ","}]], 
        InterpretationBox[
         TagBox[
          InputFieldBox[Dynamic[
            Part[$CellContext`ccDataShort, 6, 3]], Number,
           
           BaseStyle->{
            Alignment -> Right, NumberPadding -> {"\t", ""}, NumberPoint -> 
             ".", NumberSeparator -> ","},
           FieldSize->10],
          Short[#, 0.5]& ],
         InputField[
          Dynamic[
           Part[$CellContext`ccDataShort, 6, 3]], Number, FieldSize -> 10, 
          BaseStyle -> {
           Alignment -> Right, NumberPadding -> {"\t", ""}, NumberPoint -> 
            ".", NumberSeparator -> ","}]]},
       {
        InterpretationBox[
         TagBox[
          InputFieldBox[Dynamic[
            Part[$CellContext`ccDataShort, 7, 1]], String,
           
           BaseStyle->{
            Alignment -> Right, NumberPadding -> {"\t", ""}, NumberPoint -> 
             ".", NumberSeparator -> ","},
           FieldSize->10],
          Short[#, 0.5]& ],
         InputField[
          Dynamic[
           Part[$CellContext`ccDataShort, 7, 1]], String, FieldSize -> 10, 
          BaseStyle -> {
           Alignment -> Right, NumberPadding -> {"\t", ""}, NumberPoint -> 
            ".", NumberSeparator -> ","}]], 
        InterpretationBox[
         TagBox[
          InputFieldBox[Dynamic[
            Part[$CellContext`ccDataShort, 7, 2]], String,
           
           BaseStyle->{
            Alignment -> Right, NumberPadding -> {"\t", ""}, NumberPoint -> 
             ".", NumberSeparator -> ","},
           FieldSize->30],
          Short[#, 0.5]& ],
         InputField[
          Dynamic[
           Part[$CellContext`ccDataShort, 7, 2]], String, FieldSize -> 30, 
          BaseStyle -> {
           Alignment -> Right, NumberPadding -> {"\t", ""}, NumberPoint -> 
            ".", NumberSeparator -> ","}]], 
        InterpretationBox[
         TagBox[
          InputFieldBox[Dynamic[
            Part[$CellContext`ccDataShort, 7, 3]], Number,
           
           BaseStyle->{
            Alignment -> Right, NumberPadding -> {"\t", ""}, NumberPoint -> 
             ".", NumberSeparator -> ","},
           FieldSize->10],
          Short[#, 0.5]& ],
         InputField[
          Dynamic[
           Part[$CellContext`ccDataShort, 7, 3]], Number, FieldSize -> 10, 
          BaseStyle -> {
           Alignment -> Right, NumberPadding -> {"\t", ""}, NumberPoint -> 
            ".", NumberSeparator -> ","}]]},
       {
        InterpretationBox[
         TagBox[
          InputFieldBox[Dynamic[
            Part[$CellContext`ccDataShort, 8, 1]], String,
           
           BaseStyle->{
            Alignment -> Right, NumberPadding -> {"\t", ""}, NumberPoint -> 
             ".", NumberSeparator -> ","},
           FieldSize->10],
          Short[#, 0.5]& ],
         InputField[
          Dynamic[
           Part[$CellContext`ccDataShort, 8, 1]], String, FieldSize -> 10, 
          BaseStyle -> {
           Alignment -> Right, NumberPadding -> {"\t", ""}, NumberPoint -> 
            ".", NumberSeparator -> ","}]], 
        InterpretationBox[
         TagBox[
          InputFieldBox[Dynamic[
            Part[$CellContext`ccDataShort, 8, 2]], String,
           
           BaseStyle->{
            Alignment -> Right, NumberPadding -> {"\t", ""}, NumberPoint -> 
             ".", NumberSeparator -> ","},
           FieldSize->30],
          Short[#, 0.5]& ],
         InputField[
          Dynamic[
           Part[$CellContext`ccDataShort, 8, 2]], String, FieldSize -> 30, 
          BaseStyle -> {
           Alignment -> Right, NumberPadding -> {"\t", ""}, NumberPoint -> 
            ".", NumberSeparator -> ","}]], 
        InterpretationBox[
         TagBox[
          InputFieldBox[Dynamic[
            Part[$CellContext`ccDataShort, 8, 3]], Number,
           
           BaseStyle->{
            Alignment -> Right, NumberPadding -> {"\t", ""}, NumberPoint -> 
             ".", NumberSeparator -> ","},
           FieldSize->10],
          Short[#, 0.5]& ],
         InputField[
          Dynamic[
           Part[$CellContext`ccDataShort, 8, 3]], Number, FieldSize -> 10, 
          BaseStyle -> {
           Alignment -> Right, NumberPadding -> {"\t", ""}, NumberPoint -> 
            ".", NumberSeparator -> ","}]]},
       {
        InterpretationBox[
         TagBox[
          InputFieldBox[Dynamic[
            Part[$CellContext`ccDataShort, 9, 1]], String,
           
           BaseStyle->{
            Alignment -> Right, NumberPadding -> {"\t", ""}, NumberPoint -> 
             ".", NumberSeparator -> ","},
           FieldSize->10],
          Short[#, 0.5]& ],
         InputField[
          Dynamic[
           Part[$CellContext`ccDataShort, 9, 1]], String, FieldSize -> 10, 
          BaseStyle -> {
           Alignment -> Right, NumberPadding -> {"\t", ""}, NumberPoint -> 
            ".", NumberSeparator -> ","}]], 
        InterpretationBox[
         TagBox[
          InputFieldBox[Dynamic[
            Part[$CellContext`ccDataShort, 9, 2]], String,
           
           BaseStyle->{
            Alignment -> Right, NumberPadding -> {"\t", ""}, NumberPoint -> 
             ".", NumberSeparator -> ","},
           FieldSize->30],
          Short[#, 0.5]& ],
         InputField[
          Dynamic[
           Part[$CellContext`ccDataShort, 9, 2]], String, FieldSize -> 30, 
          BaseStyle -> {
           Alignment -> Right, NumberPadding -> {"\t", ""}, NumberPoint -> 
            ".", NumberSeparator -> ","}]], 
        InterpretationBox[
         TagBox[
          InputFieldBox[Dynamic[
            Part[$CellContext`ccDataShort, 9, 3]], Number,
           
           BaseStyle->{
            Alignment -> Right, NumberPadding -> {"\t", ""}, NumberPoint -> 
             ".", NumberSeparator -> ","},
           FieldSize->10],
          Short[#, 0.5]& ],
         InputField[
          Dynamic[
           Part[$CellContext`ccDataShort, 9, 3]], Number, FieldSize -> 10, 
          BaseStyle -> {
           Alignment -> Right, NumberPadding -> {"\t", ""}, NumberPoint -> 
            ".", NumberSeparator -> ","}]]},
       {
        InterpretationBox[
         TagBox[
          InputFieldBox[Dynamic[
            Part[$CellContext`ccDataShort, 10, 1]], String,
           
           BaseStyle->{
            Alignment -> Right, NumberPadding -> {"\t", ""}, NumberPoint -> 
             ".", NumberSeparator -> ","},
           FieldSize->10],
          Short[#, 0.5]& ],
         InputField[
          Dynamic[
           Part[$CellContext`ccDataShort, 10, 1]], String, FieldSize -> 10, 
          BaseStyle -> {
           Alignment -> Right, NumberPadding -> {"\t", ""}, NumberPoint -> 
            ".", NumberSeparator -> ","}]], 
        InterpretationBox[
         TagBox[
          InputFieldBox[Dynamic[
            Part[$CellContext`ccDataShort, 10, 2]], String,
           
           BaseStyle->{
            Alignment -> Right, NumberPadding -> {"\t", ""}, NumberPoint -> 
             ".", NumberSeparator -> ","},
           FieldSize->30],
          Short[#, 0.5]& ],
         InputField[
          Dynamic[
           Part[$CellContext`ccDataShort, 10, 2]], String, FieldSize -> 30, 
          BaseStyle -> {
           Alignment -> Right, NumberPadding -> {"\t", ""}, NumberPoint -> 
            ".", NumberSeparator -> ","}]], 
        InterpretationBox[
         TagBox[
          InputFieldBox[Dynamic[
            Part[$CellContext`ccDataShort, 10, 3]], Number,
           
           BaseStyle->{
            Alignment -> Right, NumberPadding -> {"\t", ""}, NumberPoint -> 
             ".", NumberSeparator -> ","},
           FieldSize->10],
          Short[#, 0.5]& ],
         InputField[
          Dynamic[
           Part[$CellContext`ccDataShort, 10, 3]], Number, FieldSize -> 10, 
          BaseStyle -> {
           Alignment -> Right, NumberPadding -> {"\t", ""}, NumberPoint -> 
            ".", NumberSeparator -> ","}]]},
       {
        InterpretationBox[
         TagBox[
          InputFieldBox[Dynamic[
            Part[$CellContext`ccDataShort, 11, 1]], String,
           
           BaseStyle->{
            Alignment -> Right, NumberPadding -> {"\t", ""}, NumberPoint -> 
             ".", NumberSeparator -> ","},
           FieldSize->10],
          Short[#, 0.5]& ],
         InputField[
          Dynamic[
           Part[$CellContext`ccDataShort, 11, 1]], String, FieldSize -> 10, 
          BaseStyle -> {
           Alignment -> Right, NumberPadding -> {"\t", ""}, NumberPoint -> 
            ".", NumberSeparator -> ","}]], 
        InterpretationBox[
         TagBox[
          InputFieldBox[Dynamic[
            Part[$CellContext`ccDataShort, 11, 2]], String,
           
           BaseStyle->{
            Alignment -> Right, NumberPadding -> {"\t", ""}, NumberPoint -> 
             ".", NumberSeparator -> ","},
           FieldSize->30],
          Short[#, 0.5]& ],
         InputField[
          Dynamic[
           Part[$CellContext`ccDataShort, 11, 2]], String, FieldSize -> 30, 
          BaseStyle -> {
           Alignment -> Right, NumberPadding -> {"\t", ""}, NumberPoint -> 
            ".", NumberSeparator -> ","}]], 
        InterpretationBox[
         TagBox[
          InputFieldBox[Dynamic[
            Part[$CellContext`ccDataShort, 11, 3]], Number,
           
           BaseStyle->{
            Alignment -> Right, NumberPadding -> {"\t", ""}, NumberPoint -> 
             ".", NumberSeparator -> ","},
           FieldSize->10],
          Short[#, 0.5]& ],
         InputField[
          Dynamic[
           Part[$CellContext`ccDataShort, 11, 3]], Number, FieldSize -> 10, 
          BaseStyle -> {
           Alignment -> Right, NumberPadding -> {"\t", ""}, NumberPoint -> 
            ".", NumberSeparator -> ","}]]},
       {
        InterpretationBox[
         TagBox[
          InputFieldBox[Dynamic[
            Part[$CellContext`ccDataShort, 12, 1]], String,
           
           BaseStyle->{
            Alignment -> Right, NumberPadding -> {"\t", ""}, NumberPoint -> 
             ".", NumberSeparator -> ","},
           FieldSize->10],
          Short[#, 0.5]& ],
         InputField[
          Dynamic[
           Part[$CellContext`ccDataShort, 12, 1]], String, FieldSize -> 10, 
          BaseStyle -> {
           Alignment -> Right, NumberPadding -> {"\t", ""}, NumberPoint -> 
            ".", NumberSeparator -> ","}]], 
        InterpretationBox[
         TagBox[
          InputFieldBox[Dynamic[
            Part[$CellContext`ccDataShort, 12, 2]], String,
           
           BaseStyle->{
            Alignment -> Right, NumberPadding -> {"\t", ""}, NumberPoint -> 
             ".", NumberSeparator -> ","},
           FieldSize->30],
          Short[#, 0.5]& ],
         InputField[
          Dynamic[
           Part[$CellContext`ccDataShort, 12, 2]], String, FieldSize -> 30, 
          BaseStyle -> {
           Alignment -> Right, NumberPadding -> {"\t", ""}, NumberPoint -> 
            ".", NumberSeparator -> ","}]], 
        InterpretationBox[
         TagBox[
          InputFieldBox[Dynamic[
            Part[$CellContext`ccDataShort, 12, 3]], Number,
           
           BaseStyle->{
            Alignment -> Right, NumberPadding -> {"\t", ""}, NumberPoint -> 
             ".", NumberSeparator -> ","},
           FieldSize->10],
          Short[#, 0.5]& ],
         InputField[
          Dynamic[
           Part[$CellContext`ccDataShort, 12, 3]], Number, FieldSize -> 10, 
          BaseStyle -> {
           Alignment -> Right, NumberPadding -> {"\t", ""}, NumberPoint -> 
            ".", NumberSeparator -> ","}]]},
       {
        InterpretationBox[
         TagBox[
          InputFieldBox[Dynamic[
            Part[$CellContext`ccDataShort, 13, 1]], String,
           
           BaseStyle->{
            Alignment -> Right, NumberPadding -> {"\t", ""}, NumberPoint -> 
             ".", NumberSeparator -> ","},
           FieldSize->10],
          Short[#, 0.5]& ],
         InputField[
          Dynamic[
           Part[$CellContext`ccDataShort, 13, 1]], String, FieldSize -> 10, 
          BaseStyle -> {
           Alignment -> Right, NumberPadding -> {"\t", ""}, NumberPoint -> 
            ".", NumberSeparator -> ","}]], 
        InterpretationBox[
         TagBox[
          InputFieldBox[Dynamic[
            Part[$CellContext`ccDataShort, 13, 2]], String,
           
           BaseStyle->{
            Alignment -> Right, NumberPadding -> {"\t", ""}, NumberPoint -> 
             ".", NumberSeparator -> ","},
           FieldSize->30],
          Short[#, 0.5]& ],
         InputField[
          Dynamic[
           Part[$CellContext`ccDataShort, 13, 2]], String, FieldSize -> 30, 
          BaseStyle -> {
           Alignment -> Right, NumberPadding -> {"\t", ""}, NumberPoint -> 
            ".", NumberSeparator -> ","}]], 
        InterpretationBox[
         TagBox[
          InputFieldBox[Dynamic[
            Part[$CellContext`ccDataShort, 13, 3]], Number,
           
           BaseStyle->{
            Alignment -> Right, NumberPadding -> {"\t", ""}, NumberPoint -> 
             ".", NumberSeparator -> ","},
           FieldSize->10],
          Short[#, 0.5]& ],
         InputField[
          Dynamic[
           Part[$CellContext`ccDataShort, 13, 3]], Number, FieldSize -> 10, 
          BaseStyle -> {
           Alignment -> Right, NumberPadding -> {"\t", ""}, NumberPoint -> 
            ".", NumberSeparator -> ","}]]},
       {
        InterpretationBox[
         TagBox[
          InputFieldBox[Dynamic[
            Part[$CellContext`ccDataShort, 14, 1]], String,
           
           BaseStyle->{
            Alignment -> Right, NumberPadding -> {"\t", ""}, NumberPoint -> 
             ".", NumberSeparator -> ","},
           FieldSize->10],
          Short[#, 0.5]& ],
         InputField[
          Dynamic[
           Part[$CellContext`ccDataShort, 14, 1]], String, FieldSize -> 10, 
          BaseStyle -> {
           Alignment -> Right, NumberPadding -> {"\t", ""}, NumberPoint -> 
            ".", NumberSeparator -> ","}]], 
        InterpretationBox[
         TagBox[
          InputFieldBox[Dynamic[
            Part[$CellContext`ccDataShort, 14, 2]], String,
           
           BaseStyle->{
            Alignment -> Right, NumberPadding -> {"\t", ""}, NumberPoint -> 
             ".", NumberSeparator -> ","},
           FieldSize->30],
          Short[#, 0.5]& ],
         InputField[
          Dynamic[
           Part[$CellContext`ccDataShort, 14, 2]], String, FieldSize -> 30, 
          BaseStyle -> {
           Alignment -> Right, NumberPadding -> {"\t", ""}, NumberPoint -> 
            ".", NumberSeparator -> ","}]], 
        InterpretationBox[
         TagBox[
          InputFieldBox[Dynamic[
            Part[$CellContext`ccDataShort, 14, 3]], Number,
           
           BaseStyle->{
            Alignment -> Right, NumberPadding -> {"\t", ""}, NumberPoint -> 
             ".", NumberSeparator -> ","},
           FieldSize->10],
          Short[#, 0.5]& ],
         InputField[
          Dynamic[
           Part[$CellContext`ccDataShort, 14, 3]], Number, FieldSize -> 10, 
          BaseStyle -> {
           Alignment -> Right, NumberPadding -> {"\t", ""}, NumberPoint -> 
            ".", NumberSeparator -> ","}]]},
       {
        InterpretationBox[
         TagBox[
          InputFieldBox[Dynamic[
            Part[$CellContext`ccDataShort, 15, 1]], String,
           
           BaseStyle->{
            Alignment -> Right, NumberPadding -> {"\t", ""}, NumberPoint -> 
             ".", NumberSeparator -> ","},
           FieldSize->10],
          Short[#, 0.5]& ],
         InputField[
          Dynamic[
           Part[$CellContext`ccDataShort, 15, 1]], String, FieldSize -> 10, 
          BaseStyle -> {
           Alignment -> Right, NumberPadding -> {"\t", ""}, NumberPoint -> 
            ".", NumberSeparator -> ","}]], 
        InterpretationBox[
         TagBox[
          InputFieldBox[Dynamic[
            Part[$CellContext`ccDataShort, 15, 2]], String,
           
           BaseStyle->{
            Alignment -> Right, NumberPadding -> {"\t", ""}, NumberPoint -> 
             ".", NumberSeparator -> ","},
           FieldSize->30],
          Short[#, 0.5]& ],
         InputField[
          Dynamic[
           Part[$CellContext`ccDataShort, 15, 2]], String, FieldSize -> 30, 
          BaseStyle -> {
           Alignment -> Right, NumberPadding -> {"\t", ""}, NumberPoint -> 
            ".", NumberSeparator -> ","}]], 
        InterpretationBox[
         TagBox[
          InputFieldBox[Dynamic[
            Part[$CellContext`ccDataShort, 15, 3]], Number,
           
           BaseStyle->{
            Alignment -> Right, NumberPadding -> {"\t", ""}, NumberPoint -> 
             ".", NumberSeparator -> ","},
           FieldSize->10],
          Short[#, 0.5]& ],
         InputField[
          Dynamic[
           Part[$CellContext`ccDataShort, 15, 3]], Number, FieldSize -> 10, 
          BaseStyle -> {
           Alignment -> Right, NumberPadding -> {"\t", ""}, NumberPoint -> 
            ".", NumberSeparator -> ","}]]},
       {
        InterpretationBox[
         TagBox[
          InputFieldBox[Dynamic[
            Part[$CellContext`ccDataShort, 16, 1]], String,
           
           BaseStyle->{
            Alignment -> Right, NumberPadding -> {"\t", ""}, NumberPoint -> 
             ".", NumberSeparator -> ","},
           FieldSize->10],
          Short[#, 0.5]& ],
         InputField[
          Dynamic[
           Part[$CellContext`ccDataShort, 16, 1]], String, FieldSize -> 10, 
          BaseStyle -> {
           Alignment -> Right, NumberPadding -> {"\t", ""}, NumberPoint -> 
            ".", NumberSeparator -> ","}]], 
        InterpretationBox[
         TagBox[
          InputFieldBox[Dynamic[
            Part[$CellContext`ccDataShort, 16, 2]], String,
           
           BaseStyle->{
            Alignment -> Right, NumberPadding -> {"\t", ""}, NumberPoint -> 
             ".", NumberSeparator -> ","},
           FieldSize->30],
          Short[#, 0.5]& ],
         InputField[
          Dynamic[
           Part[$CellContext`ccDataShort, 16, 2]], String, FieldSize -> 30, 
          BaseStyle -> {
           Alignment -> Right, NumberPadding -> {"\t", ""}, NumberPoint -> 
            ".", NumberSeparator -> ","}]], 
        InterpretationBox[
         TagBox[
          InputFieldBox[Dynamic[
            Part[$CellContext`ccDataShort, 16, 3]], Number,
           
           BaseStyle->{
            Alignment -> Right, NumberPadding -> {"\t", ""}, NumberPoint -> 
             ".", NumberSeparator -> ","},
           FieldSize->10],
          Short[#, 0.5]& ],
         InputField[
          Dynamic[
           Part[$CellContext`ccDataShort, 16, 3]], Number, FieldSize -> 10, 
          BaseStyle -> {
           Alignment -> Right, NumberPadding -> {"\t", ""}, NumberPoint -> 
            ".", NumberSeparator -> ","}]]},
       {
        ItemBox[
         UnderscriptBox["\[VerticalEllipsis]", 
          StyleBox["4",
           LineColor->GrayLevel[0.5],
           FrontFaceColor->GrayLevel[0.5],
           BackFaceColor->GrayLevel[0.5],
           GraphicsColor->GrayLevel[0.5],
           FontColor->GrayLevel[0.5]]],
         Alignment->{Center, Bottom},
         Background->RGBColor[0.985, 0.98, 0.973]], "\[SpanFromLeft]", 
        "\[SpanFromLeft]"},
       {
        ItemBox[
         RowBox[{
          RowBox[{"2", " ", "levels"}], 
          AdjustmentBox[
           RowBox[{" ", 
            RowBox[{"|", " "}]}],
           BoxBaselineShift->-0.3], 
          RowBox[{"20", "elements"}], 
          AdjustmentBox[
           RowBox[{" ", 
            RowBox[{"|", " "}]}],
           BoxBaselineShift->-0.3], 
          RowBox[{"60", 
           RowBox[{"elements", " ", "total"}]}]}],
         Alignment->{Left, Center},
         Background->RGBColor[0.92, 0.92, 0.9],
         BaseStyle->{
          FontFamily -> "Helvetica", FontSize -> 10, FontColor -> 
           GrayLevel[0.4], Editable -> False, Selectable -> False},
         ItemSize->{Automatic, Automatic}], "\[SpanFromLeft]", 
        "\[SpanFromLeft]"}
      },
      FrameStyle->RGBColor[0, 0, 0, 0.4],
      GridBoxAlignment->{"Columns" -> {{Left}}},
      GridBoxBackground->{"Columns" -> {}, "Rows" -> {
          RGBColor[0.92, 0.92, 0.9]}},
      GridBoxDividers->{"Columns" -> {
          RGBColor[0, 0, 0, 0.4], {
           RGBColor[0, 0, 0, 0.09]}, 
          RGBColor[0, 0, 0, 0.4]}, "Rows" -> {
          RGBColor[0, 0, 0, 0.4], 
          RGBColor[0, 0, 0, 0.3], {
           RGBColor[0, 0, 0, 0.08]}, 
          RGBColor[0, 0, 0, 0.4]}},
      GridBoxFrame->{"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> True}},
      GridBoxItemSize->{
       "Columns" -> {{All}}, "ColumnsIndexed" -> {}, "Rows" -> {{1.3}}, 
        "RowsIndexed" -> {}},
      GridBoxSpacings->{"Columns" -> {
          Offset[1.4], {
           Offset[1.75]}, 
          Offset[4.199999999999999]}, "ColumnsIndexed" -> {}, "Rows" -> {
          Offset[1.2], 
          Offset[0.6], {
           Offset[0.48]}, 
          Offset[0.4]}, "RowsIndexed" -> {}}], True->GridBox[{
       {
        RowBox[{"{", 
         StyleBox[
          SubscriptBox["\[CenterEllipsis]", "20"],
          LineColor->GrayLevel[0.5],
          FrontFaceColor->GrayLevel[0.5],
          BackFaceColor->GrayLevel[0.5],
          GraphicsColor->GrayLevel[0.5],
          FontColor->GrayLevel[0.5]], "}"}]},
       {
        ItemBox[
         RowBox[{
          RowBox[{"2", " ", "levels"}], 
          AdjustmentBox[
           RowBox[{" ", 
            RowBox[{"|", " "}]}],
           BoxBaselineShift->-0.3], 
          RowBox[{"20", "elements"}], 
          AdjustmentBox[
           RowBox[{" ", 
            RowBox[{"|", " "}]}],
           BoxBaselineShift->-0.3], 
          RowBox[{"60", 
           RowBox[{"elements", " ", "total"}]}]}],
         Alignment->{Left, Center},
         Background->RGBColor[0.92, 0.92, 0.9],
         BaseStyle->{
          FontFamily -> "Helvetica", FontSize -> 10, FontColor -> 
           GrayLevel[0.4], Editable -> False, Selectable -> False},
         ItemSize->{Automatic, Automatic}]}
      },
      FrameStyle->RGBColor[0, 0, 0, 0.4],
      GridBoxAlignment->{"Columns" -> {Left}},
      GridBoxFrame->{"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> True}},
      GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
      GridBoxSpacings->{"Columns" -> {
          Offset[1.4], {
           Offset[0.5599999999999999]}, 
          Offset[0.7]}, "ColumnsIndexed" -> {}, "Rows" -> {
          Offset[0.8], {
           Offset[0.4]}, 
          Offset[0.]}, "RowsIndexed" -> {}}]}, Dynamic[
      CurrentValue[Evaluatable]],
     BaselinePosition->Baseline,
     ImageSize->Automatic],
    Editable->False,
    Selectable->True,
    ShowAutoStyles->False,
    LineSpacing->{1.1, 5},
    NumberMarks->False,
    SpanMinSize->1.,
    SpanMaxSize->3,
    LineBreakWithin->False,
    LineIndent->0,
    LinebreakAdjustments->{0.4, 5, 100, 0, 0.5},
    FontFamily->"Helvetica Neue",
    FontWeight->"Light",
    Background->RGBColor[0.985, 0.98, 0.973]],
   Deploy],
  Dataset[{
    Association["date" -> InputField[
       Dynamic[
        Part[ccDataShort, 1, 1]], String, FieldSize -> 10, 
       BaseStyle -> {
        Alignment -> Right, NumberPadding -> {"\t", ""}, NumberPoint -> ".", 
         NumberSeparator -> ","}], "description" -> InputField[
       Dynamic[
        Part[ccDataShort, 1, 2]], String, FieldSize -> 30, 
       BaseStyle -> {
        Alignment -> Right, NumberPadding -> {"\t", ""}, NumberPoint -> ".", 
         NumberSeparator -> ","}], "value" -> InputField[
       Dynamic[
        Part[ccDataShort, 1, 3]], Number, FieldSize -> 10, 
       BaseStyle -> {
        Alignment -> Right, NumberPadding -> {"\t", ""}, NumberPoint -> ".", 
         NumberSeparator -> ","}]], 
    Association["date" -> InputField[
       Dynamic[
        Part[ccDataShort, 2, 1]], String, FieldSize -> 10, 
       BaseStyle -> {
        Alignment -> Right, NumberPadding -> {"\t", ""}, NumberPoint -> ".", 
         NumberSeparator -> ","}], "description" -> InputField[
       Dynamic[
        Part[ccDataShort, 2, 2]], String, FieldSize -> 30, 
       BaseStyle -> {
        Alignment -> Right, NumberPadding -> {"\t", ""}, NumberPoint -> ".", 
         NumberSeparator -> ","}], "value" -> InputField[
       Dynamic[
        Part[ccDataShort, 2, 3]], Number, FieldSize -> 10, 
       BaseStyle -> {
        Alignment -> Right, NumberPadding -> {"\t", ""}, NumberPoint -> ".", 
         NumberSeparator -> ","}]], 
    Association["date" -> InputField[
       Dynamic[
        Part[ccDataShort, 3, 1]], String, FieldSize -> 10, 
       BaseStyle -> {
        Alignment -> Right, NumberPadding -> {"\t", ""}, NumberPoint -> ".", 
         NumberSeparator -> ","}], "description" -> InputField[
       Dynamic[
        Part[ccDataShort, 3, 2]], String, FieldSize -> 30, 
       BaseStyle -> {
        Alignment -> Right, NumberPadding -> {"\t", ""}, NumberPoint -> ".", 
         NumberSeparator -> ","}], "value" -> InputField[
       Dynamic[
        Part[ccDataShort, 3, 3]], Number, FieldSize -> 10, 
       BaseStyle -> {
        Alignment -> Right, NumberPadding -> {"\t", ""}, NumberPoint -> ".", 
         NumberSeparator -> ","}]], 
    Association["date" -> InputField[
       Dynamic[
        Part[ccDataShort, 4, 1]], String, FieldSize -> 10, 
       BaseStyle -> {
        Alignment -> Right, NumberPadding -> {"\t", ""}, NumberPoint -> ".", 
         NumberSeparator -> ","}], "description" -> InputField[
       Dynamic[
        Part[ccDataShort, 4, 2]], String, FieldSize -> 30, 
       BaseStyle -> {
        Alignment -> Right, NumberPadding -> {"\t", ""}, NumberPoint -> ".", 
         NumberSeparator -> ","}], "value" -> InputField[
       Dynamic[
        Part[ccDataShort, 4, 3]], Number, FieldSize -> 10, 
       BaseStyle -> {
        Alignment -> Right, NumberPadding -> {"\t", ""}, NumberPoint -> ".", 
         NumberSeparator -> ","}]], 
    Association["date" -> InputField[
       Dynamic[
        Part[ccDataShort, 5, 1]], String, FieldSize -> 10, 
       BaseStyle -> {
        Alignment -> Right, NumberPadding -> {"\t", ""}, NumberPoint -> ".", 
         NumberSeparator -> ","}], "description" -> InputField[
       Dynamic[
        Part[ccDataShort, 5, 2]], String, FieldSize -> 30, 
       BaseStyle -> {
        Alignment -> Right, NumberPadding -> {"\t", ""}, NumberPoint -> ".", 
         NumberSeparator -> ","}], "value" -> InputField[
       Dynamic[
        Part[ccDataShort, 5, 3]], Number, FieldSize -> 10, 
       BaseStyle -> {
        Alignment -> Right, NumberPadding -> {"\t", ""}, NumberPoint -> ".", 
         NumberSeparator -> ","}]], 
    Association["date" -> InputField[
       Dynamic[
        Part[ccDataShort, 6, 1]], String, FieldSize -> 10, 
       BaseStyle -> {
        Alignment -> Right, NumberPadding -> {"\t", ""}, NumberPoint -> ".", 
         NumberSeparator -> ","}], "description" -> InputField[
       Dynamic[
        Part[ccDataShort, 6, 2]], String, FieldSize -> 30, 
       BaseStyle -> {
        Alignment -> Right, NumberPadding -> {"\t", ""}, NumberPoint -> ".", 
         NumberSeparator -> ","}], "value" -> InputField[
       Dynamic[
        Part[ccDataShort, 6, 3]], Number, FieldSize -> 10, 
       BaseStyle -> {
        Alignment -> Right, NumberPadding -> {"\t", ""}, NumberPoint -> ".", 
         NumberSeparator -> ","}]], 
    Association["date" -> InputField[
       Dynamic[
        Part[ccDataShort, 7, 1]], String, FieldSize -> 10, 
       BaseStyle -> {
        Alignment -> Right, NumberPadding -> {"\t", ""}, NumberPoint -> ".", 
         NumberSeparator -> ","}], "description" -> InputField[
       Dynamic[
        Part[ccDataShort, 7, 2]], String, FieldSize -> 30, 
       BaseStyle -> {
        Alignment -> Right, NumberPadding -> {"\t", ""}, NumberPoint -> ".", 
         NumberSeparator -> ","}], "value" -> InputField[
       Dynamic[
        Part[ccDataShort, 7, 3]], Number, FieldSize -> 10, 
       BaseStyle -> {
        Alignment -> Right, NumberPadding -> {"\t", ""}, NumberPoint -> ".", 
         NumberSeparator -> ","}]], 
    Association["date" -> InputField[
       Dynamic[
        Part[ccDataShort, 8, 1]], String, FieldSize -> 10, 
       BaseStyle -> {
        Alignment -> Right, NumberPadding -> {"\t", ""}, NumberPoint -> ".", 
         NumberSeparator -> ","}], "description" -> InputField[
       Dynamic[
        Part[ccDataShort, 8, 2]], String, FieldSize -> 30, 
       BaseStyle -> {
        Alignment -> Right, NumberPadding -> {"\t", ""}, NumberPoint -> ".", 
         NumberSeparator -> ","}], "value" -> InputField[
       Dynamic[
        Part[ccDataShort, 8, 3]], Number, FieldSize -> 10, 
       BaseStyle -> {
        Alignment -> Right, NumberPadding -> {"\t", ""}, NumberPoint -> ".", 
         NumberSeparator -> ","}]], 
    Association["date" -> InputField[
       Dynamic[
        Part[ccDataShort, 9, 1]], String, FieldSize -> 10, 
       BaseStyle -> {
        Alignment -> Right, NumberPadding -> {"\t", ""}, NumberPoint -> ".", 
         NumberSeparator -> ","}], "description" -> InputField[
       Dynamic[
        Part[ccDataShort, 9, 2]], String, FieldSize -> 30, 
       BaseStyle -> {
        Alignment -> Right, NumberPadding -> {"\t", ""}, NumberPoint -> ".", 
         NumberSeparator -> ","}], "value" -> InputField[
       Dynamic[
        Part[ccDataShort, 9, 3]], Number, FieldSize -> 10, 
       BaseStyle -> {
        Alignment -> Right, NumberPadding -> {"\t", ""}, NumberPoint -> ".", 
         NumberSeparator -> ","}]], 
    Association["date" -> InputField[
       Dynamic[
        Part[ccDataShort, 10, 1]], String, FieldSize -> 10, 
       BaseStyle -> {
        Alignment -> Right, NumberPadding -> {"\t", ""}, NumberPoint -> ".", 
         NumberSeparator -> ","}], "description" -> InputField[
       Dynamic[
        Part[ccDataShort, 10, 2]], String, FieldSize -> 30, 
       BaseStyle -> {
        Alignment -> Right, NumberPadding -> {"\t", ""}, NumberPoint -> ".", 
         NumberSeparator -> ","}], "value" -> InputField[
       Dynamic[
        Part[ccDataShort, 10, 3]], Number, FieldSize -> 10, 
       BaseStyle -> {
        Alignment -> Right, NumberPadding -> {"\t", ""}, NumberPoint -> ".", 
         NumberSeparator -> ","}]], 
    Association["date" -> InputField[
       Dynamic[
        Part[ccDataShort, 11, 1]], String, FieldSize -> 10, 
       BaseStyle -> {
        Alignment -> Right, NumberPadding -> {"\t", ""}, NumberPoint -> ".", 
         NumberSeparator -> ","}], "description" -> InputField[
       Dynamic[
        Part[ccDataShort, 11, 2]], String, FieldSize -> 30, 
       BaseStyle -> {
        Alignment -> Right, NumberPadding -> {"\t", ""}, NumberPoint -> ".", 
         NumberSeparator -> ","}], "value" -> InputField[
       Dynamic[
        Part[ccDataShort, 11, 3]], Number, FieldSize -> 10, 
       BaseStyle -> {
        Alignment -> Right, NumberPadding -> {"\t", ""}, NumberPoint -> ".", 
         NumberSeparator -> ","}]], 
    Association["date" -> InputField[
       Dynamic[
        Part[ccDataShort, 12, 1]], String, FieldSize -> 10, 
       BaseStyle -> {
        Alignment -> Right, NumberPadding -> {"\t", ""}, NumberPoint -> ".", 
         NumberSeparator -> ","}], "description" -> InputField[
       Dynamic[
        Part[ccDataShort, 12, 2]], String, FieldSize -> 30, 
       BaseStyle -> {
        Alignment -> Right, NumberPadding -> {"\t", ""}, NumberPoint -> ".", 
         NumberSeparator -> ","}], "value" -> InputField[
       Dynamic[
        Part[ccDataShort, 12, 3]], Number, FieldSize -> 10, 
       BaseStyle -> {
        Alignment -> Right, NumberPadding -> {"\t", ""}, NumberPoint -> ".", 
         NumberSeparator -> ","}]], 
    Association["date" -> InputField[
       Dynamic[
        Part[ccDataShort, 13, 1]], String, FieldSize -> 10, 
       BaseStyle -> {
        Alignment -> Right, NumberPadding -> {"\t", ""}, NumberPoint -> ".", 
         NumberSeparator -> ","}], "description" -> InputField[
       Dynamic[
        Part[ccDataShort, 13, 2]], String, FieldSize -> 30, 
       BaseStyle -> {
        Alignment -> Right, NumberPadding -> {"\t", ""}, NumberPoint -> ".", 
         NumberSeparator -> ","}], "value" -> InputField[
       Dynamic[
        Part[ccDataShort, 13, 3]], Number, FieldSize -> 10, 
       BaseStyle -> {
        Alignment -> Right, NumberPadding -> {"\t", ""}, NumberPoint -> ".", 
         NumberSeparator -> ","}]], 
    Association["date" -> InputField[
       Dynamic[
        Part[ccDataShort, 14, 1]], String, FieldSize -> 10, 
       BaseStyle -> {
        Alignment -> Right, NumberPadding -> {"\t", ""}, NumberPoint -> ".", 
         NumberSeparator -> ","}], "description" -> InputField[
       Dynamic[
        Part[ccDataShort, 14, 2]], String, FieldSize -> 30, 
       BaseStyle -> {
        Alignment -> Right, NumberPadding -> {"\t", ""}, NumberPoint -> ".", 
         NumberSeparator -> ","}], "value" -> InputField[
       Dynamic[
        Part[ccDataShort, 14, 3]], Number, FieldSize -> 10, 
       BaseStyle -> {
        Alignment -> Right, NumberPadding -> {"\t", ""}, NumberPoint -> ".", 
         NumberSeparator -> ","}]], 
    Association["date" -> InputField[
       Dynamic[
        Part[ccDataShort, 15, 1]], String, FieldSize -> 10, 
       BaseStyle -> {
        Alignment -> Right, NumberPadding -> {"\t", ""}, NumberPoint -> ".", 
         NumberSeparator -> ","}], "description" -> InputField[
       Dynamic[
        Part[ccDataShort, 15, 2]], String, FieldSize -> 30, 
       BaseStyle -> {
        Alignment -> Right, NumberPadding -> {"\t", ""}, NumberPoint -> ".", 
         NumberSeparator -> ","}], "value" -> InputField[
       Dynamic[
        Part[ccDataShort, 15, 3]], Number, FieldSize -> 10, 
       BaseStyle -> {
        Alignment -> Right, NumberPadding -> {"\t", ""}, NumberPoint -> ".", 
         NumberSeparator -> ","}]], 
    Association["date" -> InputField[
       Dynamic[
        Part[ccDataShort, 16, 1]], String, FieldSize -> 10, 
       BaseStyle -> {
        Alignment -> Right, NumberPadding -> {"\t", ""}, NumberPoint -> ".", 
         NumberSeparator -> ","}], "description" -> InputField[
       Dynamic[
        Part[ccDataShort, 16, 2]], String, FieldSize -> 30, 
       BaseStyle -> {
        Alignment -> Right, NumberPadding -> {"\t", ""}, NumberPoint -> ".", 
         NumberSeparator -> ","}], "value" -> InputField[
       Dynamic[
        Part[ccDataShort, 16, 3]], Number, FieldSize -> 10, 
       BaseStyle -> {
        Alignment -> Right, NumberPadding -> {"\t", ""}, NumberPoint -> ".", 
         NumberSeparator -> ","}]], 
    Association["date" -> InputField[
       Dynamic[
        Part[ccDataShort, 17, 1]], String, FieldSize -> 10, 
       BaseStyle -> {
        Alignment -> Right, NumberPadding -> {"\t", ""}, NumberPoint -> ".", 
         NumberSeparator -> ","}], "description" -> InputField[
       Dynamic[
        Part[ccDataShort, 17, 2]], String, FieldSize -> 30, 
       BaseStyle -> {
        Alignment -> Right, NumberPadding -> {"\t", ""}, NumberPoint -> ".", 
         NumberSeparator -> ","}], "value" -> InputField[
       Dynamic[
        Part[ccDataShort, 17, 3]], Number, FieldSize -> 10, 
       BaseStyle -> {
        Alignment -> Right, NumberPadding -> {"\t", ""}, NumberPoint -> ".", 
         NumberSeparator -> ","}]], 
    Association["date" -> InputField[
       Dynamic[
        Part[ccDataShort, 18, 1]], String, FieldSize -> 10, 
       BaseStyle -> {
        Alignment -> Right, NumberPadding -> {"\t", ""}, NumberPoint -> ".", 
         NumberSeparator -> ","}], "description" -> InputField[
       Dynamic[
        Part[ccDataShort, 18, 2]], String, FieldSize -> 30, 
       BaseStyle -> {
        Alignment -> Right, NumberPadding -> {"\t", ""}, NumberPoint -> ".", 
         NumberSeparator -> ","}], "value" -> InputField[
       Dynamic[
        Part[ccDataShort, 18, 3]], Number, FieldSize -> 10, 
       BaseStyle -> {
        Alignment -> Right, NumberPadding -> {"\t", ""}, NumberPoint -> ".", 
         NumberSeparator -> ","}]], 
    Association["date" -> InputField[
       Dynamic[
        Part[ccDataShort, 19, 1]], String, FieldSize -> 10, 
       BaseStyle -> {
        Alignment -> Right, NumberPadding -> {"\t", ""}, NumberPoint -> ".", 
         NumberSeparator -> ","}], "description" -> InputField[
       Dynamic[
        Part[ccDataShort, 19, 2]], String, FieldSize -> 30, 
       BaseStyle -> {
        Alignment -> Right, NumberPadding -> {"\t", ""}, NumberPoint -> ".", 
         NumberSeparator -> ","}], "value" -> InputField[
       Dynamic[
        Part[ccDataShort, 19, 3]], Number, FieldSize -> 10, 
       BaseStyle -> {
        Alignment -> Right, NumberPadding -> {"\t", ""}, NumberPoint -> ".", 
         NumberSeparator -> ","}]], 
    Association["date" -> InputField[
       Dynamic[
        Part[ccDataShort, 20, 1]], String, FieldSize -> 10, 
       BaseStyle -> {
        Alignment -> Right, NumberPadding -> {"\t", ""}, NumberPoint -> ".", 
         NumberSeparator -> ","}], "description" -> InputField[
       Dynamic[
        Part[ccDataShort, 20, 2]], String, FieldSize -> 30, 
       BaseStyle -> {
        Alignment -> Right, NumberPadding -> {"\t", ""}, NumberPoint -> ".", 
         NumberSeparator -> ","}], "value" -> InputField[
       Dynamic[
        Part[ccDataShort, 20, 3]], Number, FieldSize -> 10, 
       BaseStyle -> {
        Alignment -> Right, NumberPadding -> {"\t", ""}, NumberPoint -> ".", 
         NumberSeparator -> ","}]]}, 
   TypeSystem`Vector[
    TypeSystem`Struct[{"date", "description", "value"}, {
     TypeSystem`AnyType, TypeSystem`AnyType, TypeSystem`AnyType}], 20], 
   Association["ID" -> 26220833274800]]]], "Output",
 CellTags->{"tofix", "todo"}]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Tests to resolve formatting issue", "Subsubsection"],

Cell["\<\
Yet more issues arise with large numbers.  The following produces an \
un-editable number in the input field (though it is possible to delete the \
number and replace it with another):\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Column", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"InputField", "[", 
      RowBox[{"\"\<name\>\"", ",", "String"}], "]"}], ",", 
     RowBox[{"InputField", "[", 
      RowBox[{
       RowBox[{"-", "30000001.12"}], ",", "Number"}], "]"}]}], "}"}], ",", 
   RowBox[{"BaseStyle", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"SignPadding", "\[Rule]", "True"}], ",", 
      RowBox[{"Alignment", "\[Rule]", "Center"}], ",", 
      RowBox[{"NumberPadding", "\[Rule]", 
       RowBox[{"{", 
        RowBox[{"\"\<\\t\>\"", ",", "\"\< \>\""}], "}"}]}], ",", 
      RowBox[{"NumberPoint", "\[Rule]", "\"\<,\>\""}], ",", 
      RowBox[{"NumberSeparator", "\[Rule]", "\"\< \>\""}]}], "}"}]}]}], 
  "]"}]], "Input"],

Cell[BoxData[
 TagBox[GridBox[{
    {
     TagBox[
      DynamicModuleBox[{Typeset`i$$ = "name"}, 
       InputFieldBox[Dynamic[Typeset`i$$], String],
       DynamicModuleValues:>{}],
      InputField[
       Setting[#], String]& ]},
    {
     TagBox[
      DynamicModuleBox[{Typeset`i$$ = -3.000000112*^7}, 
       InputFieldBox[Dynamic[Typeset`i$$], Number],
       DynamicModuleValues:>{}],
      InputField[
       Setting[#], Number]& ]}
   },
   BaseStyle->{
    SignPadding -> True, Alignment -> Center, NumberPadding -> {"\t", " "}, 
     NumberPoint -> ",", NumberSeparator -> " "},
   DefaultBaseStyle->"Column",
   GridBoxAlignment->{"Columns" -> {{Left}}},
   GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
  "Column"]], "Output"]
}, Open  ]],

Cell["The same issue arises here:", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Column", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"InputField", "[", 
      RowBox[{"\"\<name\>\"", ",", "String"}], "]"}], ",", 
     RowBox[{"InputField", "[", 
      RowBox[{
       RowBox[{"-", "30001.12"}], ",", "Number"}], "]"}]}], "}"}], ",", 
   RowBox[{"BaseStyle", "\[Rule]", 
    RowBox[{"{", "\"\<ControlStyle\>\"", "}"}]}]}], "]"}]], "Input"],

Cell[BoxData[
 TagBox[GridBox[{
    {
     TagBox[
      DynamicModuleBox[{Typeset`i$$ = "name"}, 
       InputFieldBox[Dynamic[Typeset`i$$], String],
       DynamicModuleValues:>{}],
      InputField[
       Setting[#], String]& ]},
    {
     TagBox[
      DynamicModuleBox[{Typeset`i$$ = -3.000000112*^7}, 
       InputFieldBox[Dynamic[Typeset`i$$], Number],
       DynamicModuleValues:>{}],
      InputField[
       Setting[#], Number]& ]}
   },
   BaseStyle->{"ControlStyle"},
   DefaultBaseStyle->"Column",
   GridBoxAlignment->{"Columns" -> {{Left}}},
   GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
  "Column"]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"InputField", "[", 
  RowBox[{
   RowBox[{"-", "30000001.12"}], ",", "Number"}], "]"}]], "Input"],

Cell[BoxData[
 TagBox[
  DynamicModuleBox[{Typeset`i$$ = -3.000000112*^7}, 
   InputFieldBox[Dynamic[Typeset`i$$], Number],
   DynamicModuleValues:>{}],
  InputField[
   Setting[#], Number]& ]], "Output"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["(Re)numbering", "Subsubsection"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"Clear", "[", "numberedData", "]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"numberedData", "=", 
   RowBox[{
    RowBox[{
     RowBox[{"AssociationThread", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
        "\"\<date\>\"", ",", "\"\<description\>\"", ",", "\"\<value\>\""}], 
        "}"}], "\[Rule]", "#"}], "]"}], "&"}], "/@", "ccDataShort"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"Dynamic", "[", "numberedData", "]"}], "//", 
  "autoNumber"}], "\[IndentingNewLine]", 
 RowBox[{"Dynamic", "[", 
  RowBox[{"numberedData", "//", "Dataset"}], "]"}]}], "Input",
 InitializationCell->True],

Cell[BoxData[
 DynamicBox[ToBoxes[
   Dataset[$CellContext`numberedData], StandardForm],
  ImageSizeCache->{754., {334., 344.}}]], "Output"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Searching and summarising", "Subsubsection"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"dataShort", "=", 
  RowBox[{"Dataset", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"AssociationThread", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"\"\<date\>\"", ",", "\"\<desc\>\"", ",", "\"\<value\>\""}], 
        "}"}], "\[Rule]", "#"}], "]"}], "&"}], "/@", "ccDataShort"}], 
   "]"}]}]], "Input",
 InitializationCell->True],

Cell[BoxData[
 InterpretationBox[
  TagBox[
   StyleBox[
    PaneSelectorBox[{False->GridBox[{
       {
        StyleBox["\<\"date\"\>",
         LineColor->GrayLevel[0.3],
         FrontFaceColor->GrayLevel[0.3],
         BackFaceColor->GrayLevel[0.3],
         GraphicsColor->GrayLevel[0.3],
         FontColor->GrayLevel[0.3]], 
        StyleBox["\<\"desc\"\>",
         LineColor->GrayLevel[0.3],
         FrontFaceColor->GrayLevel[0.3],
         BackFaceColor->GrayLevel[0.3],
         GraphicsColor->GrayLevel[0.3],
         FontColor->GrayLevel[0.3]], 
        StyleBox["\<\"value\"\>",
         LineColor->GrayLevel[0.3],
         FrontFaceColor->GrayLevel[0.3],
         BackFaceColor->GrayLevel[0.3],
         GraphicsColor->GrayLevel[0.3],
         FontColor->GrayLevel[0.3]]},
       {
        StyleBox["\<\"29/04/2013\"\>",
         FontColor->GrayLevel[0.4]], 
        StyleBox["\<\"CASHBACK\"\>",
         FontColor->GrayLevel[0.4]], 
        TagBox[
         InterpretationBox["\<\"-0.13\"\>",
          -0.13,
          AutoDelete->True],
         NumberForm[#, 4]& ]},
       {
        StyleBox["\<\"02/05/2013\"\>",
         FontColor->GrayLevel[0.4]], 
        StyleBox["\<\"PAYMENT RECEIVED - THANK YOU\"\>",
         FontColor->GrayLevel[0.4]], 
        TagBox[
         InterpretationBox["\<\"-55.53\"\>",
          -55.53,
          AutoDelete->True],
         NumberForm[#, 4]& ]},
       {
        StyleBox["\<\"05/05/2013\"\>",
         FontColor->GrayLevel[0.4]], 
        StyleBox["\<\"'T KOFFIEBOONTJE AALTER\"\>",
         FontColor->GrayLevel[0.4]], 
        TagBox[
         InterpretationBox["\<\"151.3\"\>",
          151.3,
          AutoDelete->True],
         NumberForm[#, 4]& ]},
       {
        StyleBox["\<\"\"\>",
         FontColor->GrayLevel[0.4]], 
        StyleBox["\<\"## 00000000179.10 EUR @ 1.183741\"\>",
         FontColor->GrayLevel[0.4]], 
        TagBox[
         InterpretationBox["\<\"0.\"\>",
          0.,
          AutoDelete->True],
         NumberForm[#, 4]& ]},
       {
        StyleBox["\<\"05/05/2013\"\>",
         FontColor->GrayLevel[0.4]], 
        StyleBox["\<\"NON STERLING TRANSACTION FEE\"\>",
         FontColor->GrayLevel[0.4]], 
        TagBox[
         InterpretationBox["\<\"4.16\"\>",
          4.16,
          AutoDelete->True],
         NumberForm[#, 4]& ]},
       {
        StyleBox["\<\"\"\>",
         FontColor->GrayLevel[0.4]], 
        StyleBox["\<\"## 00000000179.10 EUR @ 0.000000\"\>",
         FontColor->GrayLevel[0.4]], 
        TagBox[
         InterpretationBox["\<\"0.\"\>",
          0.,
          AutoDelete->True],
         NumberForm[#, 4]& ]},
       {
        StyleBox["\<\"18/05/2013\"\>",
         FontColor->GrayLevel[0.4]], 
        StyleBox["\<\"MAPLIN EXETER EX2 EXETER\"\>",
         FontColor->GrayLevel[0.4]], 
        TagBox[
         InterpretationBox["\<\"69.99\"\>",
          69.99,
          AutoDelete->True],
         NumberForm[#, 4]& ]},
       {
        StyleBox["\<\"28/05/2013\"\>",
         FontColor->GrayLevel[0.4]], 
        StyleBox["\<\"CASHBACK\"\>",
         FontColor->GrayLevel[0.4]], 
        TagBox[
         InterpretationBox["\<\"-0.55\"\>",
          -0.55,
          AutoDelete->True],
         NumberForm[#, 4]& ]},
       {
        StyleBox["\<\"27/05/2013\"\>",
         FontColor->GrayLevel[0.4]], 
        StyleBox["\<\"THE ROYAL SEVEN STARS DEVON\"\>",
         FontColor->GrayLevel[0.4]], 
        TagBox[
         InterpretationBox["\<\"27.6\"\>",
          27.6,
          AutoDelete->True],
         NumberForm[#, 4]& ]},
       {
        StyleBox["\<\"10/06/2013\"\>",
         FontColor->GrayLevel[0.4]], 
        StyleBox["\<\"WWW.TAYNA.CO.UK INTERNET\"\>",
         FontColor->GrayLevel[0.4]], 
        TagBox[
         InterpretationBox["\<\"233.\"\>",
          232.98,
          AutoDelete->True],
         NumberForm[#, 4]& ]},
       {
        StyleBox["\<\"10/06/2013\"\>",
         FontColor->GrayLevel[0.4]], 
        StyleBox["\<\"PAYPAL *ELECTRONCWW 35314369001\"\>",
         FontColor->GrayLevel[0.4]], 
        TagBox[
         InterpretationBox["\<\"80.\"\>",
          80.,
          AutoDelete->True],
         NumberForm[#, 4]& ]},
       {
        StyleBox["\<\"11/06/2013\"\>",
         FontColor->GrayLevel[0.4]], 
        StyleBox["\<\"WWW.TAYNA.CO.UK INTERNET\"\>",
         FontColor->GrayLevel[0.4]], 
        TagBox[
         InterpretationBox["\<\"-6.8\"\>",
          -6.8,
          AutoDelete->True],
         NumberForm[#, 4]& ]},
       {
        StyleBox["\<\"19/06/2013\"\>",
         FontColor->GrayLevel[0.4]], 
        StyleBox["\<\"PAYMENT RECEIVED - THANK YOU\"\>",
         FontColor->GrayLevel[0.4]], 
        TagBox[
         InterpretationBox["\<\"-225.3\"\>",
          -225.32,
          AutoDelete->True],
         NumberForm[#, 4]& ]},
       {
        StyleBox["\<\"21/06/2013\"\>",
         FontColor->GrayLevel[0.4]], 
        StyleBox["\<\"DIRECT DEBIT PAYMENT THANK YOU\"\>",
         FontColor->GrayLevel[0.4]], 
        TagBox[
         InterpretationBox["\<\"-5.\"\>",
          -5.,
          AutoDelete->True],
         NumberForm[#, 4]& ]},
       {
        StyleBox["\<\"24/06/2013\"\>",
         FontColor->GrayLevel[0.4]], 
        StyleBox["\<\"WP-ALLPLAS.CO.UK ONLNE HITCHIN\"\>",
         FontColor->GrayLevel[0.4]], 
        TagBox[
         InterpretationBox["\<\"168.6\"\>",
          168.6,
          AutoDelete->True],
         NumberForm[#, 4]& ]},
       {
        StyleBox["\<\"24/06/2013\"\>",
         FontColor->GrayLevel[0.4]], 
        StyleBox["\<\"WP-SCOACH ETICKET STOCKPORT\"\>",
         FontColor->GrayLevel[0.4]], 
        TagBox[
         InterpretationBox["\<\"38.5\"\>",
          38.5,
          AutoDelete->True],
         NumberForm[#, 4]& ]},
       {
        ItemBox[
         UnderscriptBox["\[VerticalEllipsis]", 
          StyleBox["4",
           LineColor->GrayLevel[0.5],
           FrontFaceColor->GrayLevel[0.5],
           BackFaceColor->GrayLevel[0.5],
           GraphicsColor->GrayLevel[0.5],
           FontColor->GrayLevel[0.5]]],
         Alignment->{Center, Bottom},
         Background->RGBColor[0.985, 0.98, 0.973]], "\[SpanFromLeft]", 
        "\[SpanFromLeft]"},
       {
        ItemBox[
         RowBox[{
          RowBox[{"2", " ", "levels"}], 
          AdjustmentBox[
           RowBox[{" ", 
            RowBox[{"|", " "}]}],
           BoxBaselineShift->-0.3], 
          RowBox[{"20", "elements"}], 
          AdjustmentBox[
           RowBox[{" ", 
            RowBox[{"|", " "}]}],
           BoxBaselineShift->-0.3], 
          RowBox[{"60", 
           RowBox[{"elements", " ", "total"}]}]}],
         Alignment->{Left, Center},
         Background->RGBColor[0.92, 0.92, 0.9],
         BaseStyle->{
          FontFamily -> "Helvetica", FontSize -> 10, FontColor -> 
           GrayLevel[0.4], Editable -> False, Selectable -> False},
         ItemSize->{Automatic, Automatic}], "\[SpanFromLeft]", 
        "\[SpanFromLeft]"}
      },
      FrameStyle->RGBColor[0, 0, 0, 0.4],
      GridBoxAlignment->{"Columns" -> {{Left}}},
      GridBoxBackground->{"Columns" -> {}, "Rows" -> {
          RGBColor[0.92, 0.92, 0.9]}},
      GridBoxDividers->{"Columns" -> {
          RGBColor[0, 0, 0, 0.4], {
           RGBColor[0, 0, 0, 0.09]}, 
          RGBColor[0, 0, 0, 0.4]}, "Rows" -> {
          RGBColor[0, 0, 0, 0.4], 
          RGBColor[0, 0, 0, 0.3], {
           RGBColor[0, 0, 0, 0.08]}, 
          RGBColor[0, 0, 0, 0.4]}},
      GridBoxFrame->{"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> True}},
      GridBoxItemSize->{
       "Columns" -> {{All}}, "ColumnsIndexed" -> {}, "Rows" -> {{1.3}}, 
        "RowsIndexed" -> {}},
      GridBoxSpacings->{"Columns" -> {
          Offset[1.4], {
           Offset[1.75]}, 
          Offset[4.199999999999999]}, "ColumnsIndexed" -> {}, "Rows" -> {
          Offset[1.2], 
          Offset[0.6], {
           Offset[0.48]}, 
          Offset[0.4]}, "RowsIndexed" -> {}}], True->GridBox[{
       {
        RowBox[{"{", 
         StyleBox[
          SubscriptBox["\[CenterEllipsis]", "20"],
          LineColor->GrayLevel[0.5],
          FrontFaceColor->GrayLevel[0.5],
          BackFaceColor->GrayLevel[0.5],
          GraphicsColor->GrayLevel[0.5],
          FontColor->GrayLevel[0.5]], "}"}]},
       {
        ItemBox[
         RowBox[{
          RowBox[{"2", " ", "levels"}], 
          AdjustmentBox[
           RowBox[{" ", 
            RowBox[{"|", " "}]}],
           BoxBaselineShift->-0.3], 
          RowBox[{"20", "elements"}], 
          AdjustmentBox[
           RowBox[{" ", 
            RowBox[{"|", " "}]}],
           BoxBaselineShift->-0.3], 
          RowBox[{"60", 
           RowBox[{"elements", " ", "total"}]}]}],
         Alignment->{Left, Center},
         Background->RGBColor[0.92, 0.92, 0.9],
         BaseStyle->{
          FontFamily -> "Helvetica", FontSize -> 10, FontColor -> 
           GrayLevel[0.4], Editable -> False, Selectable -> False},
         ItemSize->{Automatic, Automatic}]}
      },
      FrameStyle->RGBColor[0, 0, 0, 0.4],
      GridBoxAlignment->{"Columns" -> {Left}},
      GridBoxFrame->{"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> True}},
      GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
      GridBoxSpacings->{"Columns" -> {
          Offset[1.4], {
           Offset[0.5599999999999999]}, 
          Offset[0.7]}, "ColumnsIndexed" -> {}, "Rows" -> {
          Offset[0.8], {
           Offset[0.4]}, 
          Offset[0.]}, "RowsIndexed" -> {}}]}, Dynamic[
      CurrentValue[Evaluatable]],
     BaselinePosition->Baseline,
     ImageSize->Automatic],
    Editable->False,
    Selectable->True,
    ShowAutoStyles->False,
    LineSpacing->{1.1, 5},
    NumberMarks->False,
    SpanMinSize->1.,
    SpanMaxSize->3,
    LineBreakWithin->False,
    LineIndent->0,
    LinebreakAdjustments->{0.4, 5, 100, 0, 0.5},
    FontFamily->"Helvetica Neue",
    FontWeight->"Light",
    Background->RGBColor[0.985, 0.98, 0.973]],
   Deploy],
  Dataset[{
    Association[
    "date" -> "29/04/2013", "desc" -> "CASHBACK", "value" -> -0.13], 
    Association[
    "date" -> "02/05/2013", "desc" -> "PAYMENT RECEIVED - THANK YOU", 
     "value" -> -55.53], 
    Association[
    "date" -> "05/05/2013", "desc" -> "'T KOFFIEBOONTJE AALTER", "value" -> 
     151.3], 
    Association[
    "date" -> "", "desc" -> "## 00000000179.10 EUR @ 1.183741", "value" -> 0], 
    Association[
    "date" -> "05/05/2013", "desc" -> "NON STERLING TRANSACTION FEE", "value" -> 
     4.16], 
    Association[
    "date" -> "", "desc" -> "## 00000000179.10 EUR @ 0.000000", "value" -> 0], 
    Association[
    "date" -> "18/05/2013", "desc" -> "MAPLIN EXETER EX2 EXETER", "value" -> 
     69.99], 
    Association[
    "date" -> "28/05/2013", "desc" -> "CASHBACK", "value" -> -0.55], 
    Association[
    "date" -> "27/05/2013", "desc" -> "THE ROYAL SEVEN STARS DEVON", "value" -> 
     27.6], 
    Association[
    "date" -> "10/06/2013", "desc" -> "WWW.TAYNA.CO.UK INTERNET", "value" -> 
     232.98], 
    Association[
    "date" -> "10/06/2013", "desc" -> "PAYPAL *ELECTRONCWW 35314369001", 
     "value" -> 80.], 
    Association[
    "date" -> "11/06/2013", "desc" -> "WWW.TAYNA.CO.UK INTERNET", 
     "value" -> -6.8], 
    Association[
    "date" -> "19/06/2013", "desc" -> "PAYMENT RECEIVED - THANK YOU", 
     "value" -> -225.32], 
    Association[
    "date" -> "21/06/2013", "desc" -> "DIRECT DEBIT PAYMENT THANK YOU", 
     "value" -> -5.], 
    Association[
    "date" -> "24/06/2013", "desc" -> "WP-ALLPLAS.CO.UK ONLNE HITCHIN", 
     "value" -> 168.6], 
    Association[
    "date" -> "24/06/2013", "desc" -> "WP-SCOACH ETICKET STOCKPORT", "value" -> 
     38.5], 
    Association[
    "date" -> "28/06/2013", "desc" -> "CASHBACK", "value" -> -1.35], 
    Association[
    "date" -> "01/07/2013", "desc" -> "PAYPAL *ELECTRONCWW 35314369001", 
     "value" -> -7.95], 
    Association[
    "date" -> "08/07/2013", "desc" -> "THE MILL ON THE EXE EXETER", "value" -> 
     33.5], 
    Association[
    "date" -> "08/07/2013", "desc" -> "B & Q EXETER EXR166", "value" -> 
     73.86]}, 
   TypeSystem`Vector[
    TypeSystem`Struct[{"date", "desc", "value"}, {
      TypeSystem`Atom[String], 
      TypeSystem`Atom[String], 
      TypeSystem`Atom[Real]}], 20], 
   Association["ID" -> 108705680194480]]]], "Output"]
}, Open  ]],

Cell["\<\
We can now use very general queries to extract information from the dataset \
and store values calculated from the search result:\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"tags", "[", "\"\<food\>\"", "]"}], "=", 
   RowBox[{"{", 
    RowBox[{"\"\<ROYAL SEVEN\>\"", ",", "\"\<KOFFIEBOONTJE\>\""}], "}"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"dataShort", "[", 
  RowBox[{"Select", "[", 
   RowBox[{
    RowBox[{"StringMatchQ", "[", 
     RowBox[{"#desc", ",", 
      RowBox[{"___", "~~", 
       RowBox[{"tags", "[", "\"\<food\>\"", "]"}], "~~", "___"}]}], "]"}], 
    "&"}], "]"}], "]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"total", "[", "\"\<food\>\"", "]"}], "=", 
  RowBox[{"%", "[", 
   RowBox[{"Total", ",", "\"\<value\>\""}], "]"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"len", "[", "\"\<food\>\"", "]"}], "=", 
  RowBox[{"%%", "//", "Length"}]}]}], "Input",
 InitializationGroup->True],

Cell[BoxData[
 InterpretationBox[
  TagBox[
   StyleBox[
    PaneSelectorBox[{False->GridBox[{
       {
        StyleBox["\<\"date\"\>",
         LineColor->GrayLevel[0.3],
         FrontFaceColor->GrayLevel[0.3],
         BackFaceColor->GrayLevel[0.3],
         GraphicsColor->GrayLevel[0.3],
         FontColor->GrayLevel[0.3]], 
        StyleBox["\<\"desc\"\>",
         LineColor->GrayLevel[0.3],
         FrontFaceColor->GrayLevel[0.3],
         BackFaceColor->GrayLevel[0.3],
         GraphicsColor->GrayLevel[0.3],
         FontColor->GrayLevel[0.3]], 
        StyleBox["\<\"value\"\>",
         LineColor->GrayLevel[0.3],
         FrontFaceColor->GrayLevel[0.3],
         BackFaceColor->GrayLevel[0.3],
         GraphicsColor->GrayLevel[0.3],
         FontColor->GrayLevel[0.3]]},
       {
        StyleBox["\<\"05/05/2013\"\>",
         FontColor->GrayLevel[0.4]], 
        StyleBox["\<\"'T KOFFIEBOONTJE AALTER\"\>",
         FontColor->GrayLevel[0.4]], 
        TagBox[
         InterpretationBox["\<\"151.3\"\>",
          151.3,
          AutoDelete->True],
         NumberForm[#, 4]& ]},
       {
        StyleBox["\<\"27/05/2013\"\>",
         FontColor->GrayLevel[0.4]], 
        StyleBox["\<\"THE ROYAL SEVEN STARS DEVON\"\>",
         FontColor->GrayLevel[0.4]], 
        TagBox[
         InterpretationBox["\<\"27.6\"\>",
          27.6,
          AutoDelete->True],
         NumberForm[#, 4]& ]},
       {
        ItemBox[
         RowBox[{
          RowBox[{"2", " ", "levels"}], 
          AdjustmentBox[
           RowBox[{" ", 
            RowBox[{"|", " "}]}],
           BoxBaselineShift->-0.3], 
          RowBox[{"2", "elements"}], 
          AdjustmentBox[
           RowBox[{" ", 
            RowBox[{"|", " "}]}],
           BoxBaselineShift->-0.3], 
          RowBox[{"6", 
           RowBox[{"elements", " ", "total"}]}]}],
         Alignment->{Left, Center},
         Background->RGBColor[0.92, 0.92, 0.9],
         BaseStyle->{
          FontFamily -> "Helvetica", FontSize -> 10, FontColor -> 
           GrayLevel[0.4], Editable -> False, Selectable -> False},
         ItemSize->{Automatic, Automatic}], "\[SpanFromLeft]", 
        "\[SpanFromLeft]"}
      },
      FrameStyle->RGBColor[0, 0, 0, 0.4],
      GridBoxAlignment->{"Columns" -> {{Left}}},
      GridBoxBackground->{"Columns" -> {}, "Rows" -> {
          RGBColor[0.92, 0.92, 0.9]}},
      GridBoxDividers->{"Columns" -> {
          RGBColor[0, 0, 0, 0.4], {
           RGBColor[0, 0, 0, 0.09]}, 
          RGBColor[0, 0, 0, 0.4]}, "Rows" -> {
          RGBColor[0, 0, 0, 0.4], 
          RGBColor[0, 0, 0, 0.3], {
           RGBColor[0, 0, 0, 0.08]}, 
          RGBColor[0, 0, 0, 0.4]}},
      GridBoxFrame->{"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> True}},
      GridBoxItemSize->{
       "Columns" -> {{All}}, "ColumnsIndexed" -> {}, "Rows" -> {{1.3}}, 
        "RowsIndexed" -> {}},
      GridBoxSpacings->{"Columns" -> {
          Offset[1.4], {
           Offset[1.75]}, 
          Offset[4.199999999999999]}, "ColumnsIndexed" -> {}, "Rows" -> {
          Offset[1.2], 
          Offset[0.6], {
           Offset[0.48]}, 
          Offset[0.4]}, "RowsIndexed" -> {}}], True->GridBox[{
       {
        RowBox[{"{", 
         StyleBox[
          SubscriptBox["\[CenterEllipsis]", "2"],
          LineColor->GrayLevel[0.5],
          FrontFaceColor->GrayLevel[0.5],
          BackFaceColor->GrayLevel[0.5],
          GraphicsColor->GrayLevel[0.5],
          FontColor->GrayLevel[0.5]], "}"}]},
       {
        ItemBox[
         RowBox[{
          RowBox[{"2", " ", "levels"}], 
          AdjustmentBox[
           RowBox[{" ", 
            RowBox[{"|", " "}]}],
           BoxBaselineShift->-0.3], 
          RowBox[{"2", "elements"}], 
          AdjustmentBox[
           RowBox[{" ", 
            RowBox[{"|", " "}]}],
           BoxBaselineShift->-0.3], 
          RowBox[{"6", 
           RowBox[{"elements", " ", "total"}]}]}],
         Alignment->{Left, Center},
         Background->RGBColor[0.92, 0.92, 0.9],
         BaseStyle->{
          FontFamily -> "Helvetica", FontSize -> 10, FontColor -> 
           GrayLevel[0.4], Editable -> False, Selectable -> False},
         ItemSize->{Automatic, Automatic}]}
      },
      FrameStyle->RGBColor[0, 0, 0, 0.4],
      GridBoxAlignment->{"Columns" -> {Left}},
      GridBoxFrame->{"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> True}},
      GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
      GridBoxSpacings->{"Columns" -> {
          Offset[1.4], {
           Offset[0.5599999999999999]}, 
          Offset[0.7]}, "ColumnsIndexed" -> {}, "Rows" -> {
          Offset[0.8], {
           Offset[0.4]}, 
          Offset[0.]}, "RowsIndexed" -> {}}]}, Dynamic[
      CurrentValue[Evaluatable]],
     BaselinePosition->Baseline,
     ImageSize->Automatic],
    Editable->False,
    Selectable->True,
    ShowAutoStyles->False,
    LineSpacing->{1.1, 5},
    NumberMarks->False,
    SpanMinSize->1.,
    SpanMaxSize->3,
    LineBreakWithin->False,
    LineIndent->0,
    LinebreakAdjustments->{0.4, 5, 100, 0, 0.5},
    FontFamily->"Helvetica Neue",
    FontWeight->"Light",
    Background->RGBColor[0.985, 0.98, 0.973]],
   Deploy],
  Dataset[{
    Association[
    "date" -> "05/05/2013", "desc" -> "'T KOFFIEBOONTJE AALTER", "value" -> 
     151.3], 
    Association[
    "date" -> "27/05/2013", "desc" -> "THE ROYAL SEVEN STARS DEVON", "value" -> 
     27.6]}, 
   TypeSystem`Vector[
    TypeSystem`Struct[{"date", "desc", "value"}, {
      TypeSystem`Atom[String], 
      TypeSystem`Atom[String], 
      TypeSystem`Atom[Real]}], TypeSystem`AnyLength], 
   Association["Origin" -> HoldComplete[
      Query[
       Select[StringMatchQ[
         Slot["desc"], 
         StringExpression[
          BlankNullSequence[], 
          $CellContext`tags["food"], 
          BlankNullSequence[]]]& ]][
       Dataset`DatasetHandle[108705680194480]]], "ID" -> 
    81960918842288]]]], "Output",
 InitializationGroup->True],

Cell[BoxData["178.9`"], "Output",
 InitializationGroup->True],

Cell[BoxData["2"], "Output",
 InitializationGroup->True]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}, Open  ]]
},
WindowSize->{1694, 1151},
WindowMargins->{{4, Automatic}, {1, Automatic}},
ShowCellTags->True,
Magnification:>1.5 Inherited,
FrontEndVersion->"10.0 for Mac OS X x86 (32-bit, 64-bit Kernel) (December 4, \
2014)",
StyleDefinitions->"Default.nb"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{
 "todo"->{
  Cell[746, 30, 43, 1, 112, "Section",
   CellTags->"todo"],
  Cell[478927, 9858, 2253, 59, 236, "Input",
   InitializationGroup->True,
   CellTags->{"tofix", "todo"}],
  Cell[481183, 9919, 49239, 1251, 879, "Output",
   CellTags->{"tofix", "todo"}]},
 "palette"->{
  Cell[25738, 886, 1693, 50, 154, "Input",
   Evaluatable->False,
   CellTags->"palette"]},
 "tofix"->{
  Cell[478927, 9858, 2253, 59, 236, "Input",
   InitializationGroup->True,
   CellTags->{"tofix", "todo"}],
  Cell[481183, 9919, 49239, 1251, 879, "Output",
   CellTags->{"tofix", "todo"}]}
 }
*)
(*CellTagsIndex
CellTagsIndex->{
 {"todo", 555140, 11940},
 {"palette", 555406, 11948},
 {"tofix", 555510, 11952}
 }
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[580, 22, 40, 0, 137, "Title"],
Cell[CellGroupData[{
Cell[645, 26, 76, 0, 96, "Chapter"],
Cell[CellGroupData[{
Cell[746, 30, 43, 1, 112, "Section",
 CellTags->"todo"],
Cell[CellGroupData[{
Cell[814, 35, 281, 8, 44, "ItemNumbered"],
Cell[1098, 45, 187, 8, 43, "ItemNumbered"],
Cell[1288, 55, 263, 9, 43, "ItemNumbered"],
Cell[1554, 66, 177, 8, 43, "ItemNumbered"],
Cell[1734, 76, 204, 9, 44, "ItemNumbered"],
Cell[1941, 87, 192, 8, 43, "ItemNumbered"],
Cell[2136, 97, 205, 8, 43, "ItemNumbered"],
Cell[2344, 107, 298, 14, 44, "ItemNumbered"],
Cell[2645, 123, 306, 14, 44, "ItemNumbered"],
Cell[2954, 139, 196, 8, 43, "ItemNumbered"],
Cell[3153, 149, 174, 8, 43, "ItemNumbered"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[3376, 163, 150, 2, 95, "Section"],
Cell[CellGroupData[{
Cell[3551, 169, 47, 0, 65, "Subsection"],
Cell[3601, 171, 164, 3, 43, "Input",
 InitializationCell->True]
}, Open  ]],
Cell[CellGroupData[{
Cell[3802, 179, 39, 0, 65, "Subsection"],
Cell[3844, 181, 291, 9, 99, "Input",
 InitializationCell->True]
}, Closed]],
Cell[CellGroupData[{
Cell[4172, 195, 133, 2, 51, "Subsection"],
Cell[4308, 199, 461, 16, 76, "Text"],
Cell[CellGroupData[{
Cell[4794, 219, 78, 1, 52, "Subsubsection",
 InitializationGroup->True],
Cell[4875, 222, 1663, 51, 379, "Input",
 InitializationCell->True]
}, Closed]],
Cell[CellGroupData[{
Cell[6575, 278, 55, 0, 41, "Subsubsection"],
Cell[6633, 280, 759, 16, 306, "Text"],
Cell[7395, 298, 4059, 128, 724, "Text"],
Cell[11457, 428, 272, 6, 171, "Text"]
}, Closed]],
Cell[CellGroupData[{
Cell[11766, 439, 174, 2, 41, "Subsubsection"],
Cell[11943, 443, 190, 6, 105, "Text"],
Cell[12136, 451, 505, 15, 211, "Input"],
Cell[CellGroupData[{
Cell[12666, 470, 293, 8, 96, "Input"],
Cell[12962, 480, 192, 5, 96, "Output"]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[13203, 491, 137, 1, 41, "Subsubsection"],
Cell[13343, 494, 2656, 71, 549, "Input"]
}, Closed]],
Cell[CellGroupData[{
Cell[16036, 570, 106, 1, 41, "Subsubsection"],
Cell[16145, 573, 467, 13, 99, "Input",
 InitializationCell->True],
Cell[CellGroupData[{
Cell[16637, 590, 282, 7, 96, "Input"],
Cell[16922, 599, 83, 2, 96, "Output"]
}, Open  ]],
Cell[17020, 604, 301, 8, 171, "Text"],
Cell[17324, 614, 497, 16, 154, "Input"],
Cell[17824, 632, 594, 17, 211, "Input"],
Cell[CellGroupData[{
Cell[18443, 653, 471, 10, 96, "Input"],
Cell[18917, 665, 93, 2, 96, "Output"]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[19059, 673, 57, 0, 41, "Subsubsection"],
Cell[CellGroupData[{
Cell[19141, 677, 773, 22, 117, "Input"],
Cell[19917, 701, 678, 20, 117, "Output"]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[20644, 727, 64, 0, 41, "Subsubsection"],
Cell[20711, 729, 232, 4, 171, "Text"],
Cell[CellGroupData[{
Cell[20968, 737, 1408, 44, 324, "Input"],
Cell[22379, 783, 74, 2, 96, "Output"]
}, Open  ]],
Cell[22468, 788, 156, 3, 103, "Text"],
Cell[CellGroupData[{
Cell[22649, 795, 1704, 48, 154, "Input"],
Cell[24356, 845, 467, 9, 76, "Message"],
Cell[24826, 856, 467, 9, 76, "Message"],
Cell[25296, 867, 333, 11, 96, "Output"]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[25678, 884, 57, 0, 41, "Subsubsection"],
Cell[25738, 886, 1693, 50, 154, "Input",
 Evaluatable->False,
 CellTags->"palette"]
}, Open  ]],
Cell[CellGroupData[{
Cell[27468, 941, 64, 0, 52, "Subsubsection"],
Cell[27535, 943, 110, 3, 103, "Text"],
Cell[27648, 948, 401, 12, 211, "Input"],
Cell[CellGroupData[{
Cell[28074, 964, 82, 1, 96, "Input"],
Cell[28159, 967, 1218, 27, 541, "Output"]
}, Closed]]
}, Closed]]
}, Open  ]],
Cell[CellGroupData[{
Cell[29438, 1001, 40, 0, 65, "Subsection"],
Cell[CellGroupData[{
Cell[29503, 1005, 70, 0, 117, "Subsubsection"],
Cell[29576, 1007, 650, 14, 172, "Text"],
Cell[30229, 1023, 696, 22, 96, "Input",
 InitializationGroup->True],
Cell[30928, 1047, 665, 18, 105, "Text"],
Cell[CellGroupData[{
Cell[31618, 1069, 249, 8, 99, "Input",
 InitializationCell->True],
Cell[31870, 1079, 445, 10, 70, "Output"]
}, Open  ]],
Cell[32330, 1092, 320, 7, 105, "Text"],
Cell[CellGroupData[{
Cell[32675, 1103, 1165, 31, 211, "Input",
 InitializationGroup->True],
Cell[33843, 1136, 232, 6, 70, "Output"]
}, Open  ]],
Cell[34090, 1145, 448, 16, 105, "Text"],
Cell[CellGroupData[{
Cell[34563, 1165, 846, 22, 154, "Input",
 InitializationGroup->True],
Cell[35412, 1189, 485, 14, 70, "Output"]
}, Open  ]],
Cell[35912, 1206, 451, 15, 105, "Text"],
Cell[CellGroupData[{
Cell[36388, 1225, 868, 22, 154, "Input",
 InitializationGroup->True],
Cell[37259, 1249, 421, 12, 70, "Output"]
}, Open  ]],
Cell[37695, 1264, 266, 7, 105, "Text"],
Cell[CellGroupData[{
Cell[37986, 1275, 730, 21, 154, "Input",
 InitializationGroup->True],
Cell[38719, 1298, 958, 22, 70, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[39714, 1325, 345, 8, 154, "Input"],
Cell[40062, 1335, 31, 0, 96, "Output"],
Cell[40096, 1337, 31, 0, 96, "Output"]
}, Open  ]],
Cell[40142, 1340, 327, 10, 103, "Text"],
Cell[CellGroupData[{
Cell[40494, 1354, 1158, 31, 226, "Input",
 InitializationCell->True],
Cell[41655, 1387, 302, 7, 70, "Output"],
Cell[41960, 1396, 1931, 39, 70, "Output"]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[43940, 1441, 183, 2, 91, "Subsubsection"],
Cell[CellGroupData[{
Cell[44148, 1447, 1026, 31, 211, "Input",
 InitializationCell->True],
Cell[45177, 1480, 1571, 52, 70, "Output"]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[46797, 1538, 192, 2, 91, "Subsubsection"],
Cell[46992, 1542, 452, 11, 235, "Text"],
Cell[CellGroupData[{
Cell[47469, 1557, 1797, 48, 324, "Input"],
Cell[49269, 1607, 1004, 23, 96, "Output"],
Cell[50276, 1632, 1002, 23, 96, "Output"],
Cell[51281, 1657, 122, 2, 96, "Output"]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[51452, 1665, 62, 0, 91, "Subsubsection"],
Cell[CellGroupData[{
Cell[51539, 1669, 381, 8, 99, "Input"],
Cell[51923, 1679, 174, 4, 96, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[52134, 1688, 341, 7, 99, "Input"],
Cell[52478, 1697, 157, 3, 96, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[52672, 1705, 467, 13, 99, "Input"],
Cell[53142, 1720, 120, 3, 96, "Output"]
}, Open  ]]
}, Closed]]
}, Closed]]
}, Open  ]],
Cell[CellGroupData[{
Cell[53335, 1731, 68, 0, 95, "Section"],
Cell[CellGroupData[{
Cell[53428, 1735, 36, 0, 65, "Subsection"],
Cell[53467, 1737, 1517, 21, 282, "Text"],
Cell[54987, 1760, 686, 13, 135, "Text"],
Cell[55676, 1775, 186, 4, 46, "Text"],
Cell[55865, 1781, 220, 4, 46, "Text"],
Cell[56088, 1787, 922, 14, 194, "Text"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[57059, 1807, 51, 0, 95, "Section"],
Cell[CellGroupData[{
Cell[57135, 1811, 57, 0, 65, "Subsection"],
Cell[57195, 1813, 448, 8, 105, "Text"],
Cell[57646, 1823, 7958, 184, 794, "Input",
 InitializationCell->True],
Cell[CellGroupData[{
Cell[65629, 2011, 70, 0, 52, "Subsubsection"],
Cell[65702, 2013, 431, 9, 76, "Text"],
Cell[66136, 2024, 3372, 73, 394, "Input",
 InitializationCell->True],
Cell[69511, 2099, 325, 8, 94, "Input",
 InitializationCell->True],
Cell[69839, 2109, 666, 18, 44, "Input",
 InitializationGroup->True],
Cell[70508, 2129, 13516, 262, 444, "Input",
 InitializationCell->True]
}, Open  ]],
Cell[CellGroupData[{
Cell[84061, 2396, 43, 0, 52, "Subsubsection"],
Cell[CellGroupData[{
Cell[84129, 2400, 222, 5, 43, "Input"],
Cell[84354, 2407, 383540, 7155, 446, "Output"],
Cell[467897, 9564, 506, 9, 54, "Print"]
}, Open  ]],
Cell[468418, 9576, 352, 6, 76, "Text"],
Cell[468773, 9584, 666, 18, 44, "Input",
 InitializationGroup->True],
Cell[CellGroupData[{
Cell[469464, 9606, 106, 2, 43, "Input"],
Cell[469573, 9610, 4741, 98, 494, "Output"]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[474375, 9715, 68, 0, 65, "Subsection"],
Cell[474446, 9717, 705, 19, 94, "Input",
 InitializationGroup->True],
Cell[475154, 9738, 39, 0, 46, "Text"],
Cell[475196, 9740, 3047, 86, 269, "Input",
 InitializationCell->True],
Cell[CellGroupData[{
Cell[478268, 9830, 147, 4, 43, "Input"],
Cell[478418, 9836, 138, 3, 43, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[478593, 9844, 49, 0, 52, "Subsubsection"],
Cell[478645, 9846, 257, 8, 46, "Text"],
Cell[CellGroupData[{
Cell[478927, 9858, 2253, 59, 236, "Input",
 InitializationGroup->True,
 CellTags->{"tofix", "todo"}],
Cell[481183, 9919, 49239, 1251, 879, "Output",
 CellTags->{"tofix", "todo"}]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[530471, 11176, 58, 0, 52, "Subsubsection"],
Cell[530532, 11178, 208, 4, 76, "Text"],
Cell[CellGroupData[{
Cell[530765, 11186, 759, 20, 69, "Input"],
Cell[531527, 11208, 769, 23, 93, "Output"]
}, Open  ]],
Cell[532311, 11234, 43, 0, 46, "Text"],
Cell[CellGroupData[{
Cell[532379, 11238, 398, 11, 43, "Input"],
Cell[532780, 11251, 658, 21, 101, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[533475, 11277, 120, 3, 43, "Input"],
Cell[533598, 11282, 204, 6, 54, "Output"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[533851, 11294, 38, 0, 52, "Subsubsection"],
Cell[CellGroupData[{
Cell[533914, 11298, 651, 18, 119, "Input",
 InitializationCell->True],
Cell[534568, 11318, 140, 3, 702, "Output"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[534757, 11327, 50, 0, 52, "Subsubsection"],
Cell[CellGroupData[{
Cell[534832, 11331, 367, 11, 43, "Input",
 InitializationCell->True],
Cell[535202, 11344, 12399, 363, 702, "Output"]
}, Open  ]],
Cell[547616, 11710, 153, 3, 46, "Text"],
Cell[CellGroupData[{
Cell[547794, 11717, 793, 22, 119, "Input",
 InitializationGroup->True],
Cell[548590, 11741, 5998, 172, 169, "Output",
 InitializationGroup->True],
Cell[554591, 11915, 61, 1, 43, "Output",
 InitializationGroup->True],
Cell[554655, 11918, 56, 1, 43, "Output",
 InitializationGroup->True]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}
]
*)

(* End of internal cache information *)
